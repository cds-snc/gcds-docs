{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/utils/menus/utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Handle event for keyboard control of nav\n * @param {Event} event\n * @param {Element} nav\n * @param {any[]} queue\n */\nexport async function handleKeyDownNav(event, nav, queue) {\n  const key = event.key;\n  const currentIndex = queue.indexOf(\n    document.activeElement == nav\n      ? document.activeElement.shadowRoot.activeElement\n      : document.activeElement,\n  );\n  const activeElement = queue[currentIndex];\n\n  switch (key) {\n    // Down arrow\n    case 'ArrowDown':\n      event.preventDefault();\n      // If on last item, jump to first item\n      if (currentIndex + 1 > queue.length - 1) {\n        await focusNavItem(0, queue);\n        // Jump to next item\n      } else {\n        await focusNavItem(currentIndex + 1, queue);\n      }\n      break;\n\n    // Up arrow\n    case 'ArrowUp':\n      event.preventDefault();\n      // If on first item, jump to last item\n      if (currentIndex - 1 < 0) {\n        await focusNavItem(queue.length - 1, queue);\n        // Jump to previous item\n      } else {\n        await focusNavItem(currentIndex - 1, queue);\n      }\n      break;\n\n    // Right arrow\n    case 'ArrowRight':\n      event.preventDefault();\n      if (\n        activeElement.nodeName == 'GCDS-NAV-GROUP' &&\n        !activeElement.hasAttribute('open')\n      ) {\n        await toggleNavGroup(activeElement, nav);\n      }\n      break;\n\n    // Left arrow || ESC\n    case 'ArrowLeft':\n    case 'Escape':\n      event.preventDefault();\n      // Currently focusing a gcds-nav-group\n      if (\n        activeElement.nodeName == 'GCDS-NAV-GROUP' &&\n        activeElement.hasAttribute('open')\n      ) {\n        await toggleNavGroup(activeElement, nav);\n        // Currently focus within a gcds-nav-group\n      } else if (activeElement.parentNode.nodeName == 'GCDS-NAV-GROUP') {\n        await toggleNavGroup(activeElement.parentNode, nav);\n      } else if (\n        activeElement.parentNode == nav &&\n        (await (\n          activeElement.parentNode as HTMLGcdsTopNavElement\n        ).getNavSize()) == 'mobile'\n      ) {\n        await toggleNavGroup(queue[queue.length - 1], nav);\n      }\n      break;\n\n    // Tab - special logic on mobile screen size\n    case 'Tab':\n      if ((await nav.getNavSize()) == 'mobile') {\n        // shift + tab\n        if (event.shiftKey) {\n          if (\n            currentIndex == queue.length - 1 &&\n            activeElement.hasAttribute('open')\n          ) {\n            event.preventDefault();\n            await focusNavItem(queue.length - 2, queue);\n          }\n        } else {\n          // tab\n          if (currentIndex == queue.length - 2) {\n            event.preventDefault();\n            await focusNavItem(queue.length - 1, queue);\n          }\n        }\n      }\n      break;\n\n    // ENTER || SPACEBAR\n    case 'Enter':\n    case ' ':\n      if (activeElement.nodeName == 'GCDS-NAV-GROUP') {\n        event.preventDefault();\n        await toggleNavGroup(activeElement, nav);\n      }\n      break;\n  }\n}\n\n/**\n * Focus nav element\n * @param {Number} index\n * @param {any[]} queue\n */\nasync function focusNavItem(index, queue) {\n  if (queue[index].nodeName == 'GCDS-NAV-LINK') {\n    (queue[index] as HTMLGcdsNavLinkElement).focusLink();\n  } else if (queue[index].nodeName == 'GCDS-NAV-GROUP') {\n    (queue[index] as HTMLGcdsNavGroupElement).focusTrigger();\n  }\n}\n\n/**\n *\n * @param {Element} group\n * @param {Element} nav\n */\nasync function toggleNavGroup(group, nav) {\n  const navGroup = group as HTMLGcdsNavGroupElement;\n\n  // Close nav group\n  if (navGroup.hasAttribute('open')) {\n    await navGroup.toggleNav();\n    navGroup.focusTrigger();\n\n    nav.updateNavItemQueue(nav);\n\n    // Open nav group\n  } else {\n    await navGroup.toggleNav();\n\n    setTimeout(async () => {\n      await focusNavItem(\n        0,\n        document.activeElement == nav ? nav.children : navGroup.children,\n      );\n    }, 10);\n\n    nav.updateNavItemQueue(nav);\n  }\n}\n\n/**\n * Return array of child elements of passed element\n * @param {Element} el\n * @return {any[]} indexedItems\n */\nexport async function getNavItems(el) {\n  const indexedItems: Array<any> = Array.from(el.children);\n\n  indexedItems.forEach(async item => {\n    if (\n      item.nodeName == 'GCDS-NAV-GROUP' &&\n      (item as HTMLGcdsNavGroupElement).open\n    ) {\n      const groupChildren = await getNavItems(item);\n      indexedItems.splice(indexedItems.indexOf(item) + 1, 0, ...groupChildren);\n    }\n  });\n\n  return indexedItems;\n}\n"]}