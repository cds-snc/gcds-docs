{"version":3,"file":"gcds-button.js","sourceRoot":"","sources":["../../../src/components/gcds-button/gcds-button.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  Host,\n  Watch,\n  Prop,\n  State,\n  h,\n} from '@stencil/core';\nimport { assignLanguage, observerConfig } from '../../utils/utils';\nimport { inheritAttributes, emitEvent } from '../../utils/utils';\nimport i18n from './i18n/i18n';\n\n@Component({\n  tag: 'gcds-button',\n  styleUrl: 'gcds-button.css',\n  shadow: { delegatesFocus: true },\n})\nexport class GcdsButton {\n  @Element() el: HTMLElement;\n\n  private shadowElement?: HTMLElement;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Set button types\n   */\n  // prettier-ignore\n  @Prop({ mutable: true }) type: 'submit' | 'reset' | 'button' | 'link' = 'button';\n  @Watch('type')\n  validateType(newValue: string) {\n    const values = ['submit', 'reset', 'button', 'link'];\n\n    if (!values.includes(newValue)) {\n      this.type = 'button';\n    }\n  }\n\n  /**\n   * Set the main style\n   */\n  @Prop({ mutable: true }) buttonRole:\n    | 'start'\n    | 'primary'\n    | 'secondary'\n    | 'danger' = 'primary';\n\n  @Watch('buttonRole')\n  validateButtonRole(newValue: string) {\n    const values = ['start', 'primary', 'secondary', 'danger'];\n\n    if (!values.includes(newValue)) {\n      this.buttonRole = 'primary';\n    } else if (newValue === 'start' && this.size === 'small') {\n      this.size = 'regular';\n    }\n  }\n\n  /**\n   * Set the button size\n   */\n  @Prop({ mutable: true }) size: 'regular' | 'small' = 'regular';\n\n  @Watch('size')\n  validateSize(newValue: string) {\n    const values = ['regular', 'small'];\n\n    if (!values.includes(newValue) || this.buttonRole === 'start') {\n      this.size = 'regular';\n    }\n  }\n\n  /**\n   * The buttonId attribute specifies the id for a <button> element.\n   */\n  @Prop() buttonId: string;\n\n  /**\n   * The name attribute specifies the name for a <button> element.\n   */\n  @Prop() name: string | undefined;\n\n  /**\n   * The disabled attribute for a <button> element.\n   */\n  @Prop() disabled: boolean;\n\n  /**\n   * The value attribute specifies the value for a <button> element.\n   */\n  @Prop() value: string;\n\n  /**\n   * Link props\n   */\n\n  /**\n   * The href attribute specifies the URL of the page the link goes to\n   */\n  @Prop() href: string | undefined;\n\n  /**\n   * The rel attribute specifies the relationship between the current document and the linked document\n   */\n  @Prop() rel: string | undefined;\n\n  /**\n   * The target attribute specifies where to open the linked document\n   */\n  @Prop() target: string | undefined;\n\n  /**\n   * The download attribute specifies that the target (the file specified in the href attribute) will be downloaded when a user clicks on the hyperlink\n   */\n  @Prop() download: string | undefined;\n\n  /**\n   * Set additional HTML attributes not available in component properties\n   */\n  @State() inheritedAttributes: Object = {};\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when the button has been clicked.\n   */\n  @Event() gcdsClick!: EventEmitter<void>;\n\n  /**\n   * Emitted when the button has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the button loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  componentWillLoad() {\n    // Validate attributes and set defaults\n    this.validateType(this.type);\n    this.validateButtonRole(this.buttonRole);\n    this.validateSize(this.size);\n\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n  }\n\n  private handleClick = (e: Event) => {\n    // Check button type, only emit value if type is \"submit\"\n    const emitValue = this.type === 'submit' ? this.value : undefined;\n    const event = emitEvent(e, this.gcdsClick, emitValue);\n\n    if (event) {\n      if (!this.disabled && this.type != 'button' && this.type != 'link') {\n        // Attach button to form\n        const form = this.el.closest('form');\n\n        if (form) {\n          e.preventDefault();\n\n          const formButton = document.createElement('button');\n          formButton.type = this.type;\n          if (this.name) {\n            formButton.name = this.name;\n          }\n          if (this.value) {\n            formButton.value = this.value;\n          }\n          formButton.style.display = 'none';\n          form.appendChild(formButton);\n          formButton.click();\n          formButton.remove();\n        }\n      }\n\n      // Has any inherited attributes changed on click\n      this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n    }\n  };\n\n  render() {\n    const {\n      type,\n      buttonRole,\n      size,\n      buttonId,\n      disabled,\n      lang,\n      name,\n      href,\n      rel,\n      target,\n      download,\n      value,\n      inheritedAttributes,\n    } = this;\n\n    const Tag = type != 'link' ? 'button' : 'a';\n    const attrs =\n      Tag === 'button'\n        ? {\n            type: type,\n            ariaDisabled: disabled,\n            name,\n            value,\n          }\n        : {\n            href,\n            rel,\n            target,\n            download,\n          };\n\n    return (\n      <Host>\n        <Tag\n          {...attrs}\n          id={buttonId}\n          onBlur={() => this.gcdsBlur.emit()}\n          onFocus={() => this.gcdsFocus.emit()}\n          onClick={e => !disabled && this.handleClick(e)}\n          class={`gcds-button button--role-${buttonRole} button--${size}`}\n          ref={element => (this.shadowElement = element as HTMLElement)}\n          {...inheritedAttributes}\n          part=\"button\"\n        >\n          <slot></slot>\n\n          {type === 'link' && target === '_blank' ? (\n            <gcds-icon\n              name=\"external-link\"\n              label={i18n[lang].label}\n              margin-left=\"150\"\n            />\n          ) : null}\n        </Tag>\n      </Host>\n    );\n  }\n}\n"]}