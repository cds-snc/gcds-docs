{"version":3,"file":"gcds-details.js","sourceRoot":"","sources":["../../../src/components/gcds-details/gcds-details.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,OAAO,EACP,IAAI,EACJ,IAAI,EACJ,MAAM,EACN,KAAK,EAEL,MAAM,EACN,CAAC,GACF,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAO9C,MAAM,OAAO,WAAW;IALxB;QAmBE;;WAEG;QACqC,SAAI,GAAa,KAAK,CAAC;QAsD/D;;WAEG;QACK,iBAAY,GAAG,CAAC,EAAS,EAAE,EAAE;YACnC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;YACvB,IAAI,CAAC,IAAI,GAAI,EAAE,CAAC,MAA6B,CAAC,IAAI,CAAC;QACrD,CAAC,CAAC;KAyCH;IAhFC;;;;OAIG;IAEH,iBAAiB;QACf,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC;IAED,gBAAgB;;QACd,IAAI,CAAA,MAAA,IAAI,CAAC,cAAc,0CAAE,YAAY,CAAC,iBAAiB,CAAC,MAAK,MAAM,EAAE,CAAC;YACpE,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;QACzD,CAAC;IACH,CAAC;IAED;;OAEG;IAEH;;OAEG;IAEH,KAAK,CAAC,MAAM;QACV,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;QACvB,IAAI,CAAC,cAAc,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACvC,CAAC;IAUD,MAAM;QACJ,MAAM,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QAEpC,OAAO,CACL,EAAC,IAAI;YACH,4DAAK,KAAK,EAAC,cAAc;gBACvB,gFACiB,IAAI,CAAC,QAAQ,EAAE,mBAChB,gBAAgB,EAC9B,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAClC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,EACpC,OAAO,EAAE,CAAC,CAAC,EAAE;wBACX,MAAM,KAAK,GAAG,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;wBAC3C,IAAI,KAAK,EAAE,CAAC;4BACV,IAAI,CAAC,MAAM,EAAE,CAAC;wBAChB,CAAC;oBACH,CAAC,EACD,KAAK,EAAC,kBAAkB,EACxB,EAAE,EAAC,kBAAkB,IAEpB,YAAY,CACN;gBACT,gEACE,IAAI,EAAE,IAAI,EACV,EAAE,EAAC,gBAAgB,EACnB,KAAK,EAAC,gBAAgB,qBACN,kBAAkB,EAClC,QAAQ,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,EACrC,GAAG,EAAE,OAAO,CAAC,EAAE,CACb,CAAC,IAAI,CAAC,cAAc,GAAG,OAA6B,CAAC;oBAGvD,kEAAU,YAAY,CAAW;oBACjC,8DAAa,CACL,CACN,CACD,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import {\n  Component,\n  Element,\n  Host,\n  Prop,\n  Method,\n  Event,\n  EventEmitter,\n  Listen,\n  h,\n} from '@stencil/core';\nimport { emitEvent } from '../../utils/utils';\n\n@Component({\n  tag: 'gcds-details',\n  styleUrl: 'gcds-details.css',\n  shadow: true,\n})\nexport class GcdsDetails {\n  @Element() el: HTMLElement;\n\n  private detailsElement?: HTMLDetailsElement;\n\n  /**\n   * Props\n   */\n\n  /**\n   * The details title summarizes the panel content.\n   */\n  @Prop() detailsTitle!: string;\n\n  /**\n   * Defines if the details panel is open by default or not.\n   */\n  @Prop({ mutable: true, reflect: true }) open?: boolean = false;\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when the details has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the details loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  /**\n   * Emitted when the details has been clicked.\n   */\n  @Event() gcdsClick!: EventEmitter<void>;\n\n  /**\n   * Listen to beforeprint and afterprint events to handle details state\n   * when printing. This ensures that the details are open when printing,\n   * and closed after printing if they were closed before.\n   */\n  @Listen('beforeprint', { target: 'window' })\n  handleBeforePrint() {\n    if (!this.open) {\n      this.toggle();\n      this.detailsElement.setAttribute('data-was-closed', 'true');\n    }\n  }\n  @Listen('afterprint', { target: 'window' })\n  handleAfterPrint() {\n    if (this.detailsElement?.getAttribute('data-was-closed') === 'true') {\n      this.toggle();\n      this.detailsElement.removeAttribute('data-was-closed');\n    }\n  }\n\n  /**\n   * Methods\n   */\n\n  /*\n   * Toggle details open or closed\n   */\n  @Method()\n  async toggle() {\n    this.open = !this.open;\n    this.detailsElement.open = this.open;\n  }\n\n  /*\n   * Handle the details being toggled by other means (e.g., ctrl+f)\n   */\n  private handleToggle = (ev: Event) => {\n    this.open = !this.open;\n    this.open = (ev.target as HTMLDetailsElement).open;\n  };\n\n  render() {\n    const { detailsTitle, open } = this;\n\n    return (\n      <Host>\n        <div class=\"gcds-details\">\n          <button\n            aria-expanded={open.toString()}\n            aria-controls=\"details__panel\"\n            onBlur={() => this.gcdsBlur.emit()}\n            onFocus={() => this.gcdsFocus.emit()}\n            onClick={e => {\n              const event = emitEvent(e, this.gcdsClick);\n              if (event) {\n                this.toggle();\n              }\n            }}\n            class=\"details__summary\"\n            id=\"details__summary\"\n          >\n            {detailsTitle}\n          </button>\n          <details\n            open={open}\n            id=\"details__panel\"\n            class=\"details__panel\"\n            aria-labelledby=\"details__summary\"\n            onToggle={ev => this.handleToggle(ev)}\n            ref={element =>\n              (this.detailsElement = element as HTMLDetailsElement)\n            }\n          >\n            <summary>{detailsTitle}</summary>\n            <slot></slot>\n          </details>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}