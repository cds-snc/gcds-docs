{"version":3,"file":"gcds-details.js","sourceRoot":"","sources":["../../../src/components/gcds-details/gcds-details.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,OAAO,EACP,IAAI,EACJ,IAAI,EACJ,MAAM,EACN,KAAK,EAEL,CAAC,GACF,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAO9C,MAAM,OAAO,WAAW;IALxB;QAiBE;;WAEG;QACqC,SAAI,GAAa,KAAK,CAAC;KAkEhE;IA7CC;;OAEG;IAEH;;OAEG;IAEH,KAAK,CAAC,MAAM;QACV,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;IACzB,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QAEpC,OAAO,CACL,EAAC,IAAI;YACH,4DAAK,KAAK,EAAC,cAAc;gBACvB,gFACiB,IAAI,CAAC,QAAQ,EAAE,mBAChB,gBAAgB,EAC9B,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAClC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,EACpC,OAAO,EAAE,CAAC,CAAC,EAAE;wBACX,MAAM,KAAK,GAAG,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;wBAC3C,IAAI,KAAK,EAAE,CAAC;4BACV,IAAI,CAAC,MAAM,EAAE,CAAC;wBAChB,CAAC;oBACH,CAAC,EACD,KAAK,EAAC,kBAAkB,EACxB,EAAE,EAAC,kBAAkB,IAEpB,YAAY,CACN;gBACT,4DACE,EAAE,EAAC,gBAAgB,EACnB,KAAK,EAAC,gBAAgB,qBACN,kBAAkB;oBAElC,8DAAa,CACT,CACF,CACD,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import {\n  Component,\n  Element,\n  Host,\n  Prop,\n  Method,\n  Event,\n  EventEmitter,\n  h,\n} from '@stencil/core';\nimport { emitEvent } from '../../utils/utils';\n\n@Component({\n  tag: 'gcds-details',\n  styleUrl: 'gcds-details.css',\n  shadow: true,\n})\nexport class GcdsDetails {\n  @Element() el: HTMLElement;\n\n  /**\n   * Props\n   */\n\n  /**\n   * The details title summarizes the panel content.\n   */\n  @Prop() detailsTitle!: string;\n\n  /**\n   * Defines if the details panel is open by default or not.\n   */\n  @Prop({ mutable: true, reflect: true }) open?: boolean = false;\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when the details has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the details loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  /**\n   * Emitted when the details has been clicked.\n   */\n  @Event() gcdsClick!: EventEmitter<void>;\n\n  /**\n   * Methods\n   */\n\n  /*\n   * Toggle details open or closed\n   */\n  @Method()\n  async toggle() {\n    this.open = !this.open;\n  }\n\n  render() {\n    const { detailsTitle, open } = this;\n\n    return (\n      <Host>\n        <div class=\"gcds-details\">\n          <button\n            aria-expanded={open.toString()}\n            aria-controls=\"details__panel\"\n            onBlur={() => this.gcdsBlur.emit()}\n            onFocus={() => this.gcdsFocus.emit()}\n            onClick={e => {\n              const event = emitEvent(e, this.gcdsClick);\n              if (event) {\n                this.toggle();\n              }\n            }}\n            class=\"details__summary\"\n            id=\"details__summary\"\n          >\n            {detailsTitle}\n          </button>\n          <div\n            id=\"details__panel\"\n            class=\"details__panel\"\n            aria-labelledby=\"details__summary\"\n          >\n            <slot></slot>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}