{"version":3,"file":"gcds-radios.js","sourceRoot":"","sources":["../../../../src/components/gcds-radios/gcds-radios.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  State,\n  Prop,\n  Watch,\n  Listen,\n  Method,\n  Host,\n  h,\n  AttachInternals,\n} from '@stencil/core';\n\nimport { RadioObject, isRadioObject } from './radio';\nimport {\n  assignLanguage,\n  inheritAttributes,\n  logError,\n  handleErrors,\n  isValid,\n  handleValidationResult,\n} from '../../utils/utils';\nimport {\n  Validator,\n  defaultValidator,\n  ValidatorEntry,\n  getValidator,\n  requiredValidator,\n} from '../../validators';\nimport i18n from './i18n/i18n';\n\n/**\n * Radios provide a set of options for a single response.\n */\n@Component({\n  tag: 'gcds-radios',\n  styleUrl: 'gcds-radios.css',\n  shadow: { delegatesFocus: true },\n  formAssociated: true,\n})\nexport class GcdsRadios {\n  @Element() el: HTMLElement;\n\n  @AttachInternals()\n  internals: ElementInternals;\n\n  private shadowElement?: HTMLInputElement;\n\n  private initialValue?: string;\n\n  private optionsArr;\n\n  _validator: Validator<string> = defaultValidator;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Options to render radio buttons\n   */\n  @Prop({ mutable: true }) options!: string | Array<RadioObject>;\n\n  @Watch('options')\n  validateOptions() {\n    let invalidObject = false;\n    // Assign optionsArr from passed options string or array\n    if (typeof this.options === 'string' && this.options.trim() !== '') {\n      try {\n        this.options = JSON.parse(this.options as string);\n      } catch (e) {\n        logError('gcds-radios', ['Invalid JSON string for options']);\n        this.options = null;\n      }\n    }\n\n    if (Array.isArray(this.options)) {\n      this.optionsArr = this.options;\n    } else {\n      this.optionsArr = null;\n    }\n\n    // Validate options has type RadioObject\n    if (this.optionsArr && this.optionsArr.length > 1) {\n      invalidObject = this.optionsArr.some(radio => !isRadioObject(radio));\n    } else {\n      invalidObject = true;\n    }\n\n    // Assign value if passed options has a checked radio\n    if (this.optionsArr && !this.value) {\n      this.optionsArr.forEach(radio => {\n        if (radio.checked === 'true' || radio.checked === true) {\n          this.value = radio.value;\n          this.internals.setFormValue(radio.value, 'checked');\n        }\n      });\n    }\n\n    // Log error if no or invalid optionsObject\n    this.errors = handleErrors(\n      this.errors,\n      'options',\n      this.optionsArr,\n      invalidObject,\n    );\n  }\n\n  /**\n   * The `name` attribute for the radios, used to group radio elements together\n   */\n  @Prop({ reflect: true, mutable: false }) name!: string;\n\n  @Watch('name')\n  validateName() {\n    this.errors = handleErrors(this.errors, 'name', this.name);\n  }\n\n  /**\n   * Label or legend for the group of radio elements\n   */\n  @Prop({ reflect: true, mutable: false }) legend!: string;\n  @Watch('legend')\n  validateLegend() {\n    this.errors = handleErrors(this.errors, 'legend', this.legend);\n  }\n\n  /**\n   * Specifies if a form field is required or not.\n   */\n  @Prop({ reflect: true, mutable: false }) required: boolean;\n\n  /**\n   * Hint displayed below the label and above the radio elements\n   */\n  @Prop({ reflect: true, mutable: false }) hint: string;\n\n  /**\n   * Set this to display an error message for invalid radios\n   */\n  @Prop({ reflect: false, mutable: true }) errorMessage: string;\n  @Watch('errorMessage')\n  validateErrorMessage() {\n    if (this.disabled) {\n      this.errorMessage = '';\n    } else {\n      this.hasError = this.errorMessage ? true : false;\n    }\n  }\n\n  /**\n   * Specifies if an input element is disabled or not.\n   */\n  @Prop({ reflect: true, mutable: true }) disabled: boolean;\n\n  /**\n   * Default value for the element\n   */\n  @Prop({ reflect: true, mutable: true }) value: string;\n  @Watch('value')\n  validateValue() {\n    if (this.optionsArr && this.value !== null) {\n      let isValidValue = false;\n      this.optionsArr.map(radio => {\n        if (radio.value == this.value) {\n          isValidValue = true;\n        }\n      });\n\n      // unset value if no radio button with value available\n      if (!isValidValue) {\n        this.value = null;\n        this.internals.setFormValue(this.value);\n      }\n    }\n  }\n\n  /**\n   * Array of validators\n   */\n  @Prop({ mutable: true }) validator: Array<\n    string | ValidatorEntry | Validator<string>\n  >;\n\n  @Watch('validator')\n  validateValidator() {\n    this._validator = getValidator(this.validator);\n  }\n\n  /**\n   * Set event to call validator\n   */\n  @Prop({ mutable: true }) validateOn: 'blur' | 'submit' | 'other' = 'blur';\n\n  /**\n   * Specifies if the radio is invalid.\n   */\n  @State() hasError: boolean;\n\n  /**\n   * Set additional HTML attributes not available in component properties\n   */\n  @State() inheritedAttributes: Object = {};\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * State to track validation on properties\n   * Contains a list of properties that have an error associated with them\n   */\n  @State() errors: Array<string> = [];\n\n  /**\n   * Call any active validators\n   */\n  @Method()\n  async validate() {\n    handleValidationResult(\n      this.el as HTMLGcdsRadiosElement,\n      this._validator.validate(this.value),\n      this.legend,\n      this.gcdsError,\n      this.gcdsValid,\n      this.lang,\n    );\n  }\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when radios has been changed as a direct result of a user action (a radio option has been selected). Contains new value in event detail\n   */\n  @Event() gcdsInput!: EventEmitter<string>;\n\n  /**\n   * Emitted when a radios option is checked (but not when unchecked). Contains new value in event detail\n   */\n  @Event() gcdsChange!: EventEmitter<string>;\n\n  /**\n   * Emitted when radios has received focus\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the radios has lost focus\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  private onBlur = () => {\n    this.gcdsBlur.emit();\n  };\n\n  private onBlurValidate = () => {\n    if (this.validateOn == 'blur') {\n      this.validate();\n    }\n\n    this.gcdsBlur.emit();\n  };\n\n  /**\n   * Emitted when radios has passed validation\n   */\n  @Event() gcdsValid!: EventEmitter<void>;\n\n  /**\n   * Emitted when radios has a validation error\n   */\n  @Event() gcdsError!: EventEmitter<object>;\n\n  @Listen('submit', { target: 'document' })\n  submitListener(e) {\n    if (e.target == this.el.closest('form')) {\n      if (this.validateOn && this.validateOn != 'other') {\n        this.validate();\n      }\n\n      if (this.hasError && this.validateOn != 'other') {\n        e.preventDefault();\n      }\n    }\n  }\n\n  /*\n   * Form internal functions\n   */\n  formResetCallback() {\n    if (this.value != this.initialValue) {\n      this.internals.setFormValue(this.initialValue, 'checked');\n      this.value = this.initialValue;\n    }\n  }\n\n  formStateRestoreCallback(state) {\n    this.internals.setFormValue(state);\n    this.value = state;\n  }\n\n  /*\n   * Observe lang attribute change\n   */\n  @Watch('lang')\n  watchLang(newValue, oldValue) {\n    if (newValue !== oldValue) {\n      this.lang = newValue;\n    }\n  }\n\n  private handleInput = (e, customEvent) => {\n    const val = e.target && e.target.value;\n    this.value = val;\n    this.internals.setFormValue(val ? val : null, 'checked');\n\n    if (e.type === 'change') {\n      const changeEvt = new e.constructor(e.type, e);\n      this.el.dispatchEvent(changeEvt);\n    }\n\n    customEvent.emit(this.value);\n  };\n\n  /*\n   * Validate required properties\n   */\n  private validateRequiredProps() {\n    this.validateLegend();\n    this.validateName();\n\n    return isValid(this.errors, ['name', 'legend', 'options']);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.validateOptions();\n    this.validateRequiredProps();\n    this.validateErrorMessage();\n\n    // Assign required validator if needed\n    requiredValidator(this.el, 'radio');\n\n    this.validateValidator();\n\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n    this.initialValue = this.value ? this.value : null;\n\n    const valid = this.validateRequiredProps();\n\n    if (!valid) {\n      logError('gcds-radios', this.errors);\n    }\n  }\n\n  async componentDidUpdate() {\n    // Validate props again if changed after render\n    const valid = this.validateRequiredProps();\n\n    if (!valid) {\n      logError('gcds-radios', this.errors);\n    }\n  }\n\n  render() {\n    const {\n      lang,\n      name,\n      legend,\n      value,\n      required,\n      hint,\n      errorMessage,\n      disabled,\n      hasError,\n      inheritedAttributes,\n    } = this;\n\n    const fieldsetAttrs = {\n      'tabindex': '-1',\n      'aria-labelledby': 'radios-legend',\n    };\n\n    if (hint) {\n      const hintID = this.hint ? `radios-hint ` : '';\n      fieldsetAttrs['aria-labelledby'] =\n        `${fieldsetAttrs['aria-labelledby']} ${hintID}`.trim();\n    }\n\n    if (this.validateRequiredProps()) {\n      return (\n        <Host onBlur={() => this.onBlurValidate()}>\n          <fieldset class=\"gcds-radios__fieldset\" {...fieldsetAttrs}>\n            <legend id=\"radios-legend\" class=\"gcds-radios__legend\">\n              {legend}\n              {required ? (\n                <span class=\"legend__required\">{i18n[lang].required}</span>\n              ) : null}\n            </legend>\n\n            {hint ? (\n              <gcds-hint id=\"radios-hint\" hint-id=\"radios\">\n                {hint}\n              </gcds-hint>\n            ) : null}\n\n            {errorMessage ? (\n              <gcds-error-message id=\"radios-error\" messageId=\"radios\">\n                {errorMessage}\n              </gcds-error-message>\n            ) : null}\n\n            {this.optionsArr &&\n              this.optionsArr.map(radio => {\n                const attrsInput = {\n                  name,\n                  disabled: disabled,\n                  required: required,\n                  value: radio.value,\n                  checked: radio.value === value,\n                  ...inheritedAttributes,\n                };\n\n                if (radio.hint) {\n                  const hintID = radio.hint ? `hint-${radio.id} ` : '';\n                  attrsInput['aria-describedby'] = `${hintID}${attrsInput['aria-describedby']\n                    ? `${attrsInput['aria-describedby']}`\n                    : ''\n                    }`;\n                }\n\n                if (hasError) {\n                  attrsInput['aria-invalid'] = 'true';\n                  attrsInput['aria-description'] = errorMessage;\n                }\n\n                return (\n                  <div\n                    class={`gcds-radio ${disabled ? 'gcds-radio--disabled' : ''\n                      } ${hasError ? 'gcds-radio--error' : ''}`}\n                  >\n                    <input\n                      id={radio.id}\n                      type=\"radio\"\n                      {...attrsInput}\n                      onInput={e => this.handleInput(e, this.gcdsInput)}\n                      onChange={e => this.handleInput(e, this.gcdsChange)}\n                      onBlur={() => this.onBlur()}\n                      onFocus={() => this.gcdsFocus.emit()}\n                    />\n\n                    <gcds-label\n                      label={radio.label}\n                      label-for={radio.id}\n                      lang={lang}\n                      onClick={e => e.stopPropagation()}\n                    ></gcds-label>\n\n                    {radio.hint ? (\n                      <gcds-hint hint-id={radio.id}>{radio.hint}</gcds-hint>\n                    ) : null}\n                  </div>\n                );\n              })}\n          </fieldset>\n        </Host>\n      );\n    }\n  }\n}\n"]}