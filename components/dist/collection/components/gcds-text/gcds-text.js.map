{"version":3,"file":"gcds-text.js","sourceRoot":"","sources":["../../../../src/components/gcds-text/gcds-text.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Host, Watch, Prop, h } from '@stencil/core';\nimport { SpacingValues, SpacingArray } from '../../utils/types/spacing';\n\n/**\n * Text is a styled and formatted paragraph that displays written content in an accessible way and matches Canada.ca typography styles.\n *\n * @slot default - Slot for the content of the text element.\n */\n@Component({\n  tag: 'gcds-text',\n  styleUrl: 'gcds-text.css',\n  shadow: true,\n})\nexport class GcdsText {\n  @Element() el: HTMLElement;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Sets the main style of the text.\n   */\n  @Prop({ mutable: true }) textRole?: 'light' | 'primary' | 'secondary' =\n    'primary';\n\n  @Watch('textRole')\n  validateTextRole(newValue: string) {\n    const values = ['light', 'primary', 'secondary'];\n\n    if (!values.includes(newValue)) {\n      this.textRole = 'primary';\n    }\n  }\n\n  /**\n   * Sets the line length to a maximum amount of characters per line to ensure a comfortable, accessible reading length.\n   */\n  @Prop() characterLimit?: boolean = true;\n\n  /**\n   * Specifies the display behaviour of the text.\n   */\n  @Prop({ mutable: true }) display?:\n    | 'block'\n    | 'flex'\n    | 'inline'\n    | 'inline-block'\n    | 'inline-flex'\n    | 'none' = 'block';\n\n  @Watch('display')\n  validateDisplay(newValue: string) {\n    const values = [\n      'block',\n      'flex',\n      'inline',\n      'inline-block',\n      'inline-flex',\n      'none',\n    ];\n\n    if (!values.includes(newValue)) {\n      this.display = 'block';\n    }\n  }\n\n  /**\n   * Adds margin above the text.\n   */\n  @Prop({ mutable: true }) marginTop?: SpacingValues = '0';\n\n  @Watch('marginTop')\n  validateMarginTop(newValue: string) {\n    if (!SpacingArray.includes(newValue as SpacingValues)) {\n      this.marginTop = '0';\n    }\n  }\n\n  /**\n   * Adds margin below the text.\n   */\n  @Prop({ mutable: true }) marginBottom?: SpacingValues = '300';\n\n  @Watch('marginBottom')\n  validateMarginBottom(newValue: string) {\n    if (!SpacingArray.includes(newValue as SpacingValues)) {\n      this.marginBottom = '300';\n    }\n  }\n\n  /**\n   * Sets the appropriate HTML tags for the selected size.\n   */\n  @Prop({ mutable: true }) size?: 'body' | 'small' = 'body';\n\n  @Watch('size')\n  validateSize(newValue: string) {\n    const values = ['body', 'small'];\n\n    if (!values.includes(newValue)) {\n      this.size = 'body';\n    }\n  }\n\n  componentWillLoad() {\n    // Validate attributes and set defaults\n    this.validateTextRole(this.textRole);\n    this.validateDisplay(this.display);\n    this.validateMarginTop(this.marginTop);\n    this.validateMarginBottom(this.marginBottom);\n    this.validateSize(this.size);\n  }\n\n  render() {\n    const { characterLimit, display, marginTop, marginBottom, size, textRole } =\n      this;\n\n    return (\n      <Host class={`${display != 'block' ? `d-${display}` : ''}`}>\n        <p\n          class={`\n            gcds-text\n            ${textRole ? `role-${textRole}` : ''}\n            ${characterLimit ? 'limit' : ''}\n            ${marginTop ? `mt-${marginTop}` : ''}\n            ${marginBottom ? `mb-${marginBottom}` : ''}\n            ${size === 'small' ? `size-small` : ''}\n          `}\n          part=\"text\"\n        >\n          {size === 'small' ? (\n            <small>\n              <slot />\n            </small>\n          ) : (\n            <slot />\n          )}\n        </p>\n      </Host>\n    );\n  }\n}\n"]}