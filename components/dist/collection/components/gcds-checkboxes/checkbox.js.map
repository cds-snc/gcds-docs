{"version":3,"file":"checkbox.js","sourceRoot":"","sources":["../../../src/components/gcds-checkboxes/checkbox.tsx"],"names":[],"mappings":"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","sourcesContent":["import { h } from '@stencil/core';\n\nexport type CheckboxObject = {\n  id: string;\n  label: string;\n  value?: string;\n  hint?: string;\n  checked?: boolean | string;\n};\n\n/* Check if passed object matches required CheckboxObject type\n * @param obj - object to check\n */\nexport function isCheckboxObject(obj: CheckboxObject) {\n  if (typeof obj !== 'object' || obj === null) return false;\n\n  const validKeys = ['id', 'label', 'value', 'hint', 'checked', 'required'];\n  const objKeys = Object.keys(obj);\n\n  // Check if all properties match the expected type\n  const hasValidTypes =\n    typeof obj.id === 'string' &&\n    typeof obj.label === 'string' &&\n    (obj.value === undefined || typeof obj.value === 'string') &&\n    (obj.hint === undefined || typeof obj.hint === 'string') &&\n    (obj.checked === undefined || typeof obj.checked === 'boolean');\n\n  // Ensure no extra properties exist\n  const hasOnlyValidKeys = objKeys.every(key => validKeys.includes(key));\n\n  return hasValidTypes && hasOnlyValidKeys;\n}\n\n/* Loop through the optionsArr and check if each option/checkbox is formatted correctly\n * @param optionsArr - array of objects to be checked\n */\nexport function validateOptionsArray(optionsArr) {\n  let invalidOptionsArr = false;\n\n  if (optionsArr && optionsArr.length >= 1) {\n    invalidOptionsArr = optionsArr.some(\n      checkbox => !isCheckboxObject(checkbox),\n    );\n  } else if (optionsArr && optionsArr.length == 0) {\n    invalidOptionsArr = true;\n  }\n\n  return invalidOptionsArr;\n}\n\n/* Loop through manually assigned value to check if it is available in rendered checkboxes\n * @param optionsArr - array of checkbox objects to compare to\n * @param element - the checkboxes element\n */\nexport function cleanUpValues(optionsArr, element) {\n  const availableValues = [];\n  optionsArr.forEach(checkbox => {\n    availableValues.push(checkbox.value ? checkbox.value : 'on');\n\n    if (\n      (checkbox.checked == 'true' || checkbox.checked === true) &&\n      !(element.value as Array<string>).includes(checkbox.value || 'on')\n    ) {\n      element.value = [\n        ...(element.value as Array<string>),\n        checkbox.value ? checkbox.value : 'on',\n      ];\n    }\n  });\n\n  // Remove any values that are not available in the inputs\n  (element.value as Array<string>)\n    .filter(value => !availableValues.includes(value))\n    .forEach(value => {\n      element.value = (element.value as Array<string>).filter(\n        item => item !== value,\n      );\n    });\n}\n\nexport const renderCheckbox = (checkbox, element, emitEvent, handleInput) => {\n  const {\n    name,\n    disabled,\n    hasError,\n    errorMessage,\n    gcdsFocus,\n    gcdsInput,\n    gcdsChange,\n    gcdsClick,\n    gcdsBlur,\n    required,\n    hint,\n    isGroup,\n    lang,\n    value,\n    onBlurValidate,\n  } = element;\n\n  const attrsInput = {\n    name: name,\n    id: checkbox.id,\n    disabled: disabled,\n    required: checkbox.required,\n    value: checkbox.value,\n  };\n\n  const labelAttrs = {\n    'label': checkbox.label,\n    'label-for': checkbox.id,\n    lang,\n  };\n\n  if (!isGroup && required) {\n    labelAttrs['required'] = required;\n    attrsInput['required'] = required;\n  }\n\n  if (checkbox.hint) {\n    const hintID = `hint-${checkbox.id}`;\n    attrsInput['aria-describedby'] = `${hintID}${\n      attrsInput['aria-describedby'] ? `${attrsInput['aria-describedby']}` : ''\n    }`;\n  }\n\n  if (value.includes(checkbox.value)) {\n    attrsInput['checked'] = true;\n  }\n\n  if (hasError) {\n    attrsInput['aria-invalid'] = 'true';\n    attrsInput['aria-description'] = errorMessage;\n  }\n\n  return (\n    <div\n      class={`gcds-checkbox ${disabled ? 'gcds-checkbox--disabled' : ''} ${\n        hasError ? 'gcds-checkbox--error' : ''\n      }`}\n    >\n      <input\n        type=\"checkbox\"\n        {...attrsInput}\n        onBlur={isGroup ? () => gcdsBlur.emit() : onBlurValidate}\n        onFocus={() => gcdsFocus.emit()}\n        onChange={() => gcdsChange.emit()}\n        onInput={e => handleInput(e, gcdsInput)}\n        onClick={e =>\n          !disabled ? emitEvent(e, gcdsClick) : e.stopImmediatePropagation()\n        }\n      />\n\n      <gcds-label\n        {...labelAttrs}\n        onClick={e => e.stopPropagation()}\n      ></gcds-label>\n\n      {checkbox.hint || (!isGroup && hint) ? (\n        <gcds-hint hint-id={checkbox.id}>\n          {!isGroup && hint ? hint : checkbox.hint}\n        </gcds-hint>\n      ) : null}\n\n      {!isGroup && errorMessage ? (\n        <gcds-error-message messageId={checkbox.id}>\n          {errorMessage}\n        </gcds-error-message>\n      ) : null}\n    </div>\n  );\n};\n"]}