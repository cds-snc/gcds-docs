{"version":3,"file":"gcds-checkboxes.js","sourceRoot":"","sources":["../../../../src/components/gcds-checkboxes/gcds-checkboxes.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  Listen,\n  Method,\n  State,\n  Prop,\n  Watch,\n  Host,\n  h,\n  AttachInternals,\n} from '@stencil/core';\nimport {\n  assignLanguage,\n  emitEvent,\n  inheritAttributes,\n  logError,\n  handleErrors,\n  isValid,\n  handleValidationResult,\n} from '../../utils/utils';\nimport {\n  Validator,\n  defaultValidator,\n  ValidatorEntry,\n  getValidator,\n  requiredValidator,\n} from '../../validators';\nimport {\n  CheckboxObject,\n  cleanUpValues,\n  renderCheckbox,\n  validateOptionsArray,\n} from './checkbox';\n\n/**\n * Checkboxes provide a set of options for multiple responses.\n */\n@Component({\n  tag: 'gcds-checkboxes',\n  styleUrl: 'gcds-checkboxes.css',\n  shadow: { delegatesFocus: true },\n  formAssociated: true,\n})\nexport class GcdsCheckboxes {\n  @Element() el: HTMLGcdsCheckboxesElement;\n\n  @AttachInternals()\n  internals: ElementInternals;\n\n  private initialState?: string | string[];\n\n  private shadowElement?: HTMLElement;\n\n  private optionsArr;\n  private isGroup = false;\n\n  _validator: Validator<string | string[]> = defaultValidator;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Name attribute for a checkboxes element.\n   */\n  @Prop({ reflect: true, mutable: false }) name!: string;\n\n  @Watch('name')\n  validateName() {\n    this.errors = handleErrors(this.errors, 'name', this.name);\n  }\n\n  /**\n   * Set the legend for fieldset form group.\n   */\n  @Prop({ reflect: true, mutable: false }) legend: string;\n\n  @Watch('legend')\n  validateLegend() {\n    if (this.isGroup) {\n      this.errors = handleErrors(this.errors, 'legend', this.legend);\n    }\n  }\n\n  /**\n   * Options to render checkboxes buttons\n   */\n  @Prop({ mutable: true }) options!: string | Array<CheckboxObject>;\n\n  @Watch('options')\n  validateOptions() {\n    let invalidOptions = false;\n\n    // Assign optionsArr based on valid options property\n    invalidOptions = this.assignOptionsArray();\n\n    // Check if each checkbox object is formatted correctly\n    if (this.optionsArr && !invalidOptions) {\n      invalidOptions = validateOptionsArray(this.optionsArr);\n\n      // Assign if isGroup logic more than one checkbox object\n      if (this.optionsArr && this.optionsArr.length > 1) {\n        this.isGroup = true;\n      }\n    }\n\n    // Log error if invalidOptions\n    this.errors = handleErrors(\n      this.errors,\n      'options',\n      this.optionsArr,\n      invalidOptions,\n    );\n  }\n\n  /**\n   * Specifies if the checkboxes are required or not.\n   */\n  @Prop({ reflect: true, mutable: false }) required: boolean;\n\n  /**\n   * Specifies if the checkboxes are disabled or not.\n   */\n  @Prop({ reflect: true, mutable: true }) disabled: boolean;\n\n  @Watch('disabled')\n  validateDisabledCheckbox() {\n    if (this.required) {\n      this.disabled = false;\n    }\n  }\n\n  /**\n   * Value for checkboxes component.\n   */\n  @Prop({ reflect: true, mutable: true }) value: string | Array<string> = [];\n\n  @Watch('value')\n  validateValue(newValue) {\n    // Convert string to array\n    if (!Array.isArray(newValue)) {\n      try {\n        this.value = JSON.parse(newValue);\n      } catch (e) {\n        logError('gcds-checkboxes', ['Invalid array for value']);\n        this.value = [];\n      }\n    } else if (this.optionsArr) {\n      // Remove any manually set values that do not match available inputs\n      cleanUpValues(this.optionsArr, this.el);\n\n      // Set form value only when a value is assigned\n      if ((this.value as string[]).length > 0) {\n        this.internals.setFormValue(this.value.toString());\n      }\n    }\n  }\n\n  /**\n   * Set this to display an error message for invalid <gcds-checkboxes>\n   */\n  @Prop({ reflect: true, mutable: true }) errorMessage: string;\n\n  @Watch('errorMessage')\n  validateErrorMessage() {\n    if (this.disabled) {\n      this.errorMessage = '';\n    } else {\n      this.hasError = this.errorMessage ? !this.hasError : false;\n    }\n  }\n\n  /**\n   * Hint displayed below the label.\n   */\n  @Prop({ reflect: true, mutable: true }) hint: string;\n\n  /**\n   * Array of validators\n   */\n  @Prop({ mutable: true }) validator: Array<\n    string | ValidatorEntry | Validator<string>\n  >;\n\n  @Watch('validator')\n  validateValidator() {\n    this._validator = getValidator(this.validator);\n  }\n\n  /**\n   * Set event to call validator\n   */\n  @Prop({ mutable: true }) validateOn: 'blur' | 'submit' | 'other' = 'blur';\n\n  /**\n   * Set additional HTML attributes not available in component properties\n   */\n  @State() inheritedAttributes: Object = {};\n\n  /**\n   * Specifies if the checkbox is invalid.\n   */\n  @State() hasError: boolean;\n\n  @Watch('hasError')\n  validateHasError() {\n    if (this.disabled) {\n      this.hasError = false;\n    }\n  }\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * State to track validation on properties\n   * Contains a list of properties that have an error associated with them\n   */\n  @State() errors: Array<string> = [];\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when the checkbox has been clicked.\n   */\n  @Event() gcdsClick!: EventEmitter<void>;\n\n  /**\n   * Emitted when the checkbox has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the checkbox loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  private onBlurValidate = () => {\n    if (this.validateOn == 'blur') {\n      this.validate();\n    }\n\n    this.gcdsBlur.emit();\n  };\n\n  /**\n   * Emitted when a checkbox has been inputted. Contains the new value in the event detail.\n   */\n  @Event() gcdsInput: EventEmitter<string[]>;\n\n  /**\n   * Emitted when a checkbox has been changed. Contains the new value in the event detail.\n   */\n  @Event() gcdsChange: EventEmitter<string[]>;\n\n  /**\n   * Emitted when the checkbox has a validation error.\n   */\n  @Event() gcdsError!: EventEmitter<object>;\n\n  /**\n   * Emitted when the checkbox has a validation error.\n   */\n  @Event() gcdsValid!: EventEmitter<object>;\n\n  /**\n   * Call any active validators\n   */\n  @Method()\n  async validate() {\n    handleValidationResult(\n      this.el as HTMLGcdsCheckboxesElement,\n      this._validator.validate(this.value),\n      this.isGroup ? this.legend : this.optionsArr[0].label,\n      this.gcdsError,\n      this.gcdsValid,\n      this.lang,\n    );\n  }\n\n  /*\n   * FormData listener to append values like native checkboxes\n   */\n  @Listen('formdata', { target: 'document' })\n  formdataListener(e) {\n    const data = e.formData;\n\n    (this.value as string[]).forEach(value => {\n      // Set formdata for first entry to remove array\n      if ((this.value as string[]).indexOf(value) === 0) {\n        data.set(this.name, value);\n      } else {\n        data.append(this.name, value);\n      }\n    });\n  }\n\n  // Submit validation handler\n  @Listen('submit', { target: 'document' })\n  submitListener(e) {\n    if (e.target == this.el.closest('form')) {\n      if (this.validateOn && this.validateOn != 'other') {\n        this.validate();\n      }\n\n      if (this.hasError && this.validateOn != 'other') {\n        e.preventDefault();\n      }\n    }\n  }\n\n  /*\n   * Form internal functions\n   */\n  formResetCallback() {\n    if (this.value != this.initialState) {\n      this.value = this.initialState;\n    }\n  }\n\n  formStateRestoreCallback(state) {\n    this.internals.setFormValue(state);\n    this.value = [...state.split(',')];\n  }\n\n  /*\n   * Observe lang attribute change\n   */\n  @Watch('lang')\n  watchLang(newValue, oldValue) {\n    if (newValue !== oldValue) {\n      this.lang = newValue;\n    }\n  }\n\n  /*\n   * Validate required properties\n   */\n  private validateRequiredProps() {\n    this.validateOptions();\n    this.validateValue(this.value);\n    this.validateLegend();\n    this.validateName();\n\n    return isValid(this.errors, ['name', 'legend', 'options']);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    const valid = this.validateRequiredProps();\n\n    this.validateDisabledCheckbox();\n    this.validateHasError();\n    this.validateErrorMessage();\n\n    // Assign required validator if needed\n    requiredValidator(\n      this.el,\n      this.isGroup ? 'checkboxGroup' : 'checkboxSingle',\n    );\n\n    this.validateValidator();\n\n    // Assign checkbox hint to component hint if not group\n    if (\n      !this.isGroup &&\n      this.optionsArr &&\n      this.optionsArr[0]?.hint &&\n      !this.hint\n    ) {\n      this.hint = this.optionsArr[0].hint;\n    }\n\n    if (!valid) {\n      logError('gcds-checkboxes', this.errors);\n    }\n\n    this.initialState = this.value;\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n  }\n\n  async componentDidUpdate() {\n    // Validate props again if changed after render\n    const valid = this.validateRequiredProps();\n\n    if (!valid) {\n      logError('gcds-checkboxes', this.errors);\n    }\n  }\n\n  // Handle input and change events\n  private handleInput = (e, customEvent) => {\n    const isInputEvent = e.type === 'input';\n    if (isInputEvent) {\n      const target = e.target as HTMLInputElement;\n      if (target.checked) {\n        this.value = [...(this.value as Array<string>), target.value];\n      } else {\n        // Modify options to prevent re-adding prechecked values when user unchecks\n        this.options = (\n          typeof this.options === 'string'\n            ? JSON.parse(this.options as string)\n            : (this.options as CheckboxObject[])\n        ).map(check =>\n          check.value === target.value ? { ...check, checked: false } : check,\n        );\n\n        // Remove item from value array when unchecked\n        this.value = (this.value as Array<string>).filter(\n          item => item !== target.value,\n        );\n      }\n\n      // Keep form-associated value in sync\n      if ((this.value as string[]).length > 0) {\n        this.internals.setFormValue(this.value.toString());\n      } else {\n        this.internals.setFormValue(null);\n      }\n    }\n\n    customEvent.emit([...(this.value as string[])]);\n  };\n\n  /*\n   * Validate passed options and assign optionsArr if proper formatting\n   */\n  private assignOptionsArray() {\n    let invalidOptions = false;\n\n    if (Array.isArray(this.options)) {\n      this.optionsArr = this.options;\n    } else if (typeof this.options === 'string' && this.options.trim() !== '') {\n      try {\n        // Assign to random variable to not restart options validation\n        const optionsCheck = JSON.parse(this.options as string);\n\n        if (Array.isArray(optionsCheck)) {\n          this.optionsArr = optionsCheck;\n        } else {\n          this.optionsArr = null;\n          invalidOptions = true;\n        }\n      } catch (e) {\n        logError('gcds-checkboxes', ['Invalid JSON string for options']);\n        this.options = null;\n        invalidOptions = true;\n      }\n    }\n\n    return invalidOptions;\n  }\n\n  render() {\n    const { legend, required, hint, errorMessage } = this;\n\n    const fieldsetAttrs = {\n      'tabindex': '-1',\n      'aria-labelledby': 'checkboxes-legend',\n    };\n\n    if (hint) {\n      const hintID = this.hint ? `checkboxes-hint ` : '';\n      fieldsetAttrs['aria-labelledby'] =\n        `${fieldsetAttrs['aria-labelledby']} ${hintID}`.trim();\n    }\n\n    if (this.validateRequiredProps()) {\n      return (\n        <Host onBlur={() => this.isGroup && this.onBlurValidate()}>\n          {this.isGroup ? (\n            <fieldset class=\"gcds-checkboxes__fieldset\" {...fieldsetAttrs}>\n              <legend id=\"checkboxes-legend\" class=\"gcds-checkboxes__legend\">\n                {legend}\n                {required ? (\n                  <span class=\"legend__required\"> (required)</span>\n                ) : null}\n              </legend>\n              {hint ? (\n                <gcds-hint id=\"checkboxes-hint\" hint-id=\"checkboxes\">\n                  {hint}\n                </gcds-hint>\n              ) : null}\n\n              {errorMessage ? (\n                <div>\n                  <gcds-error-message\n                    id=\"checkboxes-error\"\n                    messageId=\"checkboxes\"\n                  >\n                    {errorMessage}\n                  </gcds-error-message>\n                </div>\n              ) : null}\n\n              {this.optionsArr &&\n                this.optionsArr.map(checkbox => {\n                  return renderCheckbox(\n                    checkbox,\n                    this,\n                    emitEvent,\n                    this.handleInput,\n                  );\n                })}\n            </fieldset>\n          ) : (\n            this.optionsArr &&\n            this.optionsArr.length > 0 &&\n            renderCheckbox(\n              this.optionsArr[0],\n              this,\n              emitEvent,\n              this.handleInput,\n            )\n          )}\n        </Host>\n      );\n    }\n  }\n}\n"]}