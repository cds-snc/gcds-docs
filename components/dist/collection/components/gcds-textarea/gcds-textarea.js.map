{"version":3,"file":"gcds-textarea.js","sourceRoot":"","sources":["../../../../src/components/gcds-textarea/gcds-textarea.tsx"],"names":[],"mappings":"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":["import {\n  Component,\n  Element,\n  Event,\n  Method,\n  Watch,\n  EventEmitter,\n  Host,\n  State,\n  Prop,\n  h,\n  Listen,\n  AttachInternals,\n} from '@stencil/core';\nimport {\n  assignLanguage,\n  handleValidationResult,\n  inheritAttributes,\n  observerConfig,\n  formatHTMLErrorMessage,\n} from '../../utils/utils';\nimport {\n  Validator,\n  defaultValidator,\n  ValidatorEntry,\n  getValidator,\n  requiredValidator,\n} from '../../validators';\nimport i18n from './i18n/i18n';\n\n/**\n * A text area is a space to enter long-form information in response to a question or instruction.\n */\n@Component({\n  tag: 'gcds-textarea',\n  styleUrl: 'gcds-textarea.css',\n  shadow: { delegatesFocus: true },\n  formAssociated: true,\n})\nexport class GcdsTextarea {\n  @Element() el: HTMLElement;\n\n  @AttachInternals()\n  internals: ElementInternals;\n\n  private initialValue?: string;\n\n  private shadowElement?: HTMLTextAreaElement;\n\n  // Array to store which native HTML errors are happening on the textarea\n  private htmlValidationErrors = [];\n\n  private textareaTitle: string = '';\n\n  _validator: Validator<string> = defaultValidator;\n\n  /**\n   * Props\n   */\n\n  /**\n   * If true, the input will be focused on component render\n   */\n  @Prop({ reflect: true }) autofocus: boolean;\n\n  /**\n   * Sets the maxlength attribute for the textarea element.\n   */\n  @Prop() characterCount?: number;\n\n  /**\n   * The minimum number of characters that the input field can accept.\n   */\n  @Prop({ reflect: true }) minlength?: number;\n\n  /**\n   * Defines width for textarea cols (the min-width for textarea's is 50%).\n   */\n  @Prop() cols?: number;\n\n  /**\n   * Specifies if a textarea element is disabled or not.\n   */\n  @Prop({ mutable: true }) disabled?: boolean = false;\n  @Watch('disabled')\n  validateDisabledTextarea() {\n    if (this.required) {\n      this.disabled = false;\n    }\n  }\n\n  /**\n   * Error message for an invalid textarea element.\n   */\n  @Prop({ mutable: true }) errorMessage?: string;\n  @Watch('errorMessage')\n  validateErrorMessage() {\n    if (this.disabled) {\n      this.errorMessage = '';\n    } else if (!this.hasError && this.errorMessage) {\n      this.hasError = true;\n    } else if (this.errorMessage == '') {\n      this.hasError = false;\n    }\n  }\n\n  /**\n   * Specifies if the label is hidden or not.\n   */\n  @Prop() hideLabel?: boolean = false;\n\n  /**\n   * Hint displayed below the label and above the textarea field.\n   */\n  @Prop() hint?: string;\n\n  /**\n   * Form field label\n   */\n  @Prop() label!: string;\n\n  /**\n   * Name attribute for a textarea element.\n   */\n  @Prop() name!: string;\n\n  /**\n   * Specifies if a form field is required or not.\n   */\n  @Prop() required?: boolean = false;\n\n  /**\n   * Default value for textarea rows.\n   */\n  @Prop() rows?: number = 5;\n\n  /**\n   * Id attribute for a textarea element.\n   */\n  @Prop() textareaId!: string;\n\n  /**\n   * Default value for an input element.\n   */\n  @Prop({ mutable: true }) value?: string;\n\n  /**\n   * Set value on internal textarea to allow proper resets\n   */\n  @Watch('value')\n  watchValue(val) {\n    // Update DOM textarea if it exists\n    if (this.shadowElement) {\n      this.shadowElement.value = val || '';\n    }\n\n    // Update form value for form association\n    this.internals.setFormValue(val || null);\n  }\n  /**\n   * Array of validators\n   */\n  @Prop({ mutable: true }) validator: Array<\n    string | ValidatorEntry | Validator<string>\n  >;\n\n  @Watch('validator')\n  validateValidator() {\n    this._validator = getValidator(this.validator);\n  }\n\n  /**\n   * Set event to call validator\n   */\n  @Prop({ mutable: true }) validateOn: 'blur' | 'submit' | 'other' = 'blur';\n\n  /**\n   * Read-only property of the textarea, returns a ValidityState object that represents the validity states this element is in.\n   */\n  @Prop()\n  get validity() {\n    return this.internals.validity;\n  }\n\n  /**\n   * Set additional HTML attributes not available in component properties\n   */\n  @State() inheritedAttributes: Object = {};\n\n  /**\n   * Specifies if the textarea is invalid.\n   */\n  @State() hasError: boolean;\n  @Watch('hasError')\n  validateHasError() {\n    if (this.disabled) {\n      this.hasError = false;\n    }\n  }\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when the textarea has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the textarea loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  private onBlur = () => {\n    if (this.validateOn == 'blur') {\n      this.validate();\n    }\n\n    this.gcdsBlur.emit();\n  };\n\n  /**\n   * Emitted when the textarea has changed.\n   */\n  @Event() gcdsChange: EventEmitter<string>;\n\n  /**\n   * Emitted when the textarea has received input.\n   */\n  @Event() gcdsInput: EventEmitter<string>;\n\n  private handleInput = (e, customEvent) => {\n    const val = e.target && e.target.value;\n    this.value = val;\n    this.internals.setFormValue(val ? val : null);\n    this.shadowElement.value = val;\n\n    if (e.type === 'change') {\n      const changeEvt = new e.constructor(e.type, e);\n      this.el.dispatchEvent(changeEvt);\n    } else {\n      this.updateValidity();\n    }\n\n    customEvent.emit(this.value);\n  };\n\n  /**\n   * Call any active validators\n   */\n  @Method()\n  async validate() {\n    handleValidationResult(\n      this.el as HTMLGcdsTextareaElement,\n      this._validator.validate(this.value),\n      this.label,\n      this.gcdsError,\n      this.gcdsValid,\n      this.lang,\n    );\n\n    // Native HTML validation\n    if (\n      (this.required && !this.internals.checkValidity()) ||\n      !this.internals.checkValidity()\n    ) {\n      if (!this.internals.validity.valueMissing) {\n        this.errorMessage = formatHTMLErrorMessage(\n          this.htmlValidationErrors[0],\n          this.lang,\n          this.el,\n        );\n        this.textareaTitle = this.errorMessage;\n      }\n    }\n  }\n\n  /**\n   * Check the validity of gcds-textarea\n   */\n  @Method()\n  public async checkValidity(): Promise<boolean> {\n    return this.internals.checkValidity();\n  }\n\n  /**\n   * Get validationMessage of gcds-textarea\n   */\n  @Method()\n  public async getValidationMessage(): Promise<string> {\n    return this.internals.validationMessage;\n  }\n\n  /**\n   * Emitted when the textarea has a validation error.\n   */\n  @Event() gcdsError!: EventEmitter<object>;\n\n  /**\n   * Emitted when the textarea has a validation error.\n   */\n  @Event() gcdsValid!: EventEmitter<object>;\n\n  @Listen('submit', { target: 'document' })\n  submitListener(e) {\n    if (e.target == this.el.closest('form')) {\n      if (this.validateOn && this.validateOn != 'other') {\n        this.validate();\n      }\n\n      if (this.hasError && this.validateOn != 'other') {\n        e.preventDefault();\n      }\n    }\n  }\n\n  /*\n   * Form internal functions\n   */\n  formResetCallback() {\n    if (this.value !== this.initialValue) {\n      // Update all relevant values to initialValue\n      this.value = this.initialValue;\n\n      // Update DOM element if available\n      if (this.shadowElement) {\n        this.shadowElement.value = this.initialValue || '';\n      }\n\n      // Update form value\n      this.internals.setFormValue(this.initialValue || null);\n    }\n  }\n\n  formStateRestoreCallback(state) {\n    this.internals.setFormValue(state);\n    this.value = state;\n  }\n\n  /**\n   * Update gcds-textarea's validity using internal textarea validity\n   */\n  private updateValidity(override?) {\n    const validity = this.shadowElement.validity;\n    this.htmlValidationErrors = [];\n\n    for (const key in validity) {\n      // Do not include valid or missingValue keys\n      if (validity[key] === true && key !== 'valid') {\n        this.htmlValidationErrors.push(key);\n      }\n    }\n\n    // Add override values to HTML errors array\n    for (const key in override) {\n      this.htmlValidationErrors.push(key);\n    }\n\n    const validityState = override\n      ? { ...this.shadowElement.validity, ...override }\n      : this.shadowElement.validity;\n\n    let validationMessage = null;\n    if (this.htmlValidationErrors.length > 0) {\n      validationMessage = formatHTMLErrorMessage(\n        this.htmlValidationErrors[0],\n        this.lang,\n        this.el,\n      );\n    }\n\n    this.internals.setValidity(\n      validityState,\n      validationMessage,\n      this.shadowElement,\n    );\n\n    // Set textarea title when HTML error occruring\n    this.textareaTitle = validationMessage;\n  }\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n\n    this.validateDisabledTextarea();\n    this.validateHasError();\n    this.validateErrorMessage();\n\n    // Assign required validator if needed\n    requiredValidator(this.el, 'textarea');\n\n    this.validateValidator();\n\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement, [\n      'placeholder',\n    ]);\n\n    this.internals.setFormValue(this.value ? this.value : null);\n    this.initialValue = this.value ? this.value : null;\n  }\n\n  componentDidLoad() {\n    let lengthValidity;\n    // maxlength/minlength validation on load\n    if (this.value && (this.minlength || this.characterCount)) {\n      if (this.minlength && this.value.length < this.minlength) {\n        lengthValidity = { tooShort: true };\n      } else if (\n        this.characterCount &&\n        this.value.length > this.characterCount\n      ) {\n        lengthValidity = { tooLong: true };\n      }\n    }\n\n    this.updateValidity(lengthValidity);\n\n    // Logic to enable autofocus\n    if (this.autofocus) {\n      requestAnimationFrame(() => {\n        this.shadowElement?.focus();\n      });\n    }\n  }\n\n  render() {\n    const {\n      autofocus,\n      characterCount,\n      cols,\n      disabled,\n      errorMessage,\n      hideLabel,\n      hint,\n      label,\n      minlength,\n      required,\n      rows,\n      textareaId,\n      value,\n      hasError,\n      inheritedAttributes,\n      lang,\n      name,\n      textareaTitle,\n    } = this;\n\n    // Use max-width instead of cols attribute to keep field responsive\n    const style = {\n      maxWidth: `${cols * 1.5}ch`,\n    };\n\n    const attrsLabel = {\n      label,\n      required,\n    };\n\n    const attrsTextarea = {\n      name,\n      autofocus,\n      disabled,\n      minlength,\n      required,\n      rows,\n      title: textareaTitle,\n      ...inheritedAttributes,\n    };\n\n    if (hint || errorMessage || characterCount) {\n      const hintID = hint ? `hint-${textareaId} ` : '';\n      const errorID = errorMessage ? `error-message-${textareaId} ` : '';\n      const countID = characterCount ? `textarea__count-${textareaId} ` : '';\n      attrsTextarea['aria-describedby'] = `${hintID}${errorID}${countID}${\n        attrsTextarea['aria-describedby']\n          ? `${attrsTextarea['aria-describedby']}`\n          : ''\n      }`;\n    }\n\n    return (\n      <Host>\n        <div\n          class={`gcds-textarea-wrapper ${disabled ? 'gcds-disabled' : ''} ${\n            hasError ? 'gcds-error' : ''\n          }`}\n        >\n          <gcds-label\n            {...attrsLabel}\n            hide-label={hideLabel}\n            label-for={textareaId}\n            lang={lang}\n          />\n\n          {hint ? <gcds-hint hint-id={textareaId}>{hint}</gcds-hint> : null}\n\n          {errorMessage ? (\n            <gcds-error-message messageId={textareaId}>\n              {errorMessage}\n            </gcds-error-message>\n          ) : null}\n\n          <textarea\n            {...attrsTextarea}\n            class={hasError ? 'gcds-error' : null}\n            id={textareaId}\n            onBlur={() => this.onBlur()}\n            onFocus={() => this.gcdsFocus.emit()}\n            onInput={e => this.handleInput(e, this.gcdsInput)}\n            onChange={e => this.handleInput(e, this.gcdsChange)}\n            aria-labelledby={`label-for-${textareaId}`}\n            aria-invalid={errorMessage ? 'true' : 'false'}\n            maxlength={characterCount ? characterCount : null}\n            style={cols ? style : null}\n            ref={element =>\n              (this.shadowElement = element as HTMLTextAreaElement)\n            }\n          >\n            {value}\n          </textarea>\n\n          {characterCount ? (\n            <gcds-text id={`textarea__count-${textareaId}`} aria-live=\"polite\">\n              {value == undefined\n                ? `${characterCount} ${i18n[lang].characters.allowed}`\n                : `${characterCount - value.length} ${\n                    i18n[lang].characters.left\n                  }`}\n            </gcds-text>\n          ) : null}\n        </div>\n      </Host>\n    );\n  }\n}\n"]}