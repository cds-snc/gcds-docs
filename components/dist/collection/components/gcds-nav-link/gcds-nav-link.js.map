{"version":3,"file":"gcds-nav-link.js","sourceRoot":"","sources":["../../../src/components/gcds-nav-link/gcds-nav-link.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,OAAO,EACP,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,MAAM,EACN,KAAK,EAEL,CAAC,GACF,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAO9E,MAAM,OAAO,WAAW;;;;;;;IAwCtB;;OAEG;IAEH,KAAK,CAAC,SAAS;QACb,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,UAAU;QACR,MAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,SAAS,CAAC,EAAE;YAChD,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;gBAC1C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC;YAC3B,CAAC;QACH,CAAC,CAAC,CAAC;QACH,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,iBAAiB;QACrB,wBAAwB;QACxB,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEpC,IAAI,CAAC,UAAU,EAAE,CAAC;QAElB,IAAI,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,CAAC;YACpC,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,IAAI,cAAc,EAAE,CAAC;gBAClD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC3B,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;YAC7B,CAAC;QACH,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QAE/B,MAAM,SAAS,GAAG,EAAE,CAAC;QAErB,IAAI,OAAO,EAAE,CAAC;YACZ,SAAS,CAAC,cAAc,CAAC,GAAG,MAAM,CAAC;QACrC,CAAC;QAED,OAAO,CACL,EAAC,IAAI,qDAAC,IAAI,EAAC,UAAU;YACnB,wEACE,KAAK,EAAE,gCAAgC,IAAI,CAAC,QAAQ,EAAE,EACtD,IAAI,EAAE,IAAI,IACN,SAAS,IACb,QAAQ,EAAE,CAAC,EACX,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAClC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,EACpC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAChD,GAAG,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,GAAG,OAAsB,CAAC;gBAE3D,8DAAa,CACX,CACC,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import {\n  Component,\n  Element,\n  Host,\n  Prop,\n  State,\n  Method,\n  Event,\n  EventEmitter,\n  h,\n} from '@stencil/core';\nimport { assignLanguage, observerConfig, emitEvent } from '../../utils/utils';\n\n@Component({\n  tag: 'gcds-nav-link',\n  styleUrl: 'gcds-nav-link.css',\n  shadow: true,\n})\nexport class GcdsNavLink {\n  @Element() el: HTMLElement;\n\n  private linkElement: HTMLElement;\n\n  /**\n   * Link href\n   */\n  @Prop({ reflect: true }) href!: string;\n\n  /**\n   * Current page flag\n   */\n  @Prop({ reflect: true }) current: boolean;\n\n  /**\n   * Emitted when the link has been clicked.\n   */\n  @Event() gcdsClick!: EventEmitter<void>;\n\n  /**\n   * Emitted when the link has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the link loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * Style of nav to render based on parent\n   */\n  @State() navStyle: string;\n\n  /**\n   * Focus the link element\n   */\n  @Method()\n  async focusLink() {\n    this.linkElement.focus();\n  }\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n\n    if (this.el.closest('gcds-top-nav')) {\n      if (this.el.parentNode.nodeName == 'GCDS-TOP-NAV') {\n        this.navStyle = 'topnav';\n      } else {\n        this.navStyle = 'dropdown';\n      }\n    } else {\n      this.navStyle = 'sidenav';\n    }\n  }\n\n  render() {\n    const { current, href } = this;\n\n    const linkAttrs = {};\n\n    if (current) {\n      linkAttrs['aria-current'] = 'page';\n    }\n\n    return (\n      <Host role=\"listitem\">\n        <a\n          class={`gcds-nav-link gcds-nav-link--${this.navStyle}`}\n          href={href}\n          {...linkAttrs}\n          tabIndex={0}\n          onBlur={() => this.gcdsBlur.emit()}\n          onFocus={() => this.gcdsFocus.emit()}\n          onClick={e => emitEvent(e, this.gcdsClick, href)}\n          ref={element => (this.linkElement = element as HTMLElement)}\n        >\n          <slot></slot>\n        </a>\n      </Host>\n    );\n  }\n}\n"]}