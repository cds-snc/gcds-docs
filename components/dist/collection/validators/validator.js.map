{"version":3,"file":"validator.js","sourceRoot":"","sources":["../../src/validators/validator.ts"],"names":[],"mappings":"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","sourcesContent":["export interface Validator<A> {\n  validate: (x: A) => any;\n  errorMessage?: object;\n}\n\nexport interface ValidatorEntry {\n  name: string;\n  options?: any;\n}\n\nexport interface GcdsErrorInterface {\n  id: string;\n  message: string;\n}\n\nexport const defaultValidator: Validator<any> = {\n  validate: (_x: any) => true,\n};\n\nexport function combineValidators<A>(\n  v1: Validator<A>,\n  v2: Validator<A>,\n): Validator<A> {\n  let combined: Validator<A>;\n\n  combined = {\n    validate: (x: A) => {\n      const res1: boolean = v1.validate(x);\n      const res2: boolean = v2.validate(x);\n\n      if (!res1) {\n        combined.errorMessage = v1.errorMessage;\n      } else if (!res2) {\n        combined.errorMessage = v2.errorMessage;\n      }\n\n      return res1 && res2;\n    },\n  };\n  return combined;\n}\n\nexport function requiredValidator(element, type, subtype?) {\n  if (element.required) {\n    switch (type) {\n      // Components all validate the \"value\" property\n      case 'input':\n        switch (subtype) {\n          case 'email':\n            if (element.validator) {\n              element.validator.unshift('requiredEmailField');\n            } else {\n              element.validator = ['requiredEmailField'];\n            }\n            break;\n          default:\n            if (element.validator) {\n              element.validator.unshift('requiredField');\n            } else {\n              element.validator = ['requiredField'];\n            }\n            break;\n        }\n        break;\n      case 'select':\n        if (element.validator) {\n          element.validator.unshift('requiredSelectField');\n        } else {\n          element.validator = ['requiredSelectField'];\n        }\n        break;\n      case 'textarea':\n        if (element.validator) {\n          element.validator.unshift('requiredField');\n        } else {\n          element.validator = ['requiredField'];\n        }\n        break;\n      case 'file':\n        if (element.validator) {\n          element.validator.unshift('requiredFileInput');\n        } else {\n          element.validator = ['requiredFileInput'];\n        }\n        break;\n\n      case 'date-input':\n        if (element.validator) {\n          element.validator.unshift('requiredDateInput');\n        } else {\n          element.validator = ['requiredDateInput'];\n        }\n        break;\n      case 'radio':\n        if (element.validator) {\n          element.validator.unshift('requiredRadio');\n        } else {\n          element.validator = ['requiredRadio'];\n        }\n        break;\n      case 'checkboxGroup':\n        if (element.validator) {\n          element.validator.unshift('requiredCheckboxGroup');\n        } else {\n          element.validator = ['requiredCheckboxGroup'];\n        }\n        break;\n      case 'checkboxSingle':\n        if (element.validator) {\n          element.validator.unshift('requiredCheckboxSingle');\n        } else {\n          element.validator = ['requiredCheckboxSingle'];\n        }\n        break;\n    }\n  }\n}\n\n/*\nExample of parameter validator\n\nexport function getLengthValidator(min: number, max: number): Validator<string> {\n    // Create errorMessage object\n    let errorMessage = {};\n    if (min && max) {\n        errorMessage[\"en\"] = `You must enter between ${min} and ${max} characters`;\n        errorMessage[\"fr\"] = `French You must enter between ${min} and ${max} characters`;\n    } else if (min) {\n        errorMessage[\"en\"] = `You must enter at least ${min} characters`;\n        errorMessage[\"fr\"] = `French You must enter at least ${min} characters`;\n    } else if (max) {\n        errorMessage[\"en\"] = `You must enter less than ${max} characters`;\n        errorMessage[\"fr\"] = `French You must enter less than ${max} characters`;\n    }\n    return {\n        validate: (value: string) => {\n            value = value || '';\n            if (min && max) {\n                return min <= value.length && value.length <= max;\n            }\n            if (min) {\n                return min <= value.length;\n            }\n            if (max) {\n                return value.length <= max;\n            }\n            return true;\n        },\n        errorMessage\n    };\n}\n*/\n"]}