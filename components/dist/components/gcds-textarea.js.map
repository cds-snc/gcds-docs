{"version":3,"names":["I18N","en","characters","allowed","left","fr","gcdsTextareaCss","GcdsTextarea","__stencil_proxyCustomElement","HTMLElement","constructor","this","htmlValidationErrors","textareaTitle","_validator","defaultValidator","disabled","hideLabel","required","rows","validateOn","inheritedAttributes","onBlur","validate","gcdsBlur","emit","handleInput","e","customEvent","val","target","value","internals","setFormValue","shadowElement","type","changeEvt","el","dispatchEvent","updateValidity","validateDisabledTextarea","validateErrorMessage","errorMessage","hasError","watchValue","validateValidator","getValidator","validator","validity","validateHasError","handleValidationResult","label","gcdsError","gcdsValid","lang","checkValidity","valueMissing","formatHTMLErrorMessage","getValidationMessage","validationMessage","submitListener","closest","preventDefault","formResetCallback","initialValue","formStateRestoreCallback","state","override","key","push","validityState","Object","assign","length","setValidity","updateLang","observer","MutationObserver","mutations","oldValue","observe","observerConfig","componentWillLoad","assignLanguage","requiredValidator","inheritAttributes","componentDidLoad","lengthValidity","minlength","characterCount","tooShort","tooLong","autofocus","requestAnimationFrame","_a","focus","render","cols","hint","textareaId","name","style","maxWidth","attrsLabel","attrsTextarea","title","hintID","errorID","countID","h","Host","class","messageId","id","onFocus","gcdsFocus","onInput","gcdsInput","onChange","gcdsChange","maxlength","ref","element","undefined","i18n"],"sources":["src/components/gcds-textarea/i18n/i18n.js","src/components/gcds-textarea/gcds-textarea.css?tag=gcds-textarea&encapsulation=shadow","src/components/gcds-textarea/gcds-textarea.tsx"],"sourcesContent":["const I18N = {\n  en: {\n    characters: {\n      allowed: 'characters allowed',\n      left: 'characters left',\n    },\n  },\n  fr: {\n    characters: {\n      allowed: 'caractères maximum',\n      left: 'caractères restants',\n    },\n  },\n};\n\nexport default I18N;\n","@layer reset, default, disabled, error, focus;\n\n@layer reset {\n  :host {\n    display: block;\n\n    .gcds-textarea-wrapper {\n      margin: 0;\n      padding: 0;\n      border: 0;\n\n      textarea {\n        box-sizing: border-box;\n      }\n    }\n  }\n}\n\n@layer default {\n  :host .gcds-textarea-wrapper {\n    width: 100%;\n    max-width: 75ch;\n    font: var(--gcds-textarea-font-desktop);\n    color: var(--gcds-textarea-default-text);\n    transition: color ease-in-out 0.15s;\n\n    @media only screen and (width < 48em) {\n      font: var(--gcds-textarea-font-mobile);\n    }\n\n    textarea {\n      display: block;\n      min-width: 50%;\n      width: 100%;\n      max-width: 100%;\n      height: auto;\n      min-height: var(--gcds-textarea-min-height);\n      font: inherit;\n      margin: var(--gcds-textarea-margin) !important;\n      padding: var(--gcds-textarea-padding) !important;\n      background-color: var(--gcds-textarea-default-background);\n      background-image: none;\n      color: var(--gcds-textarea-default-text);\n      border: var(--gcds-textarea-border-width) solid currentColor;\n      border-radius: var(--gcds-textarea-border-radius);\n      transition:\n        border-color ease-in-out 0.15s,\n        box-shadow ease-in-out 0.15s,\n        outline ease-in-out 0.15s;\n    }\n  }\n}\n\n@layer disabled {\n  :host .gcds-textarea-wrapper.gcds-disabled {\n    color: var(--gcds-textarea-disabled-text);\n\n    gcds-label {\n      --gcds-label-text: currentColor;\n    }\n\n    gcds-hint {\n      --gcds-hint-text: currentColor;\n    }\n\n    textarea:disabled {\n      cursor: not-allowed;\n      background-color: var(--gcds-textarea-disabled-background);\n      border-color: var(--gcds-textarea-disabled-text);\n    }\n  }\n}\n\n@layer error {\n  :host .gcds-textarea-wrapper {\n    .error-message-container {\n      display: block;\n    }\n\n    textarea.gcds-error:not(:focus) {\n      border-color: var(--gcds-textarea-danger-border);\n    }\n  }\n}\n\n@layer focus {\n  :host .gcds-textarea-wrapper:focus-within textarea:focus {\n    border-color: var(--gcds-textarea-focus-border);\n    outline: var(--gcds-textarea-outline-width) solid\n      var(--gcds-textarea-focus-border);\n    outline-offset: var(--gcds-textarea-border-width);\n    box-shadow: var(--gcds-textarea-focus-box-shadow);\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  Method,\n  Watch,\n  EventEmitter,\n  Host,\n  State,\n  Prop,\n  h,\n  Listen,\n  AttachInternals,\n} from '@stencil/core';\nimport {\n  assignLanguage,\n  handleValidationResult,\n  inheritAttributes,\n  observerConfig,\n  formatHTMLErrorMessage,\n} from '../../utils/utils';\nimport {\n  Validator,\n  defaultValidator,\n  ValidatorEntry,\n  getValidator,\n  requiredValidator,\n} from '../../validators';\nimport i18n from './i18n/i18n';\n\n/**\n * A text area is a space to enter long-form information in response to a question or instruction.\n */\n@Component({\n  tag: 'gcds-textarea',\n  styleUrl: 'gcds-textarea.css',\n  shadow: { delegatesFocus: true },\n  formAssociated: true,\n})\nexport class GcdsTextarea {\n  @Element() el: HTMLElement;\n\n  @AttachInternals()\n  internals: ElementInternals;\n\n  private initialValue?: string;\n\n  private shadowElement?: HTMLTextAreaElement;\n\n  // Array to store which native HTML errors are happening on the textarea\n  private htmlValidationErrors = [];\n\n  private textareaTitle: string = '';\n\n  _validator: Validator<string> = defaultValidator;\n\n  /**\n   * Props\n   */\n\n  /**\n   * If true, the input will be focused on component render\n   */\n  @Prop({ reflect: true }) autofocus: boolean;\n\n  /**\n   * Sets the maxlength attribute for the textarea element.\n   */\n  @Prop() characterCount?: number;\n\n  /**\n   * The minimum number of characters that the input field can accept.\n   */\n  @Prop({ reflect: true }) minlength?: number;\n\n  /**\n   * Defines width for textarea cols (the min-width for textarea's is 50%).\n   */\n  @Prop() cols?: number;\n\n  /**\n   * Specifies if a textarea element is disabled or not.\n   */\n  @Prop({ mutable: true }) disabled?: boolean = false;\n  @Watch('disabled')\n  validateDisabledTextarea() {\n    if (this.required) {\n      this.disabled = false;\n    }\n  }\n\n  /**\n   * Error message for an invalid textarea element.\n   */\n  @Prop({ mutable: true }) errorMessage?: string;\n  @Watch('errorMessage')\n  validateErrorMessage() {\n    if (this.disabled) {\n      this.errorMessage = '';\n    } else if (!this.hasError && this.errorMessage) {\n      this.hasError = true;\n    } else if (this.errorMessage == '') {\n      this.hasError = false;\n    }\n  }\n\n  /**\n   * Specifies if the label is hidden or not.\n   */\n  @Prop() hideLabel?: boolean = false;\n\n  /**\n   * Hint displayed below the label and above the textarea field.\n   */\n  @Prop() hint?: string;\n\n  /**\n   * Form field label\n   */\n  @Prop() label!: string;\n\n  /**\n   * Name attribute for a textarea element.\n   */\n  @Prop() name!: string;\n\n  /**\n   * Specifies if a form field is required or not.\n   */\n  @Prop() required?: boolean = false;\n\n  /**\n   * Default value for textarea rows.\n   */\n  @Prop() rows?: number = 5;\n\n  /**\n   * Id attribute for a textarea element.\n   */\n  @Prop() textareaId!: string;\n\n  /**\n   * Default value for an input element.\n   */\n  @Prop({ mutable: true }) value?: string;\n\n  /**\n   * Set value on internal textarea to allow proper resets\n   */\n  @Watch('value')\n  watchValue(val) {\n    // Update DOM textarea if it exists\n    if (this.shadowElement) {\n      this.shadowElement.value = val || '';\n    }\n\n    // Update form value for form association\n    this.internals.setFormValue(val || null);\n  }\n  /**\n   * Array of validators\n   */\n  @Prop({ mutable: true }) validator: Array<\n    string | ValidatorEntry | Validator<string>\n  >;\n\n  @Watch('validator')\n  validateValidator() {\n    this._validator = getValidator(this.validator);\n  }\n\n  /**\n   * Set event to call validator\n   */\n  @Prop({ mutable: true }) validateOn: 'blur' | 'submit' | 'other' = 'blur';\n\n  /**\n   * Read-only property of the textarea, returns a ValidityState object that represents the validity states this element is in.\n   */\n  @Prop()\n  get validity() {\n    return this.internals.validity;\n  }\n\n  /**\n   * Set additional HTML attributes not available in component properties\n   */\n  @State() inheritedAttributes: Object = {};\n\n  /**\n   * Specifies if the textarea is invalid.\n   */\n  @State() hasError: boolean;\n  @Watch('hasError')\n  validateHasError() {\n    if (this.disabled) {\n      this.hasError = false;\n    }\n  }\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when the textarea has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the textarea loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  private onBlur = () => {\n    if (this.validateOn == 'blur') {\n      this.validate();\n    }\n\n    this.gcdsBlur.emit();\n  };\n\n  /**\n   * Emitted when the textarea has changed.\n   */\n  @Event() gcdsChange: EventEmitter<string>;\n\n  /**\n   * Emitted when the textarea has received input.\n   */\n  @Event() gcdsInput: EventEmitter<string>;\n\n  private handleInput = (e, customEvent) => {\n    const val = e.target && e.target.value;\n    this.value = val;\n    this.internals.setFormValue(val ? val : null);\n    this.shadowElement.value = val;\n\n    if (e.type === 'change') {\n      const changeEvt = new e.constructor(e.type, e);\n      this.el.dispatchEvent(changeEvt);\n    } else {\n      this.updateValidity();\n    }\n\n    customEvent.emit(this.value);\n  };\n\n  /**\n   * Call any active validators\n   */\n  @Method()\n  async validate() {\n    handleValidationResult(\n      this.el as HTMLGcdsTextareaElement,\n      this._validator.validate(this.value),\n      this.label,\n      this.gcdsError,\n      this.gcdsValid,\n      this.lang,\n    );\n\n    // Native HTML validation\n    if (\n      (this.required && !this.internals.checkValidity()) ||\n      !this.internals.checkValidity()\n    ) {\n      if (!this.internals.validity.valueMissing) {\n        this.errorMessage = formatHTMLErrorMessage(\n          this.htmlValidationErrors[0],\n          this.lang,\n          this.el,\n        );\n        this.textareaTitle = this.errorMessage;\n      }\n    }\n  }\n\n  /**\n   * Check the validity of gcds-textarea\n   */\n  @Method()\n  public async checkValidity(): Promise<boolean> {\n    return this.internals.checkValidity();\n  }\n\n  /**\n   * Get validationMessage of gcds-textarea\n   */\n  @Method()\n  public async getValidationMessage(): Promise<string> {\n    return this.internals.validationMessage;\n  }\n\n  /**\n   * Emitted when the textarea has a validation error.\n   */\n  @Event() gcdsError!: EventEmitter<object>;\n\n  /**\n   * Emitted when the textarea has a validation error.\n   */\n  @Event() gcdsValid!: EventEmitter<object>;\n\n  @Listen('submit', { target: 'document' })\n  submitListener(e) {\n    if (e.target == this.el.closest('form')) {\n      if (this.validateOn && this.validateOn != 'other') {\n        this.validate();\n      }\n\n      if (this.hasError && this.validateOn != 'other') {\n        e.preventDefault();\n      }\n    }\n  }\n\n  /*\n   * Form internal functions\n   */\n  formResetCallback() {\n    if (this.value !== this.initialValue) {\n      // Update all relevant values to initialValue\n      this.value = this.initialValue;\n\n      // Update DOM element if available\n      if (this.shadowElement) {\n        this.shadowElement.value = this.initialValue || '';\n      }\n\n      // Update form value\n      this.internals.setFormValue(this.initialValue || null);\n    }\n  }\n\n  formStateRestoreCallback(state) {\n    this.internals.setFormValue(state);\n    this.value = state;\n  }\n\n  /**\n   * Update gcds-textarea's validity using internal textarea validity\n   */\n  private updateValidity(override?) {\n    const validity = this.shadowElement.validity;\n    this.htmlValidationErrors = [];\n\n    for (const key in validity) {\n      // Do not include valid or missingValue keys\n      if (validity[key] === true && key !== 'valid') {\n        this.htmlValidationErrors.push(key);\n      }\n    }\n\n    // Add override values to HTML errors array\n    for (const key in override) {\n      this.htmlValidationErrors.push(key);\n    }\n\n    const validityState = override\n      ? { ...this.shadowElement.validity, ...override }\n      : this.shadowElement.validity;\n\n    let validationMessage = null;\n    if (this.htmlValidationErrors.length > 0) {\n      validationMessage = formatHTMLErrorMessage(\n        this.htmlValidationErrors[0],\n        this.lang,\n        this.el,\n      );\n    }\n\n    this.internals.setValidity(\n      validityState,\n      validationMessage,\n      this.shadowElement,\n    );\n\n    // Set textarea title when HTML error occruring\n    this.textareaTitle = validationMessage;\n  }\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n\n    this.validateDisabledTextarea();\n    this.validateHasError();\n    this.validateErrorMessage();\n\n    // Assign required validator if needed\n    requiredValidator(this.el, 'textarea');\n\n    this.validateValidator();\n\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement, [\n      'placeholder',\n    ]);\n\n    this.internals.setFormValue(this.value ? this.value : null);\n    this.initialValue = this.value ? this.value : null;\n  }\n\n  componentDidLoad() {\n    let lengthValidity;\n    // maxlength/minlength validation on load\n    if (this.value && (this.minlength || this.characterCount)) {\n      if (this.minlength && this.value.length < this.minlength) {\n        lengthValidity = { tooShort: true };\n      } else if (\n        this.characterCount &&\n        this.value.length > this.characterCount\n      ) {\n        lengthValidity = { tooLong: true };\n      }\n    }\n\n    this.updateValidity(lengthValidity);\n\n    // Logic to enable autofocus\n    if (this.autofocus) {\n      requestAnimationFrame(() => {\n        this.shadowElement?.focus();\n      });\n    }\n  }\n\n  render() {\n    const {\n      autofocus,\n      characterCount,\n      cols,\n      disabled,\n      errorMessage,\n      hideLabel,\n      hint,\n      label,\n      minlength,\n      required,\n      rows,\n      textareaId,\n      value,\n      hasError,\n      inheritedAttributes,\n      lang,\n      name,\n      textareaTitle,\n    } = this;\n\n    // Use max-width instead of cols attribute to keep field responsive\n    const style = {\n      maxWidth: `${cols * 1.5}ch`,\n    };\n\n    const attrsLabel = {\n      label,\n      required,\n    };\n\n    const attrsTextarea = {\n      name,\n      autofocus,\n      disabled,\n      minlength,\n      required,\n      rows,\n      title: textareaTitle,\n      ...inheritedAttributes,\n    };\n\n    if (hint || errorMessage || characterCount) {\n      const hintID = hint ? `hint-${textareaId} ` : '';\n      const errorID = errorMessage ? `error-message-${textareaId} ` : '';\n      const countID = characterCount ? `textarea__count-${textareaId} ` : '';\n      attrsTextarea['aria-describedby'] = `${hintID}${errorID}${countID}${\n        attrsTextarea['aria-describedby']\n          ? `${attrsTextarea['aria-describedby']}`\n          : ''\n      }`;\n    }\n\n    return (\n      <Host>\n        <div\n          class={`gcds-textarea-wrapper ${disabled ? 'gcds-disabled' : ''} ${\n            hasError ? 'gcds-error' : ''\n          }`}\n        >\n          <gcds-label\n            {...attrsLabel}\n            hide-label={hideLabel}\n            label-for={textareaId}\n            lang={lang}\n          />\n\n          {hint ? <gcds-hint hint-id={textareaId}>{hint}</gcds-hint> : null}\n\n          {errorMessage ? (\n            <gcds-error-message messageId={textareaId}>\n              {errorMessage}\n            </gcds-error-message>\n          ) : null}\n\n          <textarea\n            {...attrsTextarea}\n            class={hasError ? 'gcds-error' : null}\n            id={textareaId}\n            onBlur={() => this.onBlur()}\n            onFocus={() => this.gcdsFocus.emit()}\n            onInput={e => this.handleInput(e, this.gcdsInput)}\n            onChange={e => this.handleInput(e, this.gcdsChange)}\n            aria-labelledby={`label-for-${textareaId}`}\n            aria-invalid={errorMessage ? 'true' : 'false'}\n            maxlength={characterCount ? characterCount : null}\n            style={cols ? style : null}\n            ref={element =>\n              (this.shadowElement = element as HTMLTextAreaElement)\n            }\n          >\n            {value}\n          </textarea>\n\n          {characterCount ? (\n            <gcds-text id={`textarea__count-${textareaId}`} aria-live=\"polite\">\n              {value == undefined\n                ? `${characterCount} ${i18n[lang].characters.allowed}`\n                : `${characterCount - value.length} ${\n                    i18n[lang].characters.left\n                  }`}\n            </gcds-text>\n          ) : null}\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}