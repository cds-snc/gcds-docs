{"version":3,"names":["gcdsInputCss","GcdsInput","__stencil_proxyCustomElement","HTMLElement","constructor","this","htmlValidationErrors","inputTitle","_validator","defaultValidator","disabled","hideLabel","required","type","validateOn","inheritedAttributes","onBlur","validate","gcdsBlur","emit","handleInput","e","customEvent","val","target","value","internals","setFormValue","changeEvt","el","dispatchEvent","updateValidity","validateDisabledInput","validateErrorMessage","errorMessage","hasError","watchValue","validity","validateValidator","getValidator","validator","validateHasError","ariaInvalidWatcher","inheritAttributes","shadowElement","ariaDescriptiondWatcher","handleValidationResult","label","gcdsError","gcdsValid","lang","checkValidity","valueMissing","formatHTMLErrorMessage","getValidationMessage","validationMessage","submitListener","closest","preventDefault","keyDownListener","key","formButton","document","createElement","style","display","appendChild","click","remove","formResetCallback","initialValue","formStateRestoreCallback","state","override","push","validityState","Object","assign","length","setValidity","updateLang","observer","MutationObserver","mutations","oldValue","observe","observerConfig","componentWillLoad","assignLanguage","requiredValidator","componentDidLoad","lengthValidity","minlength","maxlength","tooShort","tooLong","autofocus","requestAnimationFrame","_a","focus","render","hint","inputId","name","size","autocomplete","form","max","min","pattern","readonly","step","maxWidth","attrsInput","title","attrsLabel","hintID","errorID","h","Host","class","messageId","id","onFocus","gcdsFocus","onInput","gcdsInput","onChange","gcdsChange","part","ref","element"],"sources":["src/components/gcds-input/gcds-input.css?tag=gcds-input&encapsulation=shadow","src/components/gcds-input/gcds-input.tsx"],"sourcesContent":["@layer reset, default, disabled, error, focus;\n\n@layer reset {\n  :host {\n    display: block;\n\n    .gcds-input-wrapper {\n      margin: 0;\n      padding: 0;\n      border: 0;\n\n      input {\n        box-sizing: border-box;\n      }\n    }\n  }\n}\n\n@layer default {\n  :host .gcds-input-wrapper {\n    max-width: 75ch;\n    width: 100%;\n    font: var(--gcds-input-font);\n    color: var(--gcds-input-default-text);\n    transition: color ease-in-out 0.15s;\n\n    input {\n      display: block;\n      min-width: var(--gcds-input-min-width-and-height);\n      width: 100%;\n      max-width: 100%;\n      height: auto;\n      min-height: var(--gcds-input-min-width-and-height);\n      font: inherit !important;\n      margin: var(--gcds-input-margin) !important;\n      padding: var(--gcds-input-padding) !important;\n      background-color: var(--gcds-input-default-background);\n      background-image: none;\n      color: var(--gcds-input-default-text);\n      border: var(--gcds-input-border-width) solid currentColor;\n      border-radius: var(--gcds-input-border-radius);\n      transition:\n        border-color ease-in-out 0.15s,\n        box-shadow ease-in-out 0.15s,\n        outline ease-in-out 0.15s;\n\n      /* Hide number arrows */\n      &[type='number'] {\n        -moz-appearance: textfield;\n\n        &::-webkit-outer-spin-button,\n        &::-webkit-inner-spin-button {\n          -webkit-appearance: none;\n        }\n      }\n    }\n  }\n}\n\n@layer disabled {\n  :host .gcds-input-wrapper.gcds-disabled {\n    color: var(--gcds-input-disabled-text);\n\n    gcds-label {\n      --gcds-label-text: currentColor;\n    }\n\n    gcds-hint {\n      --gcds-hint-text: currentColor;\n    }\n\n    input:disabled {\n      cursor: not-allowed;\n      background-color: var(--gcds-input-disabled-background);\n      border-color: var(--gcds-input-disabled-text);\n    }\n  }\n}\n\n@layer error {\n  :host .gcds-input-wrapper input.gcds-error:not(:focus) {\n    border-color: var(--gcds-input-danger-border);\n  }\n}\n\n@layer focus {\n  :host .gcds-input-wrapper:focus-within input:focus {\n    border-color: var(--gcds-input-focus-border);\n    outline: var(--gcds-input-outline-width) solid\n      var(--gcds-input-focus-border);\n    outline-offset: var(--gcds-input-border-width);\n    box-shadow: var(--gcds-input-focus-box-shadow);\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  Watch,\n  EventEmitter,\n  State,\n  Method,\n  Host,\n  Prop,\n  h,\n  Listen,\n  AttachInternals,\n} from '@stencil/core';\nimport {\n  assignLanguage,\n  handleValidationResult,\n  inheritAttributes,\n  observerConfig,\n  formatHTMLErrorMessage,\n} from '../../utils/utils';\nimport {\n  Validator,\n  defaultValidator,\n  ValidatorEntry,\n  getValidator,\n  requiredValidator,\n  ValidatorOld,\n} from '../../validators';\n\n/**\n * An input is a space to enter short-form information in response to a question or instruction.\n */\n@Component({\n  tag: 'gcds-input',\n  styleUrl: 'gcds-input.css',\n  shadow: { delegatesFocus: true },\n  formAssociated: true,\n})\nexport class GcdsInput {\n  @Element() el: HTMLElement;\n\n  @AttachInternals()\n  internals: ElementInternals;\n\n  private initialValue?: string;\n\n  private shadowElement?: HTMLInputElement;\n\n  // Array to store which native HTML errors are happening on the input\n  private htmlValidationErrors = [];\n\n  private inputTitle: string = '';\n\n  _validator: Validator<string> | ValidatorOld<string> = defaultValidator;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Specifies if an input element is disabled or not.\n   */\n  @Prop({ mutable: true }) disabled?: boolean = false;\n  @Watch('disabled')\n  validateDisabledInput() {\n    if (this.required) {\n      this.disabled = false;\n    }\n  }\n\n  /**\n   * Error message for an invalid input element.\n   */\n  @Prop({ mutable: true }) errorMessage?: string;\n  @Watch('errorMessage')\n  validateErrorMessage() {\n    if (this.disabled) {\n      this.errorMessage = '';\n    } else if (!this.hasError && this.errorMessage) {\n      this.hasError = true;\n    } else if (this.errorMessage == '') {\n      this.hasError = false;\n    }\n  }\n\n  /**\n   * Specifies if the label is hidden or not.\n   */\n  @Prop() hideLabel?: boolean = false;\n\n  /**\n   * Hint displayed below the label and above the input field.\n   */\n  @Prop() hint?: string;\n\n  /**\n   * Id  attribute for an input element.\n   */\n  @Prop() inputId!: string;\n\n  /**\n   * Name attribute for an input element.\n   */\n  @Prop() name!: string;\n\n  /**\n   * Form field label\n   */\n  @Prop() label!: string;\n\n  /**\n   * Specifies if a form field is required or not.\n   */\n  @Prop() required?: boolean = false;\n\n  /**\n   * Size attribute for an input element to provide a visual indication\n   * of the expected text length to the user.\n   */\n  @Prop() size?: number;\n\n  /**\n   * Set Input types\n   */\n  // prettier-ignore\n  @Prop() type?: 'email' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'url' = 'text';\n\n  /**\n   * Default value for an input element.\n   */\n  @Prop({ mutable: true }) value?: string;\n\n  @Watch('value')\n  watchValue(val) {\n    this.internals.setFormValue(val ? val : null);\n  }\n\n  /**\n   * String to have autocomplete enabled.\n   */\n  @Prop() autocomplete?: string;\n\n  /**\n   * If true, the input will be focused on component render\n   */\n  @Prop({ reflect: true }) autofocus: boolean;\n\n  /**\n   * The ID of the form that the input field belongs to.\n   */\n  @Prop({ reflect: true }) form?: string;\n\n  /**\n   * The maximum value that the input field can accept.\n   * Only applies to number input type.\n   */\n  @Prop({ reflect: true }) max?: number | string;\n\n  /**\n   * The maximum number of characters that the input field can accept.\n   */\n  @Prop({ reflect: true }) maxlength?: number;\n\n  /**\n   * The minimum value that the input field can accept.\n   * Only applies to number input type.\n   */\n  @Prop({ reflect: true }) min?: number | string;\n\n  /**\n   * The minimum number of characters that the input field can accept.\n   */\n  @Prop({ reflect: true }) minlength?: number;\n\n  /**\n   * Specifies a regular expression the form control's value should match.\n   * See: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern\n   */\n  @Prop({ reflect: true }) pattern?: string;\n\n  /**\n   * If true, the input field cannot be modified.\n   */\n  @Prop({ reflect: true }) readonly?: boolean;\n\n  /**\n   * A number that specifies the granularity that the value must adhere to.\n   * Valid for number type.\n   * See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step\n   */\n  @Prop({ reflect: true }) step?: number | 'any';\n\n  /**\n   * Read-only property of the input, returns a ValidityState object that represents the validity states this element is in.\n   */\n  @Prop()\n  get validity() {\n    return this.internals.validity;\n  }\n\n  /**\n   * Array of validators\n   */\n  @Prop({ mutable: true }) validator: Array<\n    string | ValidatorEntry | Validator<string>\n  >;\n\n  @Watch('validator')\n  validateValidator() {\n    this._validator = getValidator(this.validator);\n  }\n\n  /**\n   * Set event to call validator\n   */\n  @Prop({ mutable: true }) validateOn: 'blur' | 'submit' | 'other' = 'blur';\n\n  /**\n   * Set additional HTML attributes not available in component properties\n   */\n  @State() inheritedAttributes: Object = {};\n\n  /**\n   * Specifies if the input is invalid.\n   */\n  @State() hasError: boolean;\n  @Watch('hasError')\n  validateHasError() {\n    if (this.disabled) {\n      this.hasError = false;\n    }\n  }\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * Watch HTML attributes to inherit changes\n   */\n  @Watch('aria-invalid')\n  ariaInvalidWatcher() {\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n  }\n  @Watch('aria-description')\n  ariaDescriptiondWatcher() {\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n  }\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when the input has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the input loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  private onBlur = () => {\n    if (this.validateOn == 'blur') {\n      this.validate();\n    }\n\n    this.gcdsBlur.emit();\n  };\n\n  /**\n   * Emitted when the element has received input.\n   */\n  @Event() gcdsInput: EventEmitter<string>;\n\n  /**\n   * Handling input and change events on input\n   */\n  private handleInput = (e, customEvent) => {\n    const val = e.target && e.target.value;\n    this.value = val;\n    this.internals.setFormValue(val ? val : null);\n\n    if (e.type === 'change') {\n      const changeEvt = new e.constructor(e.type, e);\n      this.el.dispatchEvent(changeEvt);\n    } else {\n      this.updateValidity();\n    }\n\n    customEvent.emit(this.value);\n  };\n\n  /**\n   * Emitted when the input has changed.\n   */\n  @Event() gcdsChange: EventEmitter<string>;\n\n  /**\n   * Call any active validators\n   */\n  @Method()\n  async validate() {\n    handleValidationResult(\n      this.el as HTMLGcdsInputElement,\n      this._validator.validate(this.value),\n      this.label,\n      this.gcdsError,\n      this.gcdsValid,\n      this.lang,\n    );\n\n    // Native HTML validation\n    if (\n      (this.required && !this.internals.checkValidity()) ||\n      !this.internals.checkValidity()\n    ) {\n      if (!this.internals.validity.valueMissing) {\n        this.errorMessage = formatHTMLErrorMessage(\n          this.htmlValidationErrors[0],\n          this.lang,\n          this.el,\n        );\n        this.inputTitle = this.errorMessage;\n      }\n    }\n  }\n\n  /**\n   * Check the validity of gcds-input\n   */\n  @Method()\n  public async checkValidity(): Promise<boolean> {\n    return this.internals.checkValidity();\n  }\n\n  /**\n   * Get validationMessage of gcds-input\n   */\n  @Method()\n  public async getValidationMessage(): Promise<string> {\n    return this.internals.validationMessage;\n  }\n\n  /**\n   * Emitted when the input has a validation error.\n   */\n  @Event() gcdsError!: EventEmitter<object>;\n\n  /**\n   * Emitted when the input has a validation error.\n   */\n  @Event() gcdsValid!: EventEmitter<object>;\n\n  @Listen('submit', { target: 'document' })\n  submitListener(e) {\n    if (e.target == this.el.closest('form')) {\n      if (this.validateOn && this.validateOn != 'other') {\n        this.validate();\n      }\n\n      if (this.hasError && this.validateOn != 'other') {\n        e.preventDefault();\n      }\n    }\n  }\n\n  @Listen('keydown', { target: 'document' })\n  keyDownListener(e) {\n    if (e.target == this.el && e.key === 'Enter') {\n      const formButton = document.createElement('button');\n      formButton.type = 'submit';\n      formButton.style.display = 'none';\n      this.el.closest('form').appendChild(formButton);\n      formButton.click();\n      formButton.remove();\n    }\n  }\n\n  /*\n   * Form internal functions\n   */\n  formResetCallback() {\n    if (this.value != this.initialValue) {\n      this.internals.setFormValue(this.initialValue);\n      this.value = this.initialValue;\n    }\n  }\n\n  formStateRestoreCallback(state) {\n    this.internals.setFormValue(state);\n    this.value = state;\n  }\n\n  /**\n   * Update gcds-input's validity using internal input\n   */\n  private updateValidity(override?) {\n    const validity = this.shadowElement.validity;\n    this.htmlValidationErrors = [];\n\n    for (const key in validity) {\n      // Do not include valid or missingValue keys\n      if (validity[key] === true && key !== 'valid') {\n        this.htmlValidationErrors.push(key);\n      }\n    }\n\n    // Add override values to HTML errors array\n    for (const key in override) {\n      this.htmlValidationErrors.push(key);\n    }\n\n    const validityState = override\n      ? { ...this.shadowElement.validity, ...override }\n      : this.shadowElement.validity;\n\n    let validationMessage = null;\n    if (this.htmlValidationErrors.length > 0) {\n      validationMessage = formatHTMLErrorMessage(\n        this.htmlValidationErrors[0],\n        this.lang,\n        this.el,\n      );\n    }\n\n    this.internals.setValidity(\n      validityState,\n      validationMessage,\n      this.shadowElement,\n    );\n\n    // Set input title when HTML error occruring\n    this.inputTitle = validationMessage;\n  }\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n\n    this.validateDisabledInput();\n    this.validateHasError();\n    this.validateErrorMessage();\n\n    // Assign required validator if needed\n    requiredValidator(this.el, 'input', this.type);\n\n    this.validateValidator();\n\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n\n    this.internals.setFormValue(this.value ? this.value : null);\n    this.initialValue = this.value ? this.value : null;\n  }\n\n  componentDidLoad() {\n    let lengthValidity;\n    // maxlength/minlength validation on load\n    if (this.value && (this.minlength || this.maxlength)) {\n      if (this.minlength && this.value.length < this.minlength) {\n        lengthValidity = { tooShort: true };\n      } else if (this.maxlength && this.value.length > this.maxlength) {\n        lengthValidity = { tooLong: true };\n      }\n    }\n\n    this.updateValidity(lengthValidity);\n\n    // Logic to enable autofocus\n    if (this.autofocus) {\n      requestAnimationFrame(() => {\n        this.shadowElement?.focus();\n      });\n    }\n  }\n\n  render() {\n    const {\n      disabled,\n      errorMessage,\n      hideLabel,\n      hint,\n      inputId,\n      name,\n      label,\n      required,\n      size,\n      type,\n      value,\n      hasError,\n      autocomplete,\n      autofocus,\n      form,\n      max,\n      maxlength,\n      min,\n      minlength,\n      pattern,\n      readonly,\n      step,\n      inputTitle,\n      inheritedAttributes,\n      lang,\n    } = this;\n\n    // Use max-width to keep field responsive\n    const style = {\n      maxWidth: `calc(${size * 2}ch + 1.5rem)`,\n    };\n\n    const attrsInput = {\n      disabled,\n      required,\n      type,\n      autocomplete,\n      autofocus,\n      form,\n      max,\n      maxlength,\n      min,\n      minlength,\n      pattern,\n      readonly,\n      step,\n      value,\n      title: inputTitle,\n      ...inheritedAttributes,\n    };\n\n    const attrsLabel = {\n      label,\n      required,\n    };\n\n    if (hint || errorMessage) {\n      const hintID = hint ? `hint-${inputId} ` : '';\n      const errorID = errorMessage ? `error-message-${inputId} ` : '';\n      attrsInput['aria-describedby'] = `${hintID}${errorID}${\n        attrsInput['aria-describedby']\n          ? ` ${attrsInput['aria-describedby']}`\n          : ''\n      }`;\n    }\n\n    return (\n      <Host>\n        <div\n          class={`gcds-input-wrapper ${disabled ? 'gcds-disabled' : ''} ${\n            hasError ? 'gcds-error' : ''\n          }`}\n        >\n          <gcds-label\n            {...attrsLabel}\n            hide-label={hideLabel}\n            label-for={inputId}\n            lang={lang}\n          />\n\n          {hint ? <gcds-hint hint-id={inputId}>{hint}</gcds-hint> : null}\n\n          {errorMessage ? (\n            <gcds-error-message messageId={inputId}>\n              {errorMessage}\n            </gcds-error-message>\n          ) : null}\n\n          <input\n            {...attrsInput}\n            class={hasError ? 'gcds-error' : null}\n            id={inputId}\n            name={name}\n            onBlur={() => this.onBlur()}\n            onFocus={() => this.gcdsFocus.emit()}\n            onInput={e => this.handleInput(e, this.gcdsInput)}\n            onChange={e => this.handleInput(e, this.gcdsChange)}\n            aria-labelledby={`label-for-${inputId}`}\n            aria-invalid={\n              inheritedAttributes['aria-invalid'] === 'true'\n                ? inheritedAttributes['aria-invalid']\n                : errorMessage\n                  ? 'true'\n                  : 'false'\n            }\n            size={size}\n            style={size ? style : null}\n            part=\"input\"\n            ref={element => (this.shadowElement = element)}\n          />\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}