{"version":3,"names":["I18N","en","link","gc","fr","gcdsSignatureCss","GcdsSignature","__stencil_proxyCustomElement","HTMLElement","constructor","this","type","variant","hasLink","validateType","newValue","validateVariant","updateLang","observer","MutationObserver","mutations","oldValue","el","lang","observe","observerConfig","componentWillLoad","assignLanguage","selectSVG","WordmarkEn","WordmarkFr","SignatureEn","SignatureFr","render","sigAttrs","class","Tag","i18n","h","Host","key","Object","assign","innerHTML"],"sources":["src/components/gcds-signature/i18n/i18n.js","src/components/gcds-signature/gcds-signature.css?tag=gcds-signature&encapsulation=shadow","src/components/gcds-signature/gcds-signature.tsx"],"sourcesContent":["const I18N = {\n  en: {\n    link: 'https://canada.ca/en.html',\n    gc: 'Government of Canada',\n  },\n  fr: {\n    link: 'https://canada.ca/fr.html',\n    gc: 'Gouvernement du Canada',\n  },\n};\n\nexport default I18N;\n","@layer reset, default, type.signature, type.wordmark, variant.colour, variant.white, desktop;\n\n@layer reset {\n  :host {\n    display: block;\n    width: fit-content;\n  }\n}\n\n@layer default {\n  :host {\n    .gcds-signature {\n      display: flex;\n    }\n\n    svg {\n      display: block;\n      max-width: 100%;\n\n      .fip_flag {\n        fill: var(--gcds-signature-color-flag);\n      }\n    }\n  }\n}\n\n@layer type.signature {\n  :host(:not([type='wordmark'])) svg {\n    height: var(--gcds-signature-signature-height);\n  }\n}\n\n@layer type.wordmark {\n  :host([type='wordmark']) svg {\n    height: var(--gcds-signature-wordmark-height);\n    width: auto;\n  }\n}\n\n@layer variant.colour {\n  :host(:not([variant='white'])) svg {\n    .fip_text {\n      fill: var(--gcds-signature-color-text);\n    }\n  }\n}\n\n@layer variant.white {\n  :host([variant='white']) svg {\n    :is(.fip_text) {\n      fill: var(--gcds-signature-white-default);\n    }\n  }\n}\n\n/* Note: viewport specific style decision */\n@layer desktop {\n  :host(:not([type='wordmark'])) svg {\n    @media screen and (width >= 64em) {\n      height: var(--gcds-signature-signature-height-desktop);\n    }\n  }\n}\n","import { Component, Host, Element, Watch, State, Prop, h } from '@stencil/core';\nimport { assignLanguage, observerConfig } from '../../utils/utils';\nimport i18n from './i18n/i18n';\n\nimport SignatureEn from './assets/sig-blk-en.svg';\nimport SignatureFr from './assets/sig-blk-fr.svg';\nimport WordmarkEn from './assets/wmms-spl-en.svg';\nimport WordmarkFr from './assets/wmms-spl-fr.svg';\n\n/**\n * The signature is the Government of Canada landmark identifier found in the header or footer.\n */\n@Component({\n  tag: 'gcds-signature',\n  styleUrl: 'gcds-signature.css',\n  shadow: true,\n})\nexport class GcdsSignature {\n  @Element() el: HTMLElement;\n\n  /**\n   * Props\n   */\n\n  /**\n   * The type of graphic to render\n   */\n  @Prop({ reflect: true, mutable: true }) type: 'signature' | 'wordmark' =\n    'signature';\n\n  @Watch('type')\n  validateType(newValue: string) {\n    if (newValue != 'signature' && newValue != 'wordmark') {\n      this.type = 'signature';\n    }\n  }\n\n  /**\n   * The colour variant to render\n   */\n  @Prop({ reflect: true, mutable: true }) variant: 'colour' | 'white' =\n    'colour';\n\n  @Watch('variant')\n  validateVariant(newValue: string) {\n    if (newValue != 'colour' && newValue != 'white') {\n      this.variant = 'colour';\n    }\n  }\n\n  /**\n   * Has link to canada.ca. Only applies to signature\n   */\n  @Prop({ mutable: true }) hasLink: boolean = false;\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.validateType;\n    this.validateVariant;\n\n    this.updateLang();\n  }\n\n  private get selectSVG() {\n    switch (this.type) {\n      case 'wordmark':\n        if (this.lang == 'en') {\n          return WordmarkEn;\n        } else {\n          return WordmarkFr;\n        }\n      case 'signature':\n      default:\n        if (this.lang == 'en') {\n          return SignatureEn;\n        } else {\n          return SignatureFr;\n        }\n    }\n  }\n\n  render() {\n    const { type, hasLink, lang, selectSVG } = this;\n\n    const sigAttrs = {\n      class: 'gcds-signature',\n    };\n    const Tag = hasLink ? 'a' : 'div';\n\n    if (Tag === 'a') {\n      sigAttrs['href'] = i18n[lang].link;\n    }\n\n    return (\n      <Host>\n        {type === 'signature' ? (\n          <Tag {...sigAttrs}>\n            <div innerHTML={selectSVG}></div>\n          </Tag>\n        ) : (\n          <div class=\"gcds-signature\" innerHTML={selectSVG}></div>\n        )}\n      </Host>\n    );\n  }\n}\n"],"mappings":"oGAAA,MAAMA,EAAO,CACXC,GAAI,CACFC,KAAM,4BACNC,GAAI,wBAENC,GAAI,CACFF,KAAM,4BACNC,GAAI,2B,694BCPR,MAAME,EAAmB,k1B,MCiBZC,EAAaC,EAAA,MAAAD,UAAAE,EAL1B,WAAAC,G,oDAe0CC,KAAIC,KAC1C,YAYsCD,KAAOE,QAC7C,SAYuBF,KAAOG,QAAY,KAuE7C,CA7FC,YAAAC,CAAaC,GACX,GAAIA,GAAY,aAAeA,GAAY,WAAY,CACrDL,KAAKC,KAAO,W,EAWhB,eAAAK,CAAgBD,GACd,GAAIA,GAAY,UAAYA,GAAY,QAAS,CAC/CL,KAAKE,QAAU,Q,EAiBnB,UAAAK,GACE,MAAMC,EAAW,IAAIC,kBAAiBC,IACpC,GAAIA,EAAU,GAAGC,UAAYX,KAAKY,GAAGC,KAAM,CACzCb,KAAKa,KAAOb,KAAKY,GAAGC,I,KAGxBL,EAASM,QAAQd,KAAKY,GAAIG,E,CAG5B,uBAAMC,GAEJhB,KAAKa,KAAOI,EAAejB,KAAKY,IAKhCZ,KAAKO,Y,CAGP,aAAYW,GACV,OAAQlB,KAAKC,MACX,IAAK,WACH,GAAID,KAAKa,MAAQ,KAAM,CACrB,OAAOM,C,KACF,CACL,OAAOC,C,CAEX,IAAK,YACL,QACE,GAAIpB,KAAKa,MAAQ,KAAM,CACrB,OAAOQ,C,KACF,CACL,OAAOC,C,GAKf,MAAAC,GACE,MAAMtB,KAAEA,EAAIE,QAAEA,EAAOU,KAAEA,EAAIK,UAAEA,GAAclB,KAE3C,MAAMwB,EAAW,CACfC,MAAO,kBAET,MAAMC,EAAMvB,EAAU,IAAM,MAE5B,GAAIuB,IAAQ,IAAK,CACfF,EAAS,QAAUG,EAAKd,GAAMrB,I,CAGhC,OACEoC,EAACC,EAAI,CAAAC,IAAA,4CACF7B,IAAS,YACR2B,EAACF,EAAGK,OAAAC,OAAA,GAAKR,GACPI,EAAK,OAAAK,UAAWf,KAGlBU,EAAA,OAAKH,MAAM,iBAAiBQ,UAAWf,I","ignoreList":[]}