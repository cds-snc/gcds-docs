{"file":"gcds-date-input.js","mappings":";;;;;;;;;;;AAAA,MAAM,IAAI,GAAG;AACb,EAAE,EAAE,EAAE;AACN,IAAI,IAAI,EAAE,MAAM;AAChB,IAAI,KAAK,EAAE,OAAO;AAClB,IAAI,GAAG,EAAE,KAAK;AACd,IAAI,WAAW,EAAE,gBAAgB;AACjC,IAAI,MAAM,EAAE;AACZ,MAAM,IAAI,EAAE,SAAS;AACrB,MAAM,IAAI,EAAE,UAAU;AACtB,MAAM,IAAI,EAAE,OAAO;AACnB,MAAM,IAAI,EAAE,OAAO;AACnB,MAAM,IAAI,EAAE,KAAK;AACjB,MAAM,IAAI,EAAE,MAAM;AAClB,MAAM,IAAI,EAAE,MAAM;AAClB,MAAM,IAAI,EAAE,QAAQ;AACpB,MAAM,IAAI,EAAE,WAAW;AACvB,MAAM,IAAI,EAAE,SAAS;AACrB,MAAM,IAAI,EAAE,UAAU;AACtB,MAAM,IAAI,EAAE,UAAU;AACtB,KAAK;AACL,IAAI,UAAU;AACd,MAAM,sFAAsF;AAC5F,IAAI,eAAe,EAAE,YAAY;AACjC,IAAI,kBAAkB,EAAE,SAAS;AACjC,IAAI,QAAQ,EAAE,aAAa;AAC3B,GAAG;AACH,EAAE,EAAE,EAAE;AACN,IAAI,IAAI,EAAE,OAAO;AACjB,IAAI,KAAK,EAAE,MAAM;AACjB,IAAI,GAAG,EAAE,MAAM;AACf,IAAI,WAAW,EAAE,sBAAsB;AACvC,IAAI,MAAM,EAAE;AACZ,MAAM,IAAI,EAAE,SAAS;AACrB,MAAM,IAAI,EAAE,SAAS;AACrB,MAAM,IAAI,EAAE,MAAM;AAClB,MAAM,IAAI,EAAE,OAAO;AACnB,MAAM,IAAI,EAAE,KAAK;AACjB,MAAM,IAAI,EAAE,MAAM;AAClB,MAAM,IAAI,EAAE,SAAS;AACrB,MAAM,IAAI,EAAE,MAAM;AAClB,MAAM,IAAI,EAAE,WAAW;AACvB,MAAM,IAAI,EAAE,SAAS;AACrB,MAAM,IAAI,EAAE,UAAU;AACtB,MAAM,IAAI,EAAE,UAAU;AACtB,KAAK;AACL,IAAI,UAAU;AACd,MAAM,sFAAsF;AAC5F,IAAI,eAAe,EAAE,YAAY;AACjC,IAAI,kBAAkB,EAAE,SAAS;AACjC,IAAI,QAAQ,EAAE,gBAAgB;AAC9B,GAAG;AACH,CAAC;;ACnDD,MAAM,gBAAgB,GAAG,szCAAszC,CAAC;AACh1C,4BAAe,gBAAgB;;MCkClBA,eAAa;;;;;;;;;;;;QAQxB,eAAU,GAAsB,gBAAgB,CAAC;QAqJzC,WAAM,GAAG;YACf,IAAI,IAAI,CAAC,UAAU,IAAI,MAAM,EAAE;gBAC7B,IAAI,CAAC,QAAQ,EAAE,CAAC;aACjB;SACF,CAAC;;;;QAoGM,gBAAW,GAAG,CAAC,CAAC,EAAE,IAAI;YAC5B,MAAM,GAAG,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;YAEvC,IAAI,IAAI,KAAK,MAAM,EAAE;gBACnB,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;aACtB;iBAAM,IAAI,IAAI,KAAK,OAAO,EAAE;gBAC3B,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;aACvB;iBAAM,IAAI,IAAI,KAAK,KAAK,EAAE;gBACzB,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;aACrB;YAED,IAAI,CAAC,QAAQ,EAAE,CAAC;YAEhB,IAAI,CAAC,CAAC,IAAI,KAAK,QAAQ,EAAE;gBACvB,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAC/C,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;aAClC;SACF,CAAC;;;;;wBAjN2B,KAAK;;;wBAeY,KAAK;;;0BA2BrB,EAAE;wBAKJ,EAAE;yBAKD,EAAE;wBAKH;YAC1B,GAAG,EAAE,KAAK;YACV,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,KAAK;SACZ;sBAMgC,EAAE;;;IAzHnC,YAAY;QACV,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAC1B;aAAM,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACvC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;SACpD;KACF;IAOD,cAAc;QACZ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC5B;aAAM,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACzC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;SACtD;KACF;IAOD,cAAc;QACZ,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,IAAI,MAAM,IAAI,IAAI,CAAC,MAAM,IAAI,SAAS,CAAC,EAAE;YACvE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC5B;aAAM,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACzC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;SACtD;KACF;IAOD,aAAa;QACX,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC1B,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;YAChB,OAAO,CAAC,KAAK,CACX,GAAGC,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,GAAGA,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,IAAI,CAAC,MAAM,EAAE,CAAC,MAAMA,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,GAAGA,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAC1I,CAAC;SACH;aAAM,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YACxC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;SACrD;KACF;IA6BD,iBAAiB;QACf,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACtC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;SAC1B;KACF;;;;IA0FD,MAAM,QAAQ;QACZ,MAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAC/C,IAAI,CAAC,MAAM,KAAK,MAAM;cAClB,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,QAAQ,EAAE;cACvD,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,UAAU,EAAE,CAC3C,CAAC;QACF,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE;YAC3B,IAAI,CAAC,YAAY,GAAG,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvD,IAAI,CAAC,QAAQ,qBAAQ,gBAAgB,CAAC,MAAM,CAAE,CAAC;YAC/C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;gBAClB,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,MAAM,IAAI,CAAC,YAAY,EAAE;gBAChD,MAAM,EAAE,gBAAgB,CAAC,MAAM;aAChC,CAAC,CAAC;SACJ;aAAM;YACL,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;YACvB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;YACtB,IAAI,CAAC,QAAQ,GAAG;gBACd,GAAG,EAAE,KAAK;gBACV,KAAK,EAAE,KAAK;gBACZ,IAAI,EAAE,KAAK;aACZ,CAAC;SACH;KACF;;;;IAOD,MAAM,cAAc,CAAC,CAAC;QACpB,IAAI,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACvC,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,IAAI,OAAO,EAAE;gBACjD,IAAI,CAAC,QAAQ,EAAE,CAAC;aACjB;YAED,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAC/B,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,UAAU,IAAI,OAAO,EAAE;oBACpD,CAAC,CAAC,cAAc,EAAE,CAAC;iBACpB;aACF;SACF;KACF;;;;IAMD,iBAAiB;QACf,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,YAAY,EAAE;YACnC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC/C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC;SAChC;KACF;IAED,wBAAwB,CAAC,KAAK;QAC5B,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACnC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACpB;;;;IAKD,UAAU;QACR,MAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,SAAS;YAC7C,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE;gBACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC;aAC1B;SACF,CAAC,CAAC;QACH,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;KAC3C;;;;IA2BO,QAAQ;QACd,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;QAC/C,IAAI,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;;QAGxB,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,IAAI,GAAG,EAAE;YACxD,QAAQ,GAAG,GAAG,GAAG,QAAQ,CAAC;YAC1B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC1B;aAAM,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YAClE,QAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC1B;;QAGD,IAAI,SAAS,IAAI,UAAU,IAAI,QAAQ,IAAI,MAAM,IAAI,MAAM,EAAE;;YAE3D,IAAI,WAAW,CAAC,GAAG,SAAS,IAAI,UAAU,IAAI,QAAQ,EAAE,EAAE,MAAM,CAAC,EAAE;gBACjE,IAAI,CAAC,KAAK,GAAG,GAAG,SAAS,IAAI,UAAU,IAAI,QAAQ,EAAE,CAAC;gBACtD,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACzC;iBAAM;gBACL,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBAClB,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBAElC,OAAO,KAAK,CAAC;aACd;SACF;aAAM,IAAI,SAAS,IAAI,UAAU,IAAI,MAAM,IAAI,SAAS,EAAE;;YAEzD,IAAI,WAAW,CAAC,GAAG,SAAS,IAAI,UAAU,EAAE,EAAE,MAAM,CAAC,EAAE;gBACrD,IAAI,CAAC,KAAK,GAAG,GAAG,SAAS,IAAI,UAAU,EAAE,CAAC;gBAC1C,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACzC;iBAAM;gBACL,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBAClB,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBAElC,OAAO,KAAK,CAAC;aACd;SACF;aAAM;YACL,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAElC,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KACb;;;;IAKO,cAAc;QACpB,IAAI,IAAI,CAAC,KAAK,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE;YACtD,IAAI,IAAI,CAAC,MAAM,IAAI,SAAS,EAAE;gBAC5B,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACzC,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC/B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;aACjC;iBAAM;gBACL,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACzC,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC/B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;aAC/B;SACF;KACF;IAEO,qBAAqB;QAC3B,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtB,IACE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC5B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAC9B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAC9B;YACA,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC;KACb;IAED,MAAM,iBAAiB;;QAErB,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEpC,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,iBAAiB,EAAE,CAAC;;QAGzB,iBAAiB,CAAC,IAAI,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;QAEzC,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAChD;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAE3C,IAAI,CAAC,KAAK,EAAE;YACV,QAAQ,CAAC,iBAAiB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;SAC1C;QAED,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,IAAI,CAAC,KAAK,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACzC,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,IAAI,CAAC,QAAQ,EAAE,CAAC;YAEhB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC;SAChC;KACF;IAED,mBAAmB;QACjB,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAChD;KACF;IAED,MAAM;QACJ,MAAM,EACJ,MAAM,EACN,IAAI,EACJ,MAAM,EACN,QAAQ,EACR,IAAI,EACJ,YAAY,EACZ,QAAQ,EACR,IAAI,EACJ,QAAQ,GACT,GAAG,IAAI,CAAC;QAET,MAAM,YAAY,GAAG,EAAE,CAAC;QAExB,IAAI,QAAQ,EAAE;YACZ,YAAY,CAAC,eAAe,CAAC,GAAG,MAAM,CAAC;SACxC;QAED,MAAM,aAAa,GAAG;YACpB,UAAU,EAAE,IAAI;YAChB,iBAAiB,EAAE,mBAAmB;SACvC,CAAC;QAEF,IAAI,IAAI,EAAE;YACR,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,GAAG,kBAAkB,GAAG,EAAE,CAAC;YACnD,aAAa,CAAC,iBAAiB,CAAC;gBAC9B,GAAG,aAAa,CAAC,iBAAiB,CAAC,IAAI,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;SAC1D;;QAGD,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,KAC9C,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,CACtC,CAAC;QAEF,MAAM,KAAK,IACT,kFACE,KAAK,EAAEA,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,EACvB,QAAQ,EAAC,OAAO,EAChB,IAAI,EAAC,OAAO,EACZ,YAAY,EAAEA,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,EACpC,QAAQ,EAAE,QAAQ,EAClB,OAAO,EAAE,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,OAAO,CAAC,EAC1C,QAAQ,EAAE,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,OAAO,CAAC,EAC3C,KAAK,EAAE,IAAI,CAAC,UAAU,EACtB,KAAK,EAAE,0BAA0B,QAAQ,CAAC,OAAO,CAAC,GAAG,wBAAwB,GAAG,EAAE,EAAE,IAChF,YAAY,oBACF,QAAQ,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,sBACxB,QAAQ,CAAC,OAAO,CAAC,IAAI,YAAY,KAElD,OAAO,CAAC,GAAG,CAAC,MAAM,KACjB,cAAQ,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,IAC/BA,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CACtB,CACV,CAAC,CACU,CACf,CAAC;QAEF,MAAM,IAAI,IACR,iFACE,IAAI,EAAC,MAAM,EACX,KAAK,EAAEA,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EACtB,OAAO,EAAC,MAAM,EACd,IAAI,EAAC,QAAQ,EACb,IAAI,EAAE,CAAC,EACP,QAAQ,EAAE,QAAQ,EAClB,KAAK,EAAE,IAAI,CAAC,SAAS,EACrB,OAAO,EAAE,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,MAAM,CAAC,EACzC,QAAQ,EAAE,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,MAAM,CAAC,EAC1C,KAAK,EAAE,yBAAyB,QAAQ,CAAC,MAAM,CAAC,GAAG,wBAAwB,GAAG,EAAE,EAAE,IAC9E,YAAY,oBACF,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,sBACvB,QAAQ,CAAC,MAAM,CAAC,IAAI,YAAY,IACtC,CACf,CAAC;QAEF,MAAM,GAAG,IACP,iFACE,IAAI,EAAC,KAAK,EACV,KAAK,EAAEA,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EACrB,OAAO,EAAC,KAAK,EACb,IAAI,EAAC,QAAQ,EACb,IAAI,EAAE,CAAC,EACP,QAAQ,EAAE,QAAQ,EAClB,KAAK,EAAE,IAAI,CAAC,QAAQ,EACpB,OAAO,EAAE,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,KAAK,CAAC,EACxC,QAAQ,EAAE,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,KAAK,CAAC,EACzC,KAAK,EAAE,wBAAwB,QAAQ,CAAC,KAAK,CAAC,GAAG,wBAAwB,GAAG,EAAE,EAAE,IAC5E,YAAY,oBACF,QAAQ,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,sBACtB,QAAQ,CAAC,KAAK,CAAC,IAAI,YAAY,IACrC,CACf,CAAC;QAEF,QACE,EAAC,IAAI,qDAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,IAAI,CAAC,MAAM,EAAE,IAC1C,IAAI,CAAC,qBAAqB,EAAE,KAC3B,+EAAU,KAAK,EAAC,2BAA2B,IAAK,aAAa,GAC3D,+DAAQ,EAAE,EAAC,mBAAmB,IAC3B,MAAM,EACN,QAAQ,IACP,YAAM,KAAK,EAAC,kBAAkB,IAAEA,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAQ,IACzD,IAAI,CACD,EACR,IAAI,IACH,iBAAW,EAAE,EAAC,iBAAiB,aAAS,YAAY,IACjD,IAAI,CACK,IACV,IAAI,EACP,YAAY,IACX,eACE,0BACE,EAAE,EAAC,kBAAkB,EACrB,SAAS,EAAC,YAAY,IAErB,YAAY,CACM,CACjB,IACJ,IAAI,EACP,MAAM,IAAI,SAAS;cAChB,CAAC,KAAK,EAAE,IAAI,CAAC;cACb,IAAI,IAAI,IAAI;kBACV,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC;kBAClB,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,CACf,CACZ,CACI,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["GcdsDateInput","i18n"],"sources":["src/components/gcds-date-input/i18n/i18n.js","src/components/gcds-date-input/gcds-date-input.css?tag=gcds-date-input&encapsulation=shadow","src/components/gcds-date-input/gcds-date-input.tsx"],"sourcesContent":["const I18N = {\n  en: {\n    year: 'Year',\n    month: 'Month',\n    day: 'Day',\n    selectmonth: 'Select a month',\n    months: {\n      '01': 'January',\n      '02': 'February',\n      '03': 'March',\n      '04': 'April',\n      '05': 'May',\n      '06': 'June',\n      '07': 'July',\n      '08': 'August',\n      '09': 'September',\n      '10': 'October',\n      '11': 'November',\n      '12': 'December',\n    },\n    valueError:\n      'gcds-date-input:  Value attribute contains an invalid date format. Expected format: ',\n    valueFormatfull: 'YYYY-MM-DD',\n    valueFormatcompact: 'YYYY-MM',\n    required: ' (required)',\n  },\n  fr: {\n    year: 'Année',\n    month: 'Mois',\n    day: 'Jour',\n    selectmonth: 'Sélectionnez un mois',\n    months: {\n      '01': 'janvier',\n      '02': 'février',\n      '03': 'mars',\n      '04': 'avril',\n      '05': 'mai',\n      '06': 'juin',\n      '07': 'juillet',\n      '08': 'août',\n      '09': 'septembre',\n      '10': 'octobre',\n      '11': 'novembre',\n      '12': 'décembre',\n    },\n    valueError:\n      'gcds-date-input:  Value attribute contains an invalid date format. Expected format: ',\n    valueFormatfull: 'YYYY-MM-DD',\n    valueFormatcompact: 'YYYY-MM',\n    required: ' (obligatoire)',\n  },\n};\n\nexport default I18N;\n","@layer reset, default, hint, error;\n\n@layer reset {\n  :host {\n    display: block;\n\n    .gcds-date-input__fieldset {\n      border: 0;\n      padding: 0;\n      min-inline-size: auto;\n\n      legend {\n        padding: 0;\n      }\n    }\n  }\n}\n\n@layer default {\n  :host {\n    .gcds-date-input__fieldset legend {\n      color: var(--gcds-date-input-fieldset-text);\n      font: var(--gcds-date-input-fieldset-font-desktop);\n\n      .legend__required {\n        margin: var(--gcds-date-input-fieldset-required-margin) !important;\n        font: var(--gcds-date-input-fieldset-required-font-desktop);\n        vertical-align: middle;\n      }\n\n      @media only screen and (width < 48em) {\n        font: var(--gcds-date-input-fieldset-font-mobile);\n\n        .legend__required {\n          font: var(--gcds-date-input-fieldset-required-font-mobile);\n        }\n      }\n    }\n\n    .gcds-date-input__month,\n    .gcds-date-input__year,\n    .gcds-date-input__day {\n      display: inline-block;\n      margin-inline-end: var(--gcds-date-input-margin);\n\n      --gcds-label-font-desktop: var(--gcds-date-input-label-font-desktop);\n      --gcds-label-font-mobile: var(--gcds-date-input-label-font-mobile );\n    }\n  }\n}\n\n@layer hint {\n  :host {\n    gcds-hint {\n      margin: var(--gcds-date-input-fieldset-hint-margin);\n    }\n  }\n}\n\n@layer error {\n  :host {\n    gcds-input.gcds-date-input--error::part(input),\n    gcds-select.gcds-date-input--error::part(select) {\n      border-color: var(--gcds-date-input-danger-border);\n    }\n  }\n}\n","import {\n  Component,\n  Host,\n  Element,\n  AttachInternals,\n  Prop,\n  State,\n  Event,\n  EventEmitter,\n  Watch,\n  Method,\n  Listen,\n  h,\n} from '@stencil/core';\nimport {\n  assignLanguage,\n  observerConfig,\n  isValidDate,\n  logError,\n} from '../../utils/utils';\nimport {\n  Validator,\n  defaultValidator,\n  ValidatorEntry,\n  getValidator,\n  requiredValidator,\n} from '../../validators';\nimport i18n from './i18n/i18n';\n\n@Component({\n  tag: 'gcds-date-input',\n  styleUrl: 'gcds-date-input.css',\n  shadow: { delegatesFocus: true },\n  formAssociated: true,\n})\nexport class GcdsDateInput {\n  @Element() el: HTMLElement;\n\n  @AttachInternals()\n  internals: ElementInternals;\n\n  private initialValue?: string;\n\n  _validator: Validator<string> = defaultValidator;\n\n  /**\n   * Name attribute for the date input.\n   */\n  @Prop() name!: string;\n  @Watch('name')\n  validateName() {\n    if (!this.name) {\n      this.errors.push('name');\n    } else if (this.errors.includes('name')) {\n      this.errors.splice(this.errors.indexOf('name'), 1);\n    }\n  }\n\n  /**\n   * Fieldset legend\n   */\n  @Prop() legend!: string;\n  @Watch('legend')\n  validateLegend() {\n    if (!this.legend) {\n      this.errors.push('legend');\n    } else if (this.errors.includes('legend')) {\n      this.errors.splice(this.errors.indexOf('legend'), 1);\n    }\n  }\n\n  /**\n   * Set this property to full to show month, day, and year form elements. Set it to compact to show only the month and year form elements.\n   */\n  @Prop() format!: 'full' | 'compact';\n  @Watch('format')\n  validateFormat() {\n    if (!this.format || (this.format != 'full' && this.format != 'compact')) {\n      this.errors.push('format');\n    } else if (this.errors.includes('format')) {\n      this.errors.splice(this.errors.indexOf('format'), 1);\n    }\n  }\n\n  /**\n   * Default value for the date input element. Format: YYYY-MM-DD\n   */\n  @Prop({ mutable: true }) value?: string;\n  @Watch('value')\n  validateValue() {\n    if (this.value && !isValidDate(this.value)) {\n      this.errors.push('value');\n      this.value = '';\n      console.error(\n        `${i18n['en'].valueError}${i18n['en'][`valueFormat${this.format}`]} | ${i18n['fr'].valueError}${i18n['fr'][`valueFormat${this.format}`]}`,\n      );\n    } else if (this.errors.includes('value')) {\n      this.errors.splice(this.errors.indexOf('value'), 1);\n    }\n  }\n\n  /**\n   * Specifies if a form field is required or not.\n   */\n  @Prop() required?: boolean = false;\n\n  /**\n   * Hint displayed below the legend and above form fields.\n   */\n  @Prop() hint?: string;\n\n  /**\n   * Error message displayed below the legend and above form fields.\n   */\n  @Prop({ mutable: true }) errorMessage?: string;\n\n  /**\n   * Specifies if the date input is disabled or not.\n   */\n  @Prop({ mutable: true }) disabled?: boolean = false;\n\n  /**\n   * Array of validators\n   */\n  @Prop({ mutable: true }) validator: Array<\n    string | ValidatorEntry | Validator<string>\n  >;\n  @Watch('validator')\n  validateValidator() {\n    if (this.validator && !this.validateOn) {\n      this.validateOn = 'blur';\n    }\n  }\n\n  /**\n   * Set event to call validator\n   */\n  @Prop({ mutable: true }) validateOn: 'blur' | 'submit' | 'other';\n\n  /**\n   * States\n   */\n\n  /**\n   * State to track individual month value\n   */\n  @State() monthValue: string = '';\n\n  /**\n   * State to track individual month value\n   */\n  @State() dayValue: string = '';\n\n  /**\n   * State to track individual month value\n   */\n  @State() yearValue: string = '';\n\n  /**\n   * Specifies if the date input is invalid.\n   */\n  @State() hasError: object = {\n    day: false,\n    month: false,\n    year: false,\n  };\n\n  /**\n   * State to track validation on properties\n   * Contains a list of properties that have an error associated with them\n   */\n  @State() errors: Array<string> = [];\n\n  /**\n   * Language of rendered date input\n   */\n  @State() lang: string;\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when an element has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when an element loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  private onBlur = () => {\n    if (this.validateOn == 'blur') {\n      this.validate();\n    }\n  };\n\n  /**\n   * Emitted when the element has received input.\n   */\n  @Event() gcdsInput: EventEmitter;\n\n  /**\n   * Emitted when an element has changed.\n   */\n  @Event() gcdsChange: EventEmitter;\n\n  /**\n   * Emitted when an element has a validation error.\n   */\n  @Event() gcdsError!: EventEmitter<object>;\n\n  /**\n   * Emitted when an element has validated.\n   */\n  @Event() gcdsValid!: EventEmitter<object>;\n\n  /**\n   * Call any active validators\n   */\n  @Method()\n  async validate() {\n    const validationResult = this._validator.validate(\n      this.format === 'full'\n        ? `${this.yearValue}-${this.monthValue}-${this.dayValue}`\n        : `${this.yearValue}-${this.monthValue}`,\n    );\n    if (!validationResult.valid) {\n      this.errorMessage = validationResult.reason[this.lang];\n      this.hasError = { ...validationResult.errors };\n      this.gcdsError.emit({\n        message: `${this.legend} - ${this.errorMessage}`,\n        errors: validationResult.errors,\n      });\n    } else {\n      this.errorMessage = '';\n      this.gcdsValid.emit();\n      this.hasError = {\n        day: false,\n        month: false,\n        year: false,\n      };\n    }\n  }\n\n  /*\n   * Event listeners\n   */\n\n  @Listen('submit', { target: 'document' })\n  async submitListener(e) {\n    if (e.target == this.el.closest('form')) {\n      if (this.validateOn && this.validateOn != 'other') {\n        this.validate();\n      }\n\n      for (const key in this.hasError) {\n        if (this.hasError[key] && this.validateOn != 'other') {\n          e.preventDefault();\n        }\n      }\n    }\n  }\n\n  /*\n   * Form internal functions\n   */\n\n  formResetCallback() {\n    if (this.value != this.initialValue) {\n      this.internals.setFormValue(this.initialValue);\n      this.value = this.initialValue;\n    }\n  }\n\n  formStateRestoreCallback(state) {\n    this.internals.setFormValue(state);\n    this.value = state;\n  }\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  /*\n   * Handle input event to update state\n   */\n  private handleInput = (e, type) => {\n    const val = e.target && e.target.value;\n\n    if (type === 'year') {\n      this.yearValue = val;\n    } else if (type === 'month') {\n      this.monthValue = val;\n    } else if (type === 'day') {\n      this.dayValue = val;\n    }\n\n    this.setValue();\n\n    if (e.type === 'change') {\n      const changeEvt = new e.constructor(e.type, e);\n      this.el.dispatchEvent(changeEvt);\n    }\n  };\n\n  /**\n   * Logic to combine all input values together based on format\n   */\n  private setValue() {\n    const { yearValue, monthValue, format } = this;\n    let { dayValue } = this;\n\n    // Logic to make sure the day input is registered correctly\n    if (dayValue && dayValue.length === 1 && dayValue != '0') {\n      dayValue = '0' + dayValue;\n      this.dayValue = dayValue;\n    } else if (dayValue && dayValue.length == 3 && dayValue[0] === '0') {\n      dayValue = dayValue.substring(1);\n      this.dayValue = dayValue;\n    }\n\n    // All form elements have something entered\n    if (yearValue && monthValue && dayValue && format == 'full') {\n      // Is the combined value a valid date\n      if (isValidDate(`${yearValue}-${monthValue}-${dayValue}`, format)) {\n        this.value = `${yearValue}-${monthValue}-${dayValue}`;\n        this.internals.setFormValue(this.value);\n      } else {\n        this.value = null;\n        this.internals.setFormValue(null);\n\n        return false;\n      }\n    } else if (yearValue && monthValue && format == 'compact') {\n      // Is the combined value a valid date\n      if (isValidDate(`${yearValue}-${monthValue}`, format)) {\n        this.value = `${yearValue}-${monthValue}`;\n        this.internals.setFormValue(this.value);\n      } else {\n        this.value = null;\n        this.internals.setFormValue(null);\n\n        return false;\n      }\n    } else {\n      this.value = null;\n      this.internals.setFormValue(null);\n\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Split value into parts depending on format\n   */\n  private splitFormValue() {\n    if (this.value && isValidDate(this.value, this.format)) {\n      if (this.format == 'compact') {\n        const splitValue = this.value.split('-');\n        this.yearValue = splitValue[0];\n        this.monthValue = splitValue[1];\n      } else {\n        const splitValue = this.value.split('-');\n        this.yearValue = splitValue[0];\n        this.monthValue = splitValue[1];\n        this.dayValue = splitValue[2];\n      }\n    }\n  }\n\n  private validateRequiredProps() {\n    this.validateName();\n    this.validateLegend();\n    this.validateFormat();\n\n    if (\n      this.errors.includes('name') ||\n      this.errors.includes('legend') ||\n      this.errors.includes('format')\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n    this.validateValidator();\n\n    // Assign required validator if needed\n    requiredValidator(this.el, 'date-input');\n\n    if (this.validator) {\n      this._validator = getValidator(this.validator);\n    }\n\n    const valid = this.validateRequiredProps();\n\n    if (!valid) {\n      logError('gcds-date-input', this.errors);\n    }\n\n    this.validateValue();\n    if (this.value && isValidDate(this.value)) {\n      this.splitFormValue();\n      this.setValue();\n\n      this.initialValue = this.value;\n    }\n  }\n\n  componentWillUpdate() {\n    if (this.validator) {\n      this._validator = getValidator(this.validator);\n    }\n  }\n\n  render() {\n    const {\n      legend,\n      name,\n      format,\n      required,\n      hint,\n      errorMessage,\n      disabled,\n      lang,\n      hasError,\n    } = this;\n\n    const requiredAttr = {};\n\n    if (required) {\n      requiredAttr['aria-required'] = 'true';\n    }\n\n    const fieldsetAttrs = {\n      'tabindex': '-1',\n      'aria-labelledby': 'date-input-legend',\n    };\n\n    if (hint) {\n      const hintID = this.hint ? `date-input-hint ` : '';\n      fieldsetAttrs['aria-labelledby'] =\n        `${fieldsetAttrs['aria-labelledby']} ${hintID}`.trim();\n    }\n\n    // Array of months 01 - 12\n    const options = Array.from({ length: 12 }, (_, i) =>\n      i + 1 < 10 ? `0${i + 1}` : `${i + 1}`,\n    );\n\n    const month = (\n      <gcds-select\n        label={i18n[lang].month}\n        selectId=\"month\"\n        name=\"month\"\n        defaultValue={i18n[lang].selectmonth}\n        disabled={disabled}\n        onInput={e => this.handleInput(e, 'month')}\n        onChange={e => this.handleInput(e, 'month')}\n        value={this.monthValue}\n        class={`gcds-date-input__month ${hasError['month'] ? 'gcds-date-input--error' : ''}`}\n        {...requiredAttr}\n        aria-invalid={hasError['month'].toString()}\n        aria-description={hasError['month'] && errorMessage}\n      >\n        {options.map(option => (\n          <option key={option} value={option}>\n            {i18n[lang]['months'][option]}\n          </option>\n        ))}\n      </gcds-select>\n    );\n\n    const year = (\n      <gcds-input\n        name=\"year\"\n        label={i18n[lang].year}\n        inputId=\"year\"\n        type=\"number\"\n        size={4}\n        disabled={disabled}\n        value={this.yearValue}\n        onInput={e => this.handleInput(e, 'year')}\n        onChange={e => this.handleInput(e, 'year')}\n        class={`gcds-date-input__year ${hasError['year'] ? 'gcds-date-input--error' : ''}`}\n        {...requiredAttr}\n        aria-invalid={hasError['year'].toString()}\n        aria-description={hasError['year'] && errorMessage}\n      ></gcds-input>\n    );\n\n    const day = (\n      <gcds-input\n        name=\"day\"\n        label={i18n[lang].day}\n        inputId=\"day\"\n        type=\"number\"\n        size={2}\n        disabled={disabled}\n        value={this.dayValue}\n        onInput={e => this.handleInput(e, 'day')}\n        onChange={e => this.handleInput(e, 'day')}\n        class={`gcds-date-input__day ${hasError['day'] ? 'gcds-date-input--error' : ''}`}\n        {...requiredAttr}\n        aria-invalid={hasError['day'].toString()}\n        aria-description={hasError['day'] && errorMessage}\n      ></gcds-input>\n    );\n\n    return (\n      <Host name={name} onBlur={() => this.onBlur()}>\n        {this.validateRequiredProps() && (\n          <fieldset class=\"gcds-date-input__fieldset\" {...fieldsetAttrs}>\n            <legend id=\"date-input-legend\">\n              {legend}\n              {required ? (\n                <span class=\"legend__required\">{i18n[lang].required}</span>\n              ) : null}\n            </legend>\n            {hint ? (\n              <gcds-hint id=\"date-input-hint\" hint-id=\"date-input\">\n                {hint}\n              </gcds-hint>\n            ) : null}\n            {errorMessage ? (\n              <div>\n                <gcds-error-message\n                  id=\"date-input-error\"\n                  messageId=\"date-input\"\n                >\n                  {errorMessage}\n                </gcds-error-message>\n              </div>\n            ) : null}\n            {format == 'compact'\n              ? [month, year]\n              : lang == 'en'\n                ? [month, day, year]\n                : [day, month, year]}\n          </fieldset>\n        )}\n      </Host>\n    );\n  }\n}\n"],"version":3}