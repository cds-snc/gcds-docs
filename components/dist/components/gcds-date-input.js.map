{"version":3,"names":["I18N","en","year","month","day","selectmonth","months","valueError","valueFormatfull","valueFormatcompact","required","fr","gcdsDateInputCss","GcdsDateInput","__stencil_proxyCustomElement","HTMLElement","constructor","this","_validator","defaultValidator","disabled","validateOn","monthValue","dayValue","yearValue","hasError","errors","onBlur","validate","handleInput","e","type","val","target","value","setValue","changeEvt","el","dispatchEvent","validateName","name","push","includes","splice","indexOf","validateLegend","legend","validateFormat","format","validateValue","isValidDate","console","error","i18n","validateValidator","getValidator","validator","handleValidationResult","gcdsError","gcdsValid","lang","submitListener","closest","key","preventDefault","formResetCallback","initialValue","internals","setFormValue","formStateRestoreCallback","state","updateLang","observer","MutationObserver","mutations","oldValue","observe","observerConfig","length","substring","splitFormValue","splitValue","split","validateRequiredProps","componentWillLoad","assignLanguage","requiredValidator","valid","logError","render","hint","errorMessage","requiredAttr","fieldsetAttrs","tabindex","hintID","trim","options","Array","from","_","i","h","Object","assign","label","selectId","defaultValue","onInput","onChange","class","toString","map","option","inputId","size","Host","id","messageId"],"sources":["src/components/gcds-date-input/i18n/i18n.js","src/components/gcds-date-input/gcds-date-input.css?tag=gcds-date-input&encapsulation=shadow","src/components/gcds-date-input/gcds-date-input.tsx"],"sourcesContent":["const I18N = {\n  en: {\n    year: 'Year',\n    month: 'Month',\n    day: 'Day',\n    selectmonth: 'Select a month',\n    months: {\n      '01': 'January',\n      '02': 'February',\n      '03': 'March',\n      '04': 'April',\n      '05': 'May',\n      '06': 'June',\n      '07': 'July',\n      '08': 'August',\n      '09': 'September',\n      '10': 'October',\n      '11': 'November',\n      '12': 'December',\n    },\n    valueError:\n      'gcds-date-input:  Value attribute contains an invalid date format. Expected format: ',\n    valueFormatfull: 'YYYY-MM-DD',\n    valueFormatcompact: 'YYYY-MM',\n    required: ' (required)',\n  },\n  fr: {\n    year: 'Année',\n    month: 'Mois',\n    day: 'Jour',\n    selectmonth: 'Sélectionnez un mois',\n    months: {\n      '01': 'janvier',\n      '02': 'février',\n      '03': 'mars',\n      '04': 'avril',\n      '05': 'mai',\n      '06': 'juin',\n      '07': 'juillet',\n      '08': 'août',\n      '09': 'septembre',\n      '10': 'octobre',\n      '11': 'novembre',\n      '12': 'décembre',\n    },\n    valueError:\n      'gcds-date-input:  Value attribute contains an invalid date format. Expected format: ',\n    valueFormatfull: 'YYYY-MM-DD',\n    valueFormatcompact: 'YYYY-MM',\n    required: ' (obligatoire)',\n  },\n};\n\nexport default I18N;\n","@layer reset, default, hint, error;\n\n@layer reset {\n  :host {\n    display: block;\n\n    .gcds-date-input__fieldset {\n      border: 0;\n      padding: 0;\n      min-inline-size: auto;\n\n      legend {\n        padding: 0;\n      }\n    }\n  }\n}\n\n@layer default {\n  :host {\n    .gcds-date-input__fieldset legend {\n      color: var(--gcds-date-input-fieldset-text);\n      font: var(--gcds-date-input-fieldset-font-desktop);\n\n      .legend__required {\n        margin: var(--gcds-date-input-fieldset-required-margin) !important;\n        font: var(--gcds-date-input-fieldset-required-font-desktop);\n        vertical-align: middle;\n      }\n\n      @media only screen and (width < 48em) {\n        font: var(--gcds-date-input-fieldset-font-mobile);\n\n        .legend__required {\n          font: var(--gcds-date-input-fieldset-required-font-mobile);\n        }\n      }\n    }\n\n    .gcds-date-input__month,\n    .gcds-date-input__year,\n    .gcds-date-input__day {\n      display: inline-block;\n      margin-inline-end: var(--gcds-date-input-margin);\n\n      --gcds-label-font-desktop: var(--gcds-date-input-label-font-desktop);\n      --gcds-label-font-mobile: var(--gcds-date-input-label-font-mobile );\n    }\n  }\n}\n\n@layer hint {\n  :host {\n    gcds-hint {\n      margin: var(--gcds-date-input-fieldset-hint-margin);\n    }\n  }\n}\n\n@layer error {\n  :host {\n    gcds-input.gcds-date-input--error::part(input),\n    gcds-select.gcds-date-input--error::part(select) {\n      border-color: var(--gcds-date-input-danger-border);\n    }\n  }\n}\n","import {\n  Component,\n  Host,\n  Element,\n  AttachInternals,\n  Prop,\n  State,\n  Event,\n  EventEmitter,\n  Watch,\n  Method,\n  Listen,\n  h,\n} from '@stencil/core';\nimport {\n  assignLanguage,\n  observerConfig,\n  isValidDate,\n  logError,\n  handleValidationResult,\n} from '../../utils/utils';\nimport {\n  Validator,\n  defaultValidator,\n  ValidatorEntry,\n  getValidator,\n  requiredValidator,\n} from '../../validators';\nimport i18n from './i18n/i18n';\n\n@Component({\n  tag: 'gcds-date-input',\n  styleUrl: 'gcds-date-input.css',\n  shadow: { delegatesFocus: true },\n  formAssociated: true,\n})\nexport class GcdsDateInput {\n  @Element() el: HTMLElement;\n\n  @AttachInternals()\n  internals: ElementInternals;\n\n  private initialValue?: string;\n\n  _validator: Validator<string> = defaultValidator;\n\n  /**\n   * Name attribute for the date input.\n   */\n  @Prop() name!: string;\n  @Watch('name')\n  validateName() {\n    if (!this.name) {\n      this.errors.push('name');\n    } else if (this.errors.includes('name')) {\n      this.errors.splice(this.errors.indexOf('name'), 1);\n    }\n  }\n\n  /**\n   * Fieldset legend\n   */\n  @Prop() legend!: string;\n  @Watch('legend')\n  validateLegend() {\n    if (!this.legend) {\n      this.errors.push('legend');\n    } else if (this.errors.includes('legend')) {\n      this.errors.splice(this.errors.indexOf('legend'), 1);\n    }\n  }\n\n  /**\n   * Set this property to full to show month, day, and year form elements. Set it to compact to show only the month and year form elements.\n   */\n  @Prop() format!: 'full' | 'compact';\n  @Watch('format')\n  validateFormat() {\n    if (!this.format || (this.format != 'full' && this.format != 'compact')) {\n      this.errors.push('format');\n    } else if (this.errors.includes('format')) {\n      this.errors.splice(this.errors.indexOf('format'), 1);\n    }\n  }\n\n  /**\n   * Default value for the date input element. Format: YYYY-MM-DD\n   */\n  @Prop({ mutable: true }) value?: string;\n  @Watch('value')\n  validateValue() {\n    if (this.value && !isValidDate(this.value)) {\n      this.errors.push('value');\n      this.value = '';\n      console.error(\n        `${i18n['en'].valueError}${i18n['en'][`valueFormat${this.format}`]} | ${i18n['fr'].valueError}${i18n['fr'][`valueFormat${this.format}`]}`,\n      );\n    } else if (this.errors.includes('value')) {\n      this.errors.splice(this.errors.indexOf('value'), 1);\n    }\n  }\n\n  /**\n   * Specifies if a form field is required or not.\n   */\n  @Prop() required?: boolean = false;\n\n  /**\n   * Hint displayed below the legend and above form fields.\n   */\n  @Prop() hint?: string;\n\n  /**\n   * Error message displayed below the legend and above form fields.\n   */\n  @Prop({ mutable: true }) errorMessage?: string;\n\n  /**\n   * Specifies if the date input is disabled or not.\n   */\n  @Prop({ mutable: true }) disabled?: boolean = false;\n\n  /**\n   * Array of validators\n   */\n  @Prop({ mutable: true }) validator: Array<\n    string | ValidatorEntry | Validator<string>\n  >;\n  @Watch('validator')\n  validateValidator() {\n    this._validator = getValidator(this.validator);\n  }\n\n  /**\n   * Set event to call validator\n   */\n  @Prop({ mutable: true }) validateOn: 'blur' | 'submit' | 'other' = 'blur';\n\n  /**\n   * States\n   */\n\n  /**\n   * State to track individual month value\n   */\n  @State() monthValue: string = '';\n\n  /**\n   * State to track individual month value\n   */\n  @State() dayValue: string = '';\n\n  /**\n   * State to track individual month value\n   */\n  @State() yearValue: string = '';\n\n  /**\n   * Specifies if the date input is invalid.\n   */\n  @State() hasError: object = {\n    day: false,\n    month: false,\n    year: false,\n  };\n\n  /**\n   * State to track validation on properties\n   * Contains a list of properties that have an error associated with them\n   */\n  @State() errors: Array<string> = [];\n\n  /**\n   * Language of rendered date input\n   */\n  @State() lang: string;\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when an element has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when an element loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  private onBlur = () => {\n    if (this.validateOn == 'blur') {\n      this.validate();\n    }\n  };\n\n  /**\n   * Emitted when the element has received input.\n   */\n  @Event() gcdsInput: EventEmitter;\n\n  /**\n   * Emitted when an element has changed.\n   */\n  @Event() gcdsChange: EventEmitter;\n\n  /**\n   * Emitted when an element has a validation error.\n   */\n  @Event() gcdsError!: EventEmitter<object>;\n\n  /**\n   * Emitted when an element has validated.\n   */\n  @Event() gcdsValid!: EventEmitter<object>;\n\n  /**\n   * Call any active validators\n   */\n  @Method()\n  async validate() {\n    this.hasError = handleValidationResult(\n      this.el as HTMLGcdsDateInputElement,\n      this._validator.validate(\n        this.format === 'full'\n          ? `${this.yearValue}-${this.monthValue}-${this.dayValue}`\n          : `${this.yearValue}-${this.monthValue}`,\n      ),\n      this.legend,\n      this.gcdsError,\n      this.gcdsValid,\n      this.lang,\n      { day: false, month: false, year: false },\n    );\n  }\n\n  /*\n   * Event listeners\n   */\n\n  @Listen('submit', { target: 'document' })\n  async submitListener(e) {\n    if (e.target == this.el.closest('form')) {\n      if (this.validateOn && this.validateOn != 'other') {\n        this.validate();\n      }\n\n      for (const key in this.hasError) {\n        if (this.hasError[key] && this.validateOn != 'other') {\n          e.preventDefault();\n        }\n      }\n    }\n  }\n\n  /*\n   * Form internal functions\n   */\n\n  formResetCallback() {\n    if (this.value != this.initialValue) {\n      this.internals.setFormValue(this.initialValue);\n      this.value = this.initialValue;\n    }\n  }\n\n  formStateRestoreCallback(state) {\n    this.internals.setFormValue(state);\n    this.value = state;\n  }\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  /*\n   * Handle input event to update state\n   */\n  private handleInput = (e, type) => {\n    const val = e.target && e.target.value;\n\n    if (type === 'year') {\n      this.yearValue = val;\n    } else if (type === 'month') {\n      this.monthValue = val;\n    } else if (type === 'day') {\n      this.dayValue = val;\n    }\n\n    this.setValue();\n\n    if (e.type === 'change') {\n      const changeEvt = new e.constructor(e.type, e);\n      this.el.dispatchEvent(changeEvt);\n    }\n  };\n\n  /**\n   * Logic to combine all input values together based on format\n   */\n  private setValue() {\n    const { yearValue, monthValue, format } = this;\n    let { dayValue } = this;\n\n    // Logic to make sure the day input is registered correctly\n    if (dayValue && dayValue.length === 1 && dayValue != '0') {\n      dayValue = '0' + dayValue;\n      this.dayValue = dayValue;\n    } else if (dayValue && dayValue.length == 3 && dayValue[0] === '0') {\n      dayValue = dayValue.substring(1);\n      this.dayValue = dayValue;\n    }\n\n    // All form elements have something entered\n    if (yearValue && monthValue && dayValue && format == 'full') {\n      // Is the combined value a valid date\n      if (isValidDate(`${yearValue}-${monthValue}-${dayValue}`, format)) {\n        this.value = `${yearValue}-${monthValue}-${dayValue}`;\n        this.internals.setFormValue(this.value);\n      } else {\n        this.value = null;\n        this.internals.setFormValue(null);\n\n        return false;\n      }\n    } else if (yearValue && monthValue && format == 'compact') {\n      // Is the combined value a valid date\n      if (isValidDate(`${yearValue}-${monthValue}`, format)) {\n        this.value = `${yearValue}-${monthValue}`;\n        this.internals.setFormValue(this.value);\n      } else {\n        this.value = null;\n        this.internals.setFormValue(null);\n\n        return false;\n      }\n    } else {\n      this.value = null;\n      this.internals.setFormValue(null);\n\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Split value into parts depending on format\n   */\n  private splitFormValue() {\n    if (this.value && isValidDate(this.value, this.format)) {\n      if (this.format == 'compact') {\n        const splitValue = this.value.split('-');\n        this.yearValue = splitValue[0];\n        this.monthValue = splitValue[1];\n      } else {\n        const splitValue = this.value.split('-');\n        this.yearValue = splitValue[0];\n        this.monthValue = splitValue[1];\n        this.dayValue = splitValue[2];\n      }\n    }\n  }\n\n  private validateRequiredProps() {\n    this.validateName();\n    this.validateLegend();\n    this.validateFormat();\n\n    if (\n      this.errors.includes('name') ||\n      this.errors.includes('legend') ||\n      this.errors.includes('format')\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n\n    // Assign required validator if needed\n    requiredValidator(this.el, 'date-input');\n\n    this.validateValidator();\n\n    const valid = this.validateRequiredProps();\n\n    if (!valid) {\n      logError('gcds-date-input', this.errors);\n    }\n\n    this.validateValue();\n    if (this.value && isValidDate(this.value)) {\n      this.splitFormValue();\n      this.setValue();\n\n      this.initialValue = this.value;\n    }\n  }\n\n  render() {\n    const {\n      legend,\n      name,\n      format,\n      required,\n      hint,\n      errorMessage,\n      disabled,\n      lang,\n      hasError,\n    } = this;\n\n    const requiredAttr = {};\n\n    if (required) {\n      requiredAttr['aria-required'] = 'true';\n    }\n\n    const fieldsetAttrs = {\n      'tabindex': '-1',\n      'aria-labelledby': 'date-input-legend',\n    };\n\n    if (hint) {\n      const hintID = this.hint ? `date-input-hint ` : '';\n      fieldsetAttrs['aria-labelledby'] =\n        `${fieldsetAttrs['aria-labelledby']} ${hintID}`.trim();\n    }\n\n    // Array of months 01 - 12\n    const options = Array.from({ length: 12 }, (_, i) =>\n      i + 1 < 10 ? `0${i + 1}` : `${i + 1}`,\n    );\n\n    const month = (\n      <gcds-select\n        label={i18n[lang].month}\n        selectId=\"month\"\n        name=\"month\"\n        defaultValue={i18n[lang].selectmonth}\n        disabled={disabled}\n        onInput={e => this.handleInput(e, 'month')}\n        onChange={e => this.handleInput(e, 'month')}\n        value={this.monthValue}\n        class={`gcds-date-input__month ${hasError['month'] ? 'gcds-date-input--error' : ''}`}\n        {...requiredAttr}\n        aria-invalid={hasError['month'].toString()}\n        aria-description={hasError['month'] && errorMessage}\n      >\n        {options.map(option => (\n          <option key={option} value={option}>\n            {i18n[lang]['months'][option]}\n          </option>\n        ))}\n      </gcds-select>\n    );\n\n    const year = (\n      <gcds-input\n        name=\"year\"\n        label={i18n[lang].year}\n        inputId=\"year\"\n        type=\"number\"\n        size={4}\n        disabled={disabled}\n        value={this.yearValue}\n        onInput={e => this.handleInput(e, 'year')}\n        onChange={e => this.handleInput(e, 'year')}\n        class={`gcds-date-input__year ${hasError['year'] ? 'gcds-date-input--error' : ''}`}\n        {...requiredAttr}\n        aria-invalid={hasError['year'].toString()}\n        aria-description={hasError['year'] && errorMessage}\n      ></gcds-input>\n    );\n\n    const day = (\n      <gcds-input\n        name=\"day\"\n        label={i18n[lang].day}\n        inputId=\"day\"\n        type=\"number\"\n        size={2}\n        disabled={disabled}\n        value={this.dayValue}\n        onInput={e => this.handleInput(e, 'day')}\n        onChange={e => this.handleInput(e, 'day')}\n        class={`gcds-date-input__day ${hasError['day'] ? 'gcds-date-input--error' : ''}`}\n        {...requiredAttr}\n        aria-invalid={hasError['day'].toString()}\n        aria-description={hasError['day'] && errorMessage}\n      ></gcds-input>\n    );\n\n    return (\n      <Host name={name} onBlur={() => this.onBlur()}>\n        {this.validateRequiredProps() && (\n          <fieldset class=\"gcds-date-input__fieldset\" {...fieldsetAttrs}>\n            <legend id=\"date-input-legend\">\n              {legend}\n              {required ? (\n                <span class=\"legend__required\">{i18n[lang].required}</span>\n              ) : null}\n            </legend>\n            {hint ? (\n              <gcds-hint id=\"date-input-hint\" hint-id=\"date-input\">\n                {hint}\n              </gcds-hint>\n            ) : null}\n            {errorMessage ? (\n              <div>\n                <gcds-error-message\n                  id=\"date-input-error\"\n                  messageId=\"date-input\"\n                >\n                  {errorMessage}\n                </gcds-error-message>\n              </div>\n            ) : null}\n            {format == 'compact'\n              ? [month, year]\n              : lang == 'en'\n                ? [month, day, year]\n                : [day, month, year]}\n          </fieldset>\n        )}\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}