{"file":"gcds-fieldset.js","mappings":"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","names":["GcdsFieldset","i18n"],"sources":["src/components/gcds-fieldset/i18n/i18n.js","src/components/gcds-fieldset/gcds-fieldset.css?tag=gcds-fieldset&encapsulation=shadow","src/components/gcds-fieldset/gcds-fieldset.tsx"],"sourcesContent":["const I18N = {\n  en: {\n    required: 'required',\n  },\n  fr: {\n    required: 'obligatoire',\n  },\n};\n\nexport default I18N;\n","@layer reset, default, disabled;\n\n@layer reset {\n  :host {\n    display: block;\n\n    .gcds-fieldset {\n      border: 0;\n      padding: 0;\n      min-inline-size: auto\n    }\n\n    legend {\n      padding: 0;\n    }\n\n    slot {\n      display: block;\n      margin: 0;\n    }\n  }\n}\n\n@layer default {\n  .gcds-fieldset {\n    color: var(--gcds-fieldset-default-text);\n\n    legend {\n      font: var(--gcds-fieldset-font-desktop);\n      margin: var(--gcds-fieldset-legend-margin) !important;\n\n      @media only screen and (width < 48em) {\n        font: var(--gcds-fieldset-font-mobile);\n      }\n\n      .legend__required {\n        margin: var(--gcds-fieldset-legend-required-margin) !important;\n        font: var(--gcds-fieldset-legend-required-font-desktop);\n        vertical-align: middle;\n\n        @media only screen and (width < 48em) {\n          font: var(--gcds-fieldset-legend-required-font-mobile);\n        }\n      }\n    }\n  }\n}\n\n@layer disabled {\n  :host .gcds-fieldset:disabled {\n    color: var(--gcds-fieldset-disabled-text);\n\n    gcds-hint {\n      --gcds-hint-text: currentColor;\n    }\n  }\n}\n","import {\n  Component,\n  Prop,\n  Element,\n  Method,\n  Event,\n  EventEmitter,\n  Listen,\n  State,\n  Host,\n  Watch,\n  h,\n} from '@stencil/core';\nimport {\n  assignLanguage,\n  observerConfig,\n  inheritAttributes,\n} from '../../utils/utils';\nimport {\n  Validator,\n  defaultValidator,\n  ValidatorEntry,\n  getValidator,\n  requiredValidator,\n} from '../../validators';\nimport { validateFieldsetElements } from '../../validators/fieldset-validators/fieldset-validators';\nimport i18n from './i18n/i18n';\n\n@Component({\n  tag: 'gcds-fieldset',\n  styleUrl: 'gcds-fieldset.css',\n  shadow: { delegatesFocus: true },\n})\nexport class GcdsFieldset {\n  @Element() el: HTMLElement;\n\n  private shadowElement?: HTMLElement;\n\n  isDateInput: boolean = false;\n\n  _validator: Validator<string> = defaultValidator;\n\n  /**\n   * Props\n   */\n\n  /**\n   * The unique identifier for the component\n   */\n  @Prop({ reflect: true, mutable: false }) fieldsetId!: string;\n\n  /**\n   * The title for the contents of the fieldset\n   */\n  @Prop({ reflect: true, mutable: false }) legend!: string;\n\n  /**\n   * Flag the contents are required\n   */\n  @Prop({ reflect: true, mutable: false }) required: boolean;\n\n  /**\n   * Error message for invalid form elements in group.\n   */\n  @Prop({ reflect: true, mutable: true }) errorMessage: string;\n  @Watch('errorMessage')\n  validateErrorMessage() {\n    if (this.disabled) {\n      this.errorMessage = '';\n    } else if (!this.hasError && this.errorMessage) {\n      this.hasError = true;\n    } else if (this.errorMessage == '') {\n      this.hasError = false;\n    }\n  }\n\n  /**\n   * Hint displayed below the legend.\n   */\n  @Prop({ reflect: true, mutable: false }) hint: string;\n\n  /**\n   * Flag to disable fieldset and its contents\n   */\n  @Prop({ reflect: true, mutable: true }) disabled: boolean;\n\n  @Watch('disabled')\n  validateDisabledFieldset() {\n    if (this.required) {\n      this.disabled = false;\n    }\n\n    if (this.disabled == true) {\n      for (let i = 0; i < this.el.children.length; i++) {\n        this.el.children[i].setAttribute('disabled', '');\n      }\n    }\n  }\n\n  @Watch('disabled')\n  handleDisabledChange(newValue: boolean, _oldValue: boolean) {\n    if (_oldValue && newValue != _oldValue) {\n      for (let i = 0; i < this.el.children.length; i++) {\n        this.el.children[i].removeAttribute('disabled');\n      }\n    }\n  }\n\n  /**\n   * Array of validators\n   */\n  @Prop({ mutable: true }) validator: Array<\n    string | ValidatorEntry | Validator<string>\n  >;\n\n  @Watch('validator')\n  validateValidator() {\n    if (this.validator && !this.validateOn) {\n      this.validateOn = 'blur';\n    }\n  }\n\n  /**\n   * Set event to call validator\n   */\n  @Prop({ mutable: true }) validateOn: 'blur' | 'submit' | 'other';\n\n  /**\n   * State to handle errors\n   */\n  @State() hasError: boolean;\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * Set additional HTML attributes not available in component properties\n   */\n  @State() inheritedAttributes: Object = {};\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when the fieldset has a validation error.\n   */\n  @Event({}) gcdsGroupError!: EventEmitter<string>;\n\n  /**\n   * Emitted when the fieldset has a validation error.\n   */\n  @Event() gcdsGroupErrorClear!: EventEmitter<void>;\n\n  /**\n   * Call any active validators\n   */\n  @Method()\n  async validate() {\n    if (\n      !this._validator.validate(this.fieldsetId) &&\n      this._validator.errorMessage\n    ) {\n      this.errorMessage = this._validator.errorMessage[this.lang];\n      this.gcdsGroupError.emit(this.errorMessage);\n      this.gcdsError.emit({\n        id: `#${this.fieldsetId}`,\n        message: `${this.legend} - ${this.errorMessage}`,\n      });\n    } else {\n      this.errorMessage = '';\n      this.gcdsGroupErrorClear.emit();\n      this.gcdsValid.emit({ id: `#${this.fieldsetId}` });\n    }\n  }\n\n  @Listen('gcdsBlur')\n  blurValidate() {\n    if (\n      this.validator &&\n      this.validateOn == 'blur' &&\n      !this.el.matches(':focus-within')\n    ) {\n      this.validate();\n    }\n  }\n\n  /**\n   * Event listener for gcds-fieldset errors\n   */\n  @Listen('gcdsGroupError', { target: 'body' })\n  gcdsParentGroupError(e) {\n    if (\n      e.srcElement == this.el &&\n      validateFieldsetElements(this.el, this.el.children).includes(false)\n    ) {\n      this.hasError = true;\n    }\n  }\n\n  @Listen('gcdsGroupErrorClear', { target: 'body' })\n  gcdsParentGroupErrorClear(e) {\n    if (e.srcElement == this.el && this.hasError) {\n      this.hasError = false;\n    }\n  }\n\n  /**\n   * Emitted when the fieldset has a validation error.\n   */\n  @Event() gcdsError!: EventEmitter<object>;\n\n  /**\n   * Emitted when the fieldset has a validation error.\n   */\n  @Event() gcdsValid!: EventEmitter<object>;\n\n  @Listen('submit', { target: 'document' })\n  submitListener(e) {\n    if (e.target == this.el.closest('form')) {\n      if (this.validateOn && this.validateOn != 'other') {\n        this.validate();\n      }\n\n      if (this.hasError) {\n        e.preventDefault();\n      }\n    }\n  }\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n\n    this.validateDisabledFieldset();\n    this.validateErrorMessage();\n    this.validateValidator();\n\n    // Assign required validator if needed\n    if (this.el.getAttribute('data-date')) {\n      this.isDateInput = true;\n    } else {\n      requiredValidator(this.el, 'fieldset');\n    }\n\n    if (this.validator) {\n      this._validator = getValidator(this.validator);\n    }\n\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n  }\n\n  componentWillUpdate() {\n    if (this.validator) {\n      this._validator = getValidator(this.validator);\n    }\n  }\n\n  render() {\n    const {\n      lang,\n      fieldsetId,\n      legend,\n      required,\n      errorMessage,\n      hasError,\n      hint,\n      disabled,\n      inheritedAttributes,\n    } = this;\n\n    const fieldsetAttrs = {\n      disabled,\n      ...inheritedAttributes,\n    };\n\n    if (errorMessage) {\n      fieldsetAttrs['aria-describedby'] = `error-message-${fieldsetId} ${\n        fieldsetAttrs['aria-describedby']\n          ? ` ${fieldsetAttrs['aria-describedby']}`\n          : ''\n      }`;\n    }\n\n    return (\n      <Host>\n        <fieldset\n          class={`gcds-fieldset ${hasError ? 'gcds-fieldset--error' : ''}`}\n          id={fieldsetId}\n          {...fieldsetAttrs}\n          aria-labelledby={\n            hint\n              ? `legend-${fieldsetId} hint-${fieldsetId}`\n              : `legend-${fieldsetId}`\n          }\n          tabindex=\"-1\"\n          ref={element => (this.shadowElement = element as HTMLElement)}\n        >\n          <legend id={`legend-${fieldsetId}`}>\n            {legend}\n            {required ? (\n              <span class=\"legend__required\">({i18n[lang].required})</span>\n            ) : null}\n          </legend>\n\n          {hint ? <gcds-hint hint-id={fieldsetId}>{hint}</gcds-hint> : null}\n\n          {errorMessage ? (\n            <gcds-error-message messageId={fieldsetId}>\n              {errorMessage}\n            </gcds-error-message>\n          ) : null}\n          <slot></slot>\n        </fieldset>\n      </Host>\n    );\n  }\n}\n"],"version":3}