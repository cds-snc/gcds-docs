{"version":3,"names":["I18N","en","tagged","badgeError","fr","gcdsCardCss","GcdsCard","__stencil_proxyCustomElement","HTMLElement","constructor","this","cardTitleTag","errors","validateCardTitle","cardTitle","trim","push","includes","splice","indexOf","validateHref","href","validateBadge","badge","length","console","error","i18n","updateLang","observer","MutationObserver","mutations","oldValue","el","lang","observe","observerConfig","validateRequiredProps","componentWillLoad","assignLanguage","valid","logError","renderDescription","innerHTML","h","class","description","render","imgSrc","imgAlt","Element","taggedAttr","Host","key","id","size","tag","src","alt","Object","assign"],"sources":["src/components/gcds-card/i18n/i18n.js","src/components/gcds-card/gcds-card.css?tag=gcds-card&encapsulation=shadow","src/components/gcds-card/gcds-card.tsx"],"sourcesContent":["const I18N = {\n  en: {\n    tagged: 'Tagged:',\n    badgeError: 'gcds-card: The badge attribute has a character limit of 20 characters.',\n  },\n  fr: {\n    tagged: 'Baliser :',\n    badgeError: 'gcds-card: L\\'attribut badge a une limite de caractères de 20 caractères.',\n  },\n};\n\nexport default I18N;\n","@layer reset, default, link, hover, focus;\n\n@layer reset {\n  :host {\n    display: block;\n\n    * {\n      padding: 0;\n      margin: 0;\n      box-sizing: border-box;\n    }\n\n    slot {\n      display: initial;\n    }\n  }\n}\n\n@layer default {\n  :host .gcds-card {\n    background-color: var(--gcds-card-background-color);\n    display: block;\n    padding: var(--gcds-card-padding);\n    height: 100%;\n    color: var(--gcds-card-color);\n    position: relative;\n    box-shadow: var(--gcds-card-box-shadow);\n    overflow: hidden;\n    max-width: var(--gcds-card-max-width);\n\n    .gcds-badge {\n      background-color: var(--gcds-card-badge-background-color);\n      position: absolute;\n      top: 0;\n      left: 0;\n      padding: var(--gcds-card-badge-padding);\n      text-wrap: nowrap;\n\n      @media only screen and (width < 48em) {\n        padding: var(--gcds-card-badge-mobile-padding);\n      }\n    }\n\n    .gcds-card__image {\n      width: 100%;\n      margin: var(--gcds-card-image-margin);\n    }\n\n    .gcds-card__title {\n      width: fit-content;\n\n      font: var(--gcds-card-title-font-desktop);\n\n      @media only screen and (width < 48em) {\n        font: var(--gcds-card-title-font-mobile);\n      }\n\n      &:has(+ .gcds-card__description) {\n        margin: var(--gcds-card-title-margin);\n      }\n    }\n\n    .gcds-card__description {\n      --gcds-text-size-body-desktop: var(--gcds-card-description-font-desktop);\n\n      @media only screen and (width < 48em) {\n        font: var(--gcds-card-description-font-mobile);\n      }\n    }\n  }\n}\n\n@layer link {\n  :host .gcds-card gcds-link::part(link):after {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    pointer-events: auto;\n    content: '';\n  }\n}\n\n@layer hover {\n  @media (hover: hover) {\n    :host .gcds-card:hover {\n      box-shadow: var(--gcds-card-hover-box-shadow);\n      background-color: var(--gcds-card-hover-background-color);\n      cursor: pointer;\n    }\n  }\n}\n\n@layer focus {\n  :host {\n    .gcds-card:focus-within {\n      box-shadow: var(--gcds-card-focus-box-shadow);\n      outline: var(--gcds-card-focus-outline);\n      outline-offset: var(--gcds-card-focus-outline-offset);\n    }\n\n    gcds-link::part(link):focus {\n      border: var(--gcds-card-focus-link-border);\n      box-shadow: var(--gcds-card-focus-link-box-shadow);\n      color: var(--gcds-card-focus-link-color);\n      background-color: var(--gcds-card-focus-link-background-color);\n      outline: var(--gcds-card-focus-link-outline);\n      text-decoration: underline currentColor\n        var(--gcds-card-focus-link-text-decoration-thickness);\n    }\n  }\n}\n","import {\n  Element,\n  Component,\n  Host,\n  Prop,\n  h,\n  State,\n  Event,\n  EventEmitter,\n  Watch,\n} from '@stencil/core';\nimport { assignLanguage, observerConfig, logError } from '../../utils/utils';\nimport i18n from './i18n/i18n';\n\n/**\n * A card is a box containing structured, actionable content on a single topic.\n *\n * @slot default - Slot for the card description. Will overwrite the description prop if used.\n */\n@Component({\n  tag: 'gcds-card',\n  styleUrl: 'gcds-card.css',\n  shadow: true,\n})\nexport class GcdsCard {\n  @Element() el: HTMLElement;\n\n  /**\n   * The card title attribute specifies the title that appears on the card\n   */\n  @Prop({ reflect: true }) cardTitle!: string;\n  @Watch('cardTitle')\n  validateCardTitle() {\n    if (!this.cardTitle || this.cardTitle.trim() == '') {\n      this.errors.push('cardTitle');\n    } else if (this.errors.includes('cardTitle')) {\n      this.errors.splice(this.errors.indexOf('cardTitle'), 1);\n    }\n  }\n\n  /**\n   * The href attribute specifies the URL of the page the link goes to\n   */\n  @Prop({ reflect: true }) href!: string;\n  @Watch('href')\n  validateHref() {\n    if (!this.href || this.href.trim() == '') {\n      this.errors.push('href');\n    } else if (this.errors.includes('href')) {\n      this.errors.splice(this.errors.indexOf('href'), 1);\n    }\n  }\n\n  /**\n   * The card title tag property specifies the HTML heading element for the title.\n   * This property does not modify the font size. It is used to assign the heading level\n   * in order to maintain heading hierarchy and accessibility for assistive technologies.\n   */\n  @Prop() cardTitleTag: 'h3' | 'h4' | 'h5' | 'h6' | 'a' = 'a';\n\n  /**\n   * The description attribute specifies the body of text that appears on the card\n   */\n  @Prop({ reflect: true }) description: string;\n\n  /**\n   * The badge attribute specifies the badge text that appears in the top left corner of the card. 20 character limit.\n   */\n  @Prop({ reflect: true, mutable: true }) badge: string;\n  @Watch('badge')\n  validateBadge() {\n    if (this.badge && this.badge.length > 20) {\n      console.error(`${i18n['en'].badgeError} | ${i18n['fr'].badgeError}`);\n      this.errors.push('badge');\n    } else if (this.errors.includes('badge')) {\n      this.errors.splice(this.errors.indexOf('badge'), 1);\n    }\n  }\n\n  /**\n   * The img src attribute specifies the path to the image\n   */\n  @Prop({ reflect: true }) imgSrc: string;\n\n  /**\n   * The img alt attribute specifies the alt text for the image provided, if none, image will be decorative\n   */\n  @Prop({ reflect: true }) imgAlt: string;\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * State to track validation on properties\n   * Contains a list of properties that have an error associated with them\n   */\n  @State() errors: Array<string> = [];\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when the card has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the card loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  /**\n   * Emitted when the card has been clicked. Contains the href in the event detail.\n   */\n  @Event() gcdsClick!: EventEmitter<string>;\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  /*\n   * Validate required properties\n   */\n  private validateRequiredProps() {\n    this.validateCardTitle();\n    this.validateHref();\n\n    if (this.errors.includes('href') || this.errors.includes('cardTitle')) {\n      return false;\n    }\n\n    return true;\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n\n    this.validateBadge();\n\n    const valid = this.validateRequiredProps();\n\n    if (!valid) {\n      logError('gcds-card', this.errors, ['badge']);\n    }\n  }\n\n  private get renderDescription() {\n    if (this.el.innerHTML.trim() != '') {\n      return (\n        <div class=\"gcds-card__description\">\n          <slot></slot>\n        </div>\n      );\n    } else if (this.description) {\n      return (\n        <div class=\"gcds-card__description\">\n          <gcds-text margin-bottom=\"0\">{this.description}</gcds-text>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    const {\n      cardTitle,\n      cardTitleTag,\n      href,\n      badge,\n      imgSrc,\n      imgAlt,\n      renderDescription,\n      lang,\n      errors,\n    } = this;\n\n    const Element = cardTitleTag;\n\n    const taggedAttr = {};\n\n    if (badge) {\n      taggedAttr['aria-describedby'] = 'gcds-badge';\n    }\n\n    if (this.validateRequiredProps()) {\n      return (\n        <Host>\n          <div class=\"gcds-card\">\n            {badge && !errors.includes('badge') && (\n              <gcds-text\n                id=\"gcds-badge\"\n                class=\"gcds-badge\"\n                text-role=\"light\"\n                margin-bottom=\"0\"\n                size=\"small\"\n              >\n                <strong>\n                  <gcds-sr-only tag=\"span\">{i18n[lang].tagged}</gcds-sr-only>\n                  {badge}\n                </strong>\n              </gcds-text>\n            )}\n            {imgSrc && (\n              <img\n                src={imgSrc}\n                alt={imgAlt ? imgAlt : ''}\n                class=\"gcds-card__image\"\n              />\n            )}\n            {Element != 'a' ? (\n              <Element class=\"gcds-card__title\" {...taggedAttr}>\n                <gcds-link href={href}>{cardTitle}</gcds-link>\n              </Element>\n            ) : (\n              <gcds-link href={href} class=\"gcds-card__title\" {...taggedAttr}>\n                {cardTitle}\n              </gcds-link>\n            )}\n            {renderDescription}\n          </div>\n        </Host>\n      );\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}