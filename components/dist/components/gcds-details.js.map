{"version":3,"names":["gcdsDetailsCss","GcdsDetails","__stencil_proxyCustomElement","HTMLElement","constructor","this","open","handleToggle","ev","target","handleBeforePrint","toggle","detailsElement","setAttribute","handleAfterPrint","_a","getAttribute","removeAttribute","render","detailsTitle","h","Host","key","class","toString","onBlur","gcdsBlur","emit","onFocus","gcdsFocus","onClick","e","event","emitEvent","gcdsClick","id","onToggle","ref","element"],"sources":["src/components/gcds-details/gcds-details.css?tag=gcds-details&encapsulation=shadow","src/components/gcds-details/gcds-details.tsx"],"sourcesContent":["@layer reset, default, hover, focus, print;\n\n@layer reset {\n  :host {\n    display: block;\n\n    .details__summary {\n      display: block;\n      border-color: transparent;\n      background-color: transparent;\n      cursor: pointer;\n    }\n\n    .details__panel {\n      slot {\n        display: initial;\n      }\n\n      ::slotted(*:first-child) {\n        margin-block-start: 0;\n      }\n\n      ::slotted(*:last-child) {\n        margin-block-end: 0;\n      }\n\n      ::slotted(ol),\n      ::slotted(ul) {\n        padding: 0;\n      }\n    }\n  }\n}\n\n@layer default {\n  :host .gcds-details {\n    .details__summary {\n      position: relative;\n      padding: var(--gcds-details-summary-padding);\n      color: var(--gcds-details-default-text);\n      font: var(--gcds-details-font-desktop);\n      text-align: left;\n      text-decoration-style: solid;\n      text-decoration-line: underline;\n      text-decoration-color: currentColor;\n      text-decoration-thickness: var(\n        --gcds-details-default-decoration-thickness\n      );\n      text-underline-offset: 0.2em;\n      transition:\n        background-color 0.15s ease-in-out,\n        color 0.15s ease-in-out;\n\n      @media only screen and (width < 48em) {\n        font: var(--gcds-details-font-mobile);\n      }\n\n      &:before {\n        position: absolute;\n        top: var(--gcds-details-summary-arrow-top);\n        left: var(--gcds-details-summary-arrow-left);\n        width: 0;\n        height: 0;\n        content: '';\n        border-block-start: var(--gcds-details-summary-arrow-border-top-bottom)\n          solid transparent;\n        border-block-end: var(--gcds-details-summary-arrow-border-top-bottom)\n          solid transparent;\n        border-inline-start: var(--gcds-details-summary-arrow-border-left) solid\n          currentColor;\n        transition: transform 0.15s ease-in-out;\n      }\n\n      &[aria-expanded='false'] + .details__panel {\n        clip-path: inset(100%);\n        clip: rect(1px, 1px, 1px, 1px);\n        height: 1px;\n        overflow: hidden;\n        position: absolute;\n        white-space: nowrap;\n        width: 1px;\n      }\n\n      &[aria-expanded='true']:before {\n        transform: rotate(90deg);\n      }\n    }\n\n    .details__panel {\n      position: relative;\n      margin: var(--gcds-details-panel-margin);\n      padding: var(--gcds-details-panel-padding);\n\n      summary {\n        display: none;\n      }\n\n      &:before {\n        position: absolute;\n        display: block;\n        top: 0;\n        left: 0;\n        width: var(--gcds-details-panel-border-width);\n        height: 100%;\n        content: '';\n        background-color: var(--gcds-details-panel-border-color);\n      }\n\n      ::slotted(*) {\n        font: var(--gcds-details-font-desktop);\n\n        @media only screen and (width < 48em) {\n          font: var(--gcds-details-font-mobile);\n        }\n      }\n\n      ::slotted(*:not(:last-child)) {\n        margin-block-start: 0 !important;\n        margin-block-end: var(--gcds-details-panel-slotted-margin) !important;\n      }\n\n      ::slotted(ol),\n      ::slotted(ul) {\n        margin-inline-start: var(\n          --gcds-details-panel-slotted-margin\n        ) !important;\n      }\n\n      ::slotted(small) {\n        font: var(--gcds-details-font-small-desktop);\n\n        @media only screen and (width < 48em) {\n          font: var(--gcds-details-font-small-mobile);\n        }\n      }\n    }\n  }\n}\n\n@layer hover {\n  @media (hover: hover) {\n    :host .gcds-details .details__summary:hover:not(:focus) {\n      color: var(--gcds-details-hover-text);\n      text-underline-offset: 0.2em;\n      text-decoration-thickness: var(--gcds-details-hover-decoration-thickness);\n\n      &:before {\n        color: var(--gcds-details-hover-text);\n      }\n    }\n  }\n}\n\n@layer focus {\n  :host .gcds-details .details__summary:focus {\n    border-radius: var(--gcds-details-focus-border-radius);\n    background-color: var(--gcds-details-focus-background);\n    color: var(--gcds-details-focus-text);\n    box-shadow: var(--gcds-details-focus-box-shadow);\n    outline-offset: var(--gcds-details-focus-outline-offset);\n    outline: var(--gcds-details-focus-outline);\n    text-decoration: none;\n  }\n}\n\n@layer print {\n  /* Display details component open by default for print */\n  @media print {\n    :host .gcds-details {\n      .details__summary {\n        font-weight: var(--gcds-details-print-summary-font-weight);\n        text-decoration: none;\n        color: var(--gcds-details-print-summary-text);\n\n        &:before {\n          transform: rotate(90deg);\n        }\n      }\n\n      .details__panel {\n        clip-path: none;\n        clip: auto;\n        height: auto;\n        overflow: visible;\n        position: static;\n        white-space: normal;\n        width: auto;\n        display: block;\n        /* Note: Logical properties are not yet supported in print */\n        border-left: var(--gcds-details-panel-border-width) solid\n          var(--gcds-details-panel-border-color);\n      }\n    }\n  }\n}\n","import {\n  Component,\n  Element,\n  Host,\n  Prop,\n  Method,\n  Event,\n  EventEmitter,\n  Listen,\n  h,\n} from '@stencil/core';\nimport { emitEvent } from '../../utils/utils';\n\n@Component({\n  tag: 'gcds-details',\n  styleUrl: 'gcds-details.css',\n  shadow: true,\n})\nexport class GcdsDetails {\n  @Element() el: HTMLElement;\n\n  private detailsElement?: HTMLDetailsElement;\n\n  /**\n   * Props\n   */\n\n  /**\n   * The details title summarizes the panel content.\n   */\n  @Prop() detailsTitle!: string;\n\n  /**\n   * Defines if the details panel is open by default or not.\n   */\n  @Prop({ mutable: true, reflect: true }) open?: boolean = false;\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when the details has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the details loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  /**\n   * Emitted when the details has been clicked.\n   */\n  @Event() gcdsClick!: EventEmitter<void>;\n\n  /**\n   * Listen to beforeprint and afterprint events to handle details state\n   * when printing. This ensures that the details are open when printing,\n   * and closed after printing if they were closed before.\n   */\n  @Listen('beforeprint', { target: 'window' })\n  handleBeforePrint() {\n    if (!this.open) {\n      this.toggle();\n      this.detailsElement.setAttribute('data-was-closed', 'true');\n    }\n  }\n  @Listen('afterprint', { target: 'window' })\n  handleAfterPrint() {\n    if (this.detailsElement?.getAttribute('data-was-closed') === 'true') {\n      this.toggle();\n      this.detailsElement.removeAttribute('data-was-closed');\n    }\n  }\n\n  /**\n   * Methods\n   */\n\n  /*\n   * Toggle details open or closed\n   */\n  @Method()\n  async toggle() {\n    this.open = !this.open;\n    this.detailsElement.open = this.open;\n  }\n\n  /*\n   * Handle the details being toggled by other means (e.g., ctrl+f)\n   */\n  private handleToggle = (ev: Event) => {\n    this.open = !this.open;\n    this.open = (ev.target as HTMLDetailsElement).open;\n  };\n\n  render() {\n    const { detailsTitle, open } = this;\n\n    return (\n      <Host>\n        <div class=\"gcds-details\">\n          <button\n            aria-expanded={open.toString()}\n            aria-controls=\"details__panel\"\n            onBlur={() => this.gcdsBlur.emit()}\n            onFocus={() => this.gcdsFocus.emit()}\n            onClick={e => {\n              const event = emitEvent(e, this.gcdsClick);\n              if (event) {\n                this.toggle();\n              }\n            }}\n            class=\"details__summary\"\n            id=\"details__summary\"\n          >\n            {detailsTitle}\n          </button>\n          <details\n            open={open}\n            id=\"details__panel\"\n            class=\"details__panel\"\n            aria-labelledby=\"details__summary\"\n            onToggle={ev => this.handleToggle(ev)}\n            ref={element =>\n              (this.detailsElement = element as HTMLDetailsElement)\n            }\n          >\n            <summary>{detailsTitle}</summary>\n            <slot></slot>\n          </details>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"oGAAA,MAAMA,EAAiB,6nI,MCkBVC,EAAWC,EAAA,MAAAD,UAAAE,EALxB,WAAAC,G,2JAsB0CC,KAAIC,KAAa,MAyDjDD,KAAAE,aAAgBC,IACtBH,KAAKC,MAAQD,KAAKC,KAClBD,KAAKC,KAAQE,EAAGC,OAA8BH,IAAI,CA0CrD,CA1EC,iBAAAI,GACE,IAAKL,KAAKC,KAAM,CACdD,KAAKM,SACLN,KAAKO,eAAeC,aAAa,kBAAmB,O,EAIxD,gBAAAC,G,MACE,KAAIC,EAAAV,KAAKO,kBAAc,MAAAG,SAAA,SAAAA,EAAEC,aAAa,sBAAuB,OAAQ,CACnEX,KAAKM,SACLN,KAAKO,eAAeK,gBAAgB,kB,EAYxC,YAAMN,GACJN,KAAKC,MAAQD,KAAKC,KAClBD,KAAKO,eAAeN,KAAOD,KAAKC,I,CAWlC,MAAAY,GACE,MAAMC,aAAEA,EAAYb,KAAEA,GAASD,KAE/B,OACEe,EAACC,EAAI,CAAAC,IAAA,4CACHF,EAAK,OAAAE,IAAA,2CAAAC,MAAM,gBACTH,EAAA,UAAAE,IAAA,2DACiBhB,EAAKkB,WAAU,gBAChB,iBACdC,OAAQ,IAAMpB,KAAKqB,SAASC,OAC5BC,QAAS,IAAMvB,KAAKwB,UAAUF,OAC9BG,QAASC,IACP,MAAMC,EAAQC,EAAUF,EAAG1B,KAAK6B,WAChC,GAAIF,EAAO,CACT3B,KAAKM,Q,GAGTY,MAAM,mBACNY,GAAG,oBAEFhB,GAEHC,EAAA,WAAAE,IAAA,2CACEhB,KAAMA,EACN6B,GAAG,iBACHZ,MAAM,iBACU,qCAChBa,SAAU5B,GAAMH,KAAKE,aAAaC,GAClC6B,IAAKC,GACFjC,KAAKO,eAAiB0B,GAGzBlB,EAAA,WAAAE,IAAA,4CAAUH,GACVC,EAAA,QAAAE,IAAA,+C","ignoreList":[]}