{"version":3,"names":["isCheckboxObject","obj","validKeys","objKeys","Object","keys","hasValidTypes","id","label","value","undefined","hint","checked","hasOnlyValidKeys","every","key","includes","validateOptionsArray","optionsArr","invalidOptionsArr","length","some","checkbox","cleanUpValues","element","availableValues","forEach","push","filter","item","renderCheckbox","emitEvent","handleInput","name","disabled","hasError","errorMessage","gcdsFocus","gcdsInput","gcdsChange","gcdsClick","gcdsBlur","required","isGroup","lang","onBlurValidate","attrsInput","labelAttrs","hintID","h","class","assign","type","onBlur","emit","onFocus","onChange","e","onInput","onClick","stopImmediatePropagation","stopPropagation","messageId","gcdsCheckboxesCss","GcdsCheckboxes","__stencil_proxyCustomElement","HTMLElement","constructor","this","_validator","defaultValidator","validateOn","inheritedAttributes","errors","validate","customEvent","isInputEvent","target","options","JSON","parse","map","check","internals","setFormValue","toString","validateName","handleErrors","validateLegend","legend","validateOptions","invalidOptions","assignOptionsArray","validateDisabledCheckbox","validateValue","newValue","Array","isArray","logError","el","validateErrorMessage","validateValidator","getValidator","validator","validateHasError","handleValidationResult","gcdsError","gcdsValid","formdataListener","data","formData","indexOf","set","append","submitListener","closest","preventDefault","formResetCallback","initialState","formStateRestoreCallback","state","split","watchLang","oldValue","validateRequiredProps","isValid","componentWillLoad","assignLanguage","valid","requiredValidator","_a","inheritAttributes","shadowElement","componentDidUpdate","trim","optionsCheck","render","fieldsetAttrs","tabindex","Host"],"sources":["src/components/gcds-checkboxes/checkbox.tsx","src/components/gcds-checkboxes/gcds-checkboxes.css?tag=gcds-checkboxes&encapsulation=shadow","src/components/gcds-checkboxes/gcds-checkboxes.tsx"],"sourcesContent":["import { h } from '@stencil/core';\n\nexport type CheckboxObject = {\n  id: string;\n  label: string;\n  value?: string;\n  hint?: string;\n  checked?: boolean | string;\n};\n\n/* Check if passed object matches required CheckboxObject type\n * @param obj - object to check\n */\nexport function isCheckboxObject(obj: CheckboxObject) {\n  if (typeof obj !== 'object' || obj === null) return false;\n\n  const validKeys = ['id', 'label', 'value', 'hint', 'checked', 'required'];\n  const objKeys = Object.keys(obj);\n\n  // Check if all properties match the expected type\n  const hasValidTypes =\n    typeof obj.id === 'string' &&\n    typeof obj.label === 'string' &&\n    (obj.value === undefined || typeof obj.value === 'string') &&\n    (obj.hint === undefined || typeof obj.hint === 'string') &&\n    (obj.checked === undefined || typeof obj.checked === 'boolean');\n\n  // Ensure no extra properties exist\n  const hasOnlyValidKeys = objKeys.every(key => validKeys.includes(key));\n\n  return hasValidTypes && hasOnlyValidKeys;\n}\n\n/* Loop through the optionsArr and check if each option/checkbox is formatted correctly\n * @param optionsArr - array of objects to be checked\n */\nexport function validateOptionsArray(optionsArr) {\n  let invalidOptionsArr = false;\n\n  if (optionsArr && optionsArr.length >= 1) {\n    invalidOptionsArr = optionsArr.some(\n      checkbox => !isCheckboxObject(checkbox),\n    );\n  } else if (optionsArr && optionsArr.length == 0) {\n    invalidOptionsArr = true;\n  }\n\n  return invalidOptionsArr;\n}\n\n/* Loop through manually assigned value to check if it is available in rendered checkboxes\n * @param optionsArr - array of checkbox objects to compare to\n * @param element - the checkboxes element\n */\nexport function cleanUpValues(optionsArr, element) {\n  const availableValues = [];\n  optionsArr.forEach(checkbox => {\n    availableValues.push(checkbox.value ? checkbox.value : 'on');\n\n    if (\n      (checkbox.checked == 'true' || checkbox.checked === true) &&\n      !(element.value as Array<string>).includes(checkbox.value || 'on')\n    ) {\n      element.value = [\n        ...(element.value as Array<string>),\n        checkbox.value ? checkbox.value : 'on',\n      ];\n    }\n  });\n\n  // Remove any values that are not available in the inputs\n  (element.value as Array<string>)\n    .filter(value => !availableValues.includes(value))\n    .forEach(value => {\n      element.value = (element.value as Array<string>).filter(\n        item => item !== value,\n      );\n    });\n}\n\nexport const renderCheckbox = (checkbox, element, emitEvent, handleInput) => {\n  const {\n    name,\n    disabled,\n    hasError,\n    errorMessage,\n    gcdsFocus,\n    gcdsInput,\n    gcdsChange,\n    gcdsClick,\n    gcdsBlur,\n    required,\n    hint,\n    isGroup,\n    lang,\n    value,\n    onBlurValidate,\n  } = element;\n\n  const attrsInput = {\n    name: name,\n    id: checkbox.id,\n    disabled: disabled,\n    required: checkbox.required,\n    value: checkbox.value,\n  };\n\n  const labelAttrs = {\n    'label': checkbox.label,\n    'label-for': checkbox.id,\n    lang,\n  };\n\n  if (!isGroup && required) {\n    labelAttrs['required'] = required;\n    attrsInput['required'] = required;\n  }\n\n  if (checkbox.hint) {\n    const hintID = `hint-${checkbox.id}`;\n    attrsInput['aria-describedby'] = `${hintID}${\n      attrsInput['aria-describedby'] ? `${attrsInput['aria-describedby']}` : ''\n    }`;\n  }\n\n  if (value.includes(checkbox.value)) {\n    attrsInput['checked'] = true;\n  }\n\n  if (hasError) {\n    attrsInput['aria-invalid'] = 'true';\n    attrsInput['aria-description'] = errorMessage;\n  }\n\n  return (\n    <div\n      class={`gcds-checkbox ${disabled ? 'gcds-checkbox--disabled' : ''} ${\n        hasError ? 'gcds-checkbox--error' : ''\n      }`}\n    >\n      <input\n        type=\"checkbox\"\n        {...attrsInput}\n        onBlur={isGroup ? () => gcdsBlur.emit() : onBlurValidate}\n        onFocus={() => gcdsFocus.emit()}\n        onChange={e => handleInput(e, gcdsChange)}\n        onInput={e => handleInput(e, gcdsInput)}\n        onClick={e =>\n          !disabled ? emitEvent(e, gcdsClick) : e.stopImmediatePropagation()\n        }\n      />\n\n      <gcds-label\n        {...labelAttrs}\n        onClick={e => e.stopPropagation()}\n      ></gcds-label>\n\n      {checkbox.hint || (!isGroup && hint) ? (\n        <gcds-hint hint-id={checkbox.id}>\n          {!isGroup && hint ? hint : checkbox.hint}\n        </gcds-hint>\n      ) : null}\n\n      {!isGroup && errorMessage ? (\n        <gcds-error-message messageId={checkbox.id}>\n          {errorMessage}\n        </gcds-error-message>\n      ) : null}\n    </div>\n  );\n};\n","@layer reset, default, disabled, error, focus;\n\n@layer reset {\n  :host {\n    display: block;\n\n    .gcds-checkboxes__fieldset {\n      border: 0;\n      padding: 0;\n      min-inline-size: auto;\n\n      legend {\n        padding: 0;\n      }\n    }\n\n    .gcds-checkbox {\n      padding: 0;\n\n      gcds-label {\n        display: block;\n        & > label {\n          &:before,\n          &:after {\n            cursor: pointer;\n            content: '';\n            box-sizing: border-box;\n            position: absolute;\n          }\n        }\n      }\n    }\n  }\n}\n\n@layer default {\n  :host {\n    .gcds-checkboxes__fieldset {\n      margin: var(--gcds-checkbox-fieldset-margin);\n\n      .gcds-checkboxes__legend {\n        font: var(--gcds-checkbox-legend-font-desktop);\n        margin: var(--gcds-checkbox-legend-margin);\n\n        .legend__required {\n          font: var(--gcds-checkbox-legend-required-font-desktop);\n        }\n\n        @media only screen and (width < 48em) {\n          font: var(--gcds-checkbox-legend-font-mobile);\n\n          .legend__required {\n            font: var(--gcds-checkbox-legend-required-font-mobile);\n          }\n        }\n\n        &:not(:has(+ gcds-hint)) {\n          margin: var(--gcds-checkbox-legend-hint-margin);\n        }\n      }\n    }\n\n    .gcds-checkbox {\n      position: relative;\n      max-width: var(--gcds-checkbox-max-width);\n      min-height: calc(\n        var(--gcds-checkbox-input-height-and-width) -\n          var(--gcds-checkbox-padding)\n      );\n      font: var(--gcds-checkbox-font);\n      color: var(--gcds-checkbox-default-text);\n      margin: var(--gcds-checkbox-margin) !important;\n      padding: var(--gcds-checkbox-padding) 0 0;\n      transition: color ease-in-out 0.15s;\n\n      :is(gcds-label, gcds-hint, gcds-error-message) {\n        padding: var(--gcds-checkbox-label-padding) !important;\n      }\n\n      gcds-hint::part(hint) {\n        margin: 0;\n      }\n\n      input,\n      gcds-label:before,\n      gcds-label:after {\n        position: absolute;\n      }\n\n      input,\n      gcds-label > label:before {\n        top: 0;\n        left: 0;\n        width: var(--gcds-checkbox-input-height-and-width);\n        height: var(--gcds-checkbox-input-height-and-width);\n      }\n\n      input {\n        opacity: 0;\n      }\n\n      gcds-label > label {\n        width: fit-content;\n        --gcds-label-font-desktop: var(--gcds-checkbox-label-font-desktop);\n        --gcds-label-font-mobile: var(--gcds-checkbox-label-font-mobile);\n\n        &:before {\n          background-color: var(--gcds-checkbox-default-background);\n          border: var(--gcds-checkbox-input-border-width) solid currentcolor;\n          border-radius: var(--gcds-checkbox-input-border-radius);\n          transition:\n            border-color ease-in-out 0.15s,\n            box-shadow ease-in-out 0.15s,\n            outline ease-in-out 0.15s;\n        }\n\n        &:after {\n          border: var(--gcds-checkbox-check-border-width) solid currentcolor;\n          border-inline-start: 0 !important;\n          border-block-start: 0 !important;\n          height: var(--gcds-checkbox-check-height);\n          width: var(--gcds-checkbox-check-width);\n          left: var(--gcds-checkbox-check-left);\n          opacity: 0;\n          top: var(--gcds-checkbox-check-top);\n          transform: rotate(40deg);\n        }\n      }\n\n      input:checked + gcds-label > label:after {\n        opacity: 1;\n      }\n    }\n  }\n}\n\n@layer disabled {\n  :host .gcds-checkbox.gcds-checkbox--disabled {\n    color: var(--gcds-checkbox-disabled-text);\n\n    gcds-label > label {\n      --gcds-label-text: currentColor;\n      cursor: not-allowed;\n\n      &:before,\n      &:after {\n        cursor: not-allowed;\n      }\n\n      &:before {\n        border-color: currentcolor;\n        background-color: var(--gcds-checkbox-disabled-background);\n      }\n    }\n\n    gcds-hint {\n      --gcds-hint-text: currentColor;\n    }\n  }\n}\n\n@layer error {\n  :host\n    .gcds-checkbox.gcds-checkbox--error:not(:focus-within)\n    gcds-label\n    > label {\n    &:before {\n      border-color: var(--gcds-checkbox-danger-border);\n    }\n\n    &:after {\n      color: var(--gcds-checkbox-danger-border);\n    }\n  }\n}\n\n@layer focus {\n  :host .gcds-checkbox:focus-within {\n    input:focus + gcds-label > label:before {\n      color: var(--gcds-checkbox-focus-color);\n      outline: var(--gcds-checkbox-focus-outline-width) solid currentcolor;\n      outline-offset: var(--gcds-checkbox-input-border-width);\n      box-shadow: var(--gcds-checkbox-focus-box-shadow);\n      background: var(--gcds-checkbox-focus-background);\n    }\n\n    input:focus + gcds-label > label:after {\n      color: var(--gcds-checkbox-focus-color);\n    }\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  Listen,\n  Method,\n  State,\n  Prop,\n  Watch,\n  Host,\n  h,\n  AttachInternals,\n} from '@stencil/core';\nimport {\n  assignLanguage,\n  emitEvent,\n  inheritAttributes,\n  logError,\n  handleErrors,\n  isValid,\n  handleValidationResult,\n} from '../../utils/utils';\nimport {\n  Validator,\n  defaultValidator,\n  ValidatorEntry,\n  getValidator,\n  requiredValidator,\n} from '../../validators';\nimport {\n  CheckboxObject,\n  cleanUpValues,\n  renderCheckbox,\n  validateOptionsArray,\n} from './checkbox';\n\n/**\n * Checkboxes provide a set of options for multiple responses.\n */\n@Component({\n  tag: 'gcds-checkboxes',\n  styleUrl: 'gcds-checkboxes.css',\n  shadow: { delegatesFocus: true },\n  formAssociated: true,\n})\nexport class GcdsCheckboxes {\n  @Element() el: HTMLGcdsCheckboxesElement;\n\n  @AttachInternals()\n  internals: ElementInternals;\n\n  private initialState?: string | string[];\n\n  private shadowElement?: HTMLElement;\n\n  private optionsArr;\n  private isGroup = false;\n\n  _validator: Validator<string | string[]> = defaultValidator;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Name attribute for a checkboxes element.\n   */\n  @Prop({ reflect: true, mutable: false }) name!: string;\n\n  @Watch('name')\n  validateName() {\n    this.errors = handleErrors(this.errors, 'name', this.name);\n  }\n\n  /**\n   * Set the legend for fieldset form group.\n   */\n  @Prop({ reflect: true, mutable: false }) legend: string;\n\n  @Watch('legend')\n  validateLegend() {\n    if (this.isGroup) {\n      this.errors = handleErrors(this.errors, 'legend', this.legend);\n    }\n  }\n\n  /**\n   * Options to render checkboxes buttons\n   */\n  @Prop({ mutable: true }) options!: string | Array<CheckboxObject>;\n\n  @Watch('options')\n  validateOptions() {\n    let invalidOptions = false;\n\n    // Assign optionsArr based on valid options property\n    invalidOptions = this.assignOptionsArray();\n\n    // Check if each checkbox object is formatted correctly\n    if (this.optionsArr && !invalidOptions) {\n      invalidOptions = validateOptionsArray(this.optionsArr);\n\n      // Assign if isGroup logic more than one checkbox object\n      if (this.optionsArr && this.optionsArr.length > 1) {\n        this.isGroup = true;\n      }\n    }\n\n    // Log error if invalidOptions\n    this.errors = handleErrors(\n      this.errors,\n      'options',\n      this.optionsArr,\n      invalidOptions,\n    );\n  }\n\n  /**\n   * Specifies if the checkboxes are required or not.\n   */\n  @Prop({ reflect: true, mutable: false }) required: boolean;\n\n  /**\n   * Specifies if the checkboxes are disabled or not.\n   */\n  @Prop({ reflect: true, mutable: true }) disabled: boolean;\n\n  @Watch('disabled')\n  validateDisabledCheckbox() {\n    if (this.required) {\n      this.disabled = false;\n    }\n  }\n\n  /**\n   * Value for checkboxes component.\n   */\n  @Prop({ reflect: true, mutable: true }) value: string | Array<string> = [];\n\n  @Watch('value')\n  validateValue(newValue) {\n    // Convert string to array\n    if (!Array.isArray(newValue)) {\n      try {\n        this.value = JSON.parse(newValue);\n      } catch (e) {\n        logError('gcds-checkboxes', ['Invalid array for value']);\n        this.value = [];\n      }\n    } else if (this.optionsArr) {\n      // Remove any manually set values that do not match available inputs\n      cleanUpValues(this.optionsArr, this.el);\n\n      // Set form value only when a value is assigned\n      if ((this.value as string[]).length > 0) {\n        this.internals.setFormValue(this.value.toString());\n      }\n    }\n  }\n\n  /**\n   * Set this to display an error message for invalid <gcds-checkboxes>\n   */\n  @Prop({ reflect: true, mutable: true }) errorMessage: string;\n\n  @Watch('errorMessage')\n  validateErrorMessage() {\n    if (this.disabled) {\n      this.errorMessage = '';\n    } else {\n      this.hasError = this.errorMessage ? !this.hasError : false;\n    }\n  }\n\n  /**\n   * Hint displayed below the label.\n   */\n  @Prop({ reflect: true, mutable: true }) hint: string;\n\n  /**\n   * Array of validators\n   */\n  @Prop({ mutable: true }) validator: Array<\n    string | ValidatorEntry | Validator<string>\n  >;\n\n  @Watch('validator')\n  validateValidator() {\n    this._validator = getValidator(this.validator);\n  }\n\n  /**\n   * Set event to call validator\n   */\n  @Prop({ mutable: true }) validateOn: 'blur' | 'submit' | 'other' = 'blur';\n\n  /**\n   * Set additional HTML attributes not available in component properties\n   */\n  @State() inheritedAttributes: Object = {};\n\n  /**\n   * Specifies if the checkbox is invalid.\n   */\n  @State() hasError: boolean;\n\n  @Watch('hasError')\n  validateHasError() {\n    if (this.disabled) {\n      this.hasError = false;\n    }\n  }\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * State to track validation on properties\n   * Contains a list of properties that have an error associated with them\n   */\n  @State() errors: Array<string> = [];\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when the checkbox has been clicked.\n   */\n  @Event() gcdsClick!: EventEmitter<void>;\n\n  /**\n   * Emitted when the checkbox has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the checkbox loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  private onBlurValidate = () => {\n    if (this.validateOn == 'blur') {\n      this.validate();\n    }\n\n    this.gcdsBlur.emit();\n  };\n\n  /**\n   * Emitted when a checkbox has been inputted. Contains the new value in the event detail.\n   */\n  @Event() gcdsInput: EventEmitter<string[]>;\n\n  /**\n   * Emitted when a checkbox has been changed. Contains the new value in the event detail.\n   */\n  @Event() gcdsChange: EventEmitter<string[]>;\n\n  /**\n   * Emitted when the checkbox has a validation error.\n   */\n  @Event() gcdsError!: EventEmitter<object>;\n\n  /**\n   * Emitted when the checkbox has a validation error.\n   */\n  @Event() gcdsValid!: EventEmitter<object>;\n\n  /**\n   * Call any active validators\n   */\n  @Method()\n  async validate() {\n    handleValidationResult(\n      this.el as HTMLGcdsCheckboxesElement,\n      this._validator.validate(this.value),\n      this.isGroup ? this.legend : this.optionsArr[0].label,\n      this.gcdsError,\n      this.gcdsValid,\n      this.lang,\n    );\n  }\n\n  /*\n   * FormData listener to append values like native checkboxes\n   */\n  @Listen('formdata', { target: 'document' })\n  formdataListener(e) {\n    const data = e.formData;\n\n    (this.value as string[]).forEach(value => {\n      // Set formdata for first entry to remove array\n      if ((this.value as string[]).indexOf(value) === 0) {\n        data.set(this.name, value);\n      } else {\n        data.append(this.name, value);\n      }\n    });\n  }\n\n  // Submit validation handler\n  @Listen('submit', { target: 'document' })\n  submitListener(e) {\n    if (e.target == this.el.closest('form')) {\n      if (this.validateOn && this.validateOn != 'other') {\n        this.validate();\n      }\n\n      if (this.hasError && this.validateOn != 'other') {\n        e.preventDefault();\n      }\n    }\n  }\n\n  /*\n   * Form internal functions\n   */\n  formResetCallback() {\n    if (this.value != this.initialState) {\n      this.value = this.initialState;\n    }\n  }\n\n  formStateRestoreCallback(state) {\n    this.internals.setFormValue(state);\n    this.value = [...state.split(',')];\n  }\n\n  /*\n   * Observe lang attribute change\n   */\n  @Watch('lang')\n  watchLang(newValue, oldValue) {\n    if (newValue !== oldValue) {\n      this.lang = newValue;\n    }\n  }\n\n  /*\n   * Validate required properties\n   */\n  private validateRequiredProps() {\n    this.validateOptions();\n    this.validateValue(this.value);\n    this.validateLegend();\n    this.validateName();\n\n    return isValid(this.errors, ['name', 'legend', 'options']);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    const valid = this.validateRequiredProps();\n\n    this.validateDisabledCheckbox();\n    this.validateHasError();\n    this.validateErrorMessage();\n\n    // Assign required validator if needed\n    requiredValidator(\n      this.el,\n      this.isGroup ? 'checkboxGroup' : 'checkboxSingle',\n    );\n\n    this.validateValidator();\n\n    // Assign checkbox hint to component hint if not group\n    if (\n      !this.isGroup &&\n      this.optionsArr &&\n      this.optionsArr[0]?.hint &&\n      !this.hint\n    ) {\n      this.hint = this.optionsArr[0].hint;\n    }\n\n    if (!valid) {\n      logError('gcds-checkboxes', this.errors);\n    }\n\n    this.initialState = this.value;\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n  }\n\n  async componentDidUpdate() {\n    // Validate props again if changed after render\n    const valid = this.validateRequiredProps();\n\n    if (!valid) {\n      logError('gcds-checkboxes', this.errors);\n    }\n  }\n\n  // Handle input and change events\n  private handleInput = (e, customEvent) => {\n    const isInputEvent = e.type === 'input';\n    if (isInputEvent) {\n      const target = e.target as HTMLInputElement;\n      if (target.checked) {\n        this.value = [...(this.value as Array<string>), target.value];\n      } else {\n        // Modify options to prevent re-adding prechecked values when user unchecks\n        this.options = (\n          typeof this.options === 'string'\n            ? JSON.parse(this.options as string)\n            : (this.options as CheckboxObject[])\n        ).map(check =>\n          check.value === target.value ? { ...check, checked: false } : check,\n        );\n\n        // Remove item from value array when unchecked\n        this.value = (this.value as Array<string>).filter(\n          item => item !== target.value,\n        );\n      }\n\n      // Keep form-associated value in sync\n      if ((this.value as string[]).length > 0) {\n        this.internals.setFormValue(this.value.toString());\n      } else {\n        this.internals.setFormValue(null);\n      }\n    }\n\n    customEvent.emit([...(this.value as string[])]);\n  };\n\n  /*\n   * Validate passed options and assign optionsArr if proper formatting\n   */\n  private assignOptionsArray() {\n    let invalidOptions = false;\n\n    if (Array.isArray(this.options)) {\n      this.optionsArr = this.options;\n    } else if (typeof this.options === 'string' && this.options.trim() !== '') {\n      try {\n        // Assign to random variable to not restart options validation\n        const optionsCheck = JSON.parse(this.options as string);\n\n        if (Array.isArray(optionsCheck)) {\n          this.optionsArr = optionsCheck;\n        } else {\n          this.optionsArr = null;\n          invalidOptions = true;\n        }\n      } catch (e) {\n        logError('gcds-checkboxes', ['Invalid JSON string for options']);\n        this.options = null;\n        invalidOptions = true;\n      }\n    }\n\n    return invalidOptions;\n  }\n\n  render() {\n    const { legend, required, hint, errorMessage } = this;\n\n    const fieldsetAttrs = {\n      'tabindex': '-1',\n      'aria-labelledby': 'checkboxes-legend',\n    };\n\n    if (hint) {\n      const hintID = this.hint ? `checkboxes-hint ` : '';\n      fieldsetAttrs['aria-labelledby'] =\n        `${fieldsetAttrs['aria-labelledby']} ${hintID}`.trim();\n    }\n\n    if (this.validateRequiredProps()) {\n      return (\n        <Host onBlur={() => this.isGroup && this.onBlurValidate()}>\n          {this.isGroup ? (\n            <fieldset class=\"gcds-checkboxes__fieldset\" {...fieldsetAttrs}>\n              <legend id=\"checkboxes-legend\" class=\"gcds-checkboxes__legend\">\n                {legend}\n                {required ? (\n                  <span class=\"legend__required\"> (required)</span>\n                ) : null}\n              </legend>\n              {hint ? (\n                <gcds-hint id=\"checkboxes-hint\" hint-id=\"checkboxes\">\n                  {hint}\n                </gcds-hint>\n              ) : null}\n\n              {errorMessage ? (\n                <div>\n                  <gcds-error-message\n                    id=\"checkboxes-error\"\n                    messageId=\"checkboxes\"\n                  >\n                    {errorMessage}\n                  </gcds-error-message>\n                </div>\n              ) : null}\n\n              {this.optionsArr &&\n                this.optionsArr.map(checkbox => {\n                  return renderCheckbox(\n                    checkbox,\n                    this,\n                    emitEvent,\n                    this.handleInput,\n                  );\n                })}\n            </fieldset>\n          ) : (\n            this.optionsArr &&\n            this.optionsArr.length > 0 &&\n            renderCheckbox(\n              this.optionsArr[0],\n              this,\n              emitEvent,\n              this.handleInput,\n            )\n          )}\n        </Host>\n      );\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}