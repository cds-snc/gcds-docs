{"file":"gcds-checkboxes.js","mappings":"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","names":["GcdsCheckboxes"],"sources":["src/components/gcds-checkboxes/checkbox.tsx","src/components/gcds-checkboxes/gcds-checkboxes.css?tag=gcds-checkboxes&encapsulation=shadow","src/components/gcds-checkboxes/gcds-checkboxes.tsx"],"sourcesContent":["import { h } from '@stencil/core';\n\nexport type CheckboxObject = {\n  id: string;\n  label: string;\n  value?: string;\n  hint?: string;\n  checked?: boolean | string;\n};\n\n/* Check if passed object matches required CheckboxObject type\n * @param obj - object to check\n */\nexport function isCheckboxObject(obj: CheckboxObject) {\n  if (typeof obj !== 'object' || obj === null) return false;\n\n  const validKeys = ['id', 'label', 'value', 'hint', 'checked', 'required'];\n  const objKeys = Object.keys(obj);\n\n  // Check if all properties match the expected type\n  const hasValidTypes =\n    typeof obj.id === 'string' &&\n    typeof obj.label === 'string' &&\n    (obj.value === undefined || typeof obj.value === 'string') &&\n    (obj.hint === undefined || typeof obj.hint === 'string') &&\n    (obj.checked === undefined || typeof obj.checked === 'boolean');\n\n  // Ensure no extra properties exist\n  const hasOnlyValidKeys = objKeys.every(key => validKeys.includes(key));\n\n  return hasValidTypes && hasOnlyValidKeys;\n}\n\n/* Loop through the optionsArr and check if each option/checkbox is formatted correctly\n * @param optionsArr - array of objects to be checked\n */\nexport function validateOptionsArray(optionsArr) {\n  let invalidOptionsArr = false;\n\n  if (optionsArr && optionsArr.length >= 1) {\n    invalidOptionsArr = optionsArr.some(\n      checkbox => !isCheckboxObject(checkbox),\n    );\n  } else if (optionsArr && optionsArr.length == 0) {\n    invalidOptionsArr = true;\n  }\n\n  return invalidOptionsArr;\n}\n\n/* Loop through manually assigned value to check if it is available in rendered checkboxes\n * @param optionsArr - array of checkbox objects to compare to\n * @param element - the checkboxes element\n */\nexport function cleanUpValues(optionsArr, element) {\n  const availableValues = [];\n  optionsArr.forEach(checkbox => {\n    availableValues.push(checkbox.value ? checkbox.value : 'on');\n\n    if (\n      (checkbox.checked == 'true' || checkbox.checked === true) &&\n      !(element.value as Array<string>).includes(checkbox.value || 'on')\n    ) {\n      element.value = [\n        ...(element.value as Array<string>),\n        checkbox.value ? checkbox.value : 'on',\n      ];\n    }\n  });\n\n  // Remove any values that are not available in the inputs\n  (element.value as Array<string>)\n    .filter(value => !availableValues.includes(value))\n    .forEach(value => {\n      element.value = (element.value as Array<string>).filter(\n        item => item !== value,\n      );\n    });\n}\n\nexport const renderCheckbox = (checkbox, element, emitEvent, handleInput) => {\n  const {\n    name,\n    disabled,\n    hasError,\n    errorMessage,\n    gcdsFocus,\n    gcdsInput,\n    gcdsChange,\n    gcdsClick,\n    gcdsBlur,\n    required,\n    hint,\n    isGroup,\n    lang,\n    value,\n    onBlurValidate,\n  } = element;\n\n  const attrsInput = {\n    name: name,\n    id: checkbox.id,\n    disabled: disabled,\n    required: checkbox.required,\n    value: checkbox.value,\n  };\n\n  const labelAttrs = {\n    'label': checkbox.label,\n    'label-for': checkbox.id,\n    lang,\n  };\n\n  if (!isGroup && required) {\n    labelAttrs['required'] = required;\n    attrsInput['required'] = required;\n  }\n\n  if (checkbox.hint) {\n    const hintID = `hint-${checkbox.id}`;\n    attrsInput['aria-describedby'] = `${hintID}${\n      attrsInput['aria-describedby'] ? `${attrsInput['aria-describedby']}` : ''\n    }`;\n  }\n\n  if (value.includes(checkbox.value)) {\n    attrsInput['checked'] = true;\n  }\n\n  if (hasError) {\n    attrsInput['aria-invalid'] = 'true';\n    attrsInput['aria-description'] = errorMessage;\n  }\n\n  return (\n    <div\n      class={`gcds-checkbox ${disabled ? 'gcds-checkbox--disabled' : ''} ${\n        hasError ? 'gcds-checkbox--error' : ''\n      }`}\n    >\n      <input\n        type=\"checkbox\"\n        {...attrsInput}\n        onBlur={isGroup ? () => gcdsBlur.emit() : onBlurValidate}\n        onFocus={() => gcdsFocus.emit()}\n        onChange={() => gcdsChange.emit()}\n        onInput={e => handleInput(e, gcdsInput)}\n        onClick={e =>\n          !disabled ? emitEvent(e, gcdsClick) : e.stopImmediatePropagation()\n        }\n      />\n\n      <gcds-label\n        {...labelAttrs}\n        onClick={e => e.stopPropagation()}\n      ></gcds-label>\n\n      {checkbox.hint || (!isGroup && hint) ? (\n        <gcds-hint hint-id={checkbox.id}>\n          {!isGroup && hint ? hint : checkbox.hint}\n        </gcds-hint>\n      ) : null}\n\n      {!isGroup && errorMessage ? (\n        <gcds-error-message messageId={checkbox.id}>\n          {errorMessage}\n        </gcds-error-message>\n      ) : null}\n    </div>\n  );\n};\n","@layer reset, default, disabled, error, focus;\n\n@layer reset {\n  :host {\n    display: block;\n\n    .gcds-checkboxes__fieldset {\n      border: 0;\n      padding: 0;\n      min-inline-size: auto;\n\n      legend {\n        padding: 0;\n      }\n    }\n\n    .gcds-checkbox {\n      padding: 0;\n\n      gcds-label > label {\n        &:before,\n        &:after {\n          cursor: pointer;\n          content: '';\n          box-sizing: border-box;\n          position: absolute;\n        }\n      }\n    }\n  }\n}\n\n@layer default {\n  :host {\n    .gcds-checkboxes__fieldset {\n      margin: var(--gcds-checkbox-fieldset-margin);\n\n      .gcds-checkboxes__legend {\n        font: var(--gcds-checkbox-legend-font-desktop);\n        margin: var(--gcds-checkbox-legend-margin);\n\n        .legend__required {\n          font: var(--gcds-checkbox-legend-required-font-desktop);\n        }\n\n        @media only screen and (width < 48em) {\n          font: var(--gcds-checkbox-legend-font-mobile);\n\n          .legend__required {\n            font: var(--gcds-checkbox-legend-required-font-mobile);\n          }\n        }\n\n        &:not(:has(+ gcds-hint)) {\n          margin: var(--gcds-checkbox-legend-hint-margin);\n        }\n      }\n    }\n\n    .gcds-checkbox {\n      position: relative;\n      max-width: var(--gcds-checkbox-max-width);\n      min-height: calc(\n        var(--gcds-checkbox-input-height-and-width) -\n          var(--gcds-checkbox-padding)\n      );\n      font: var(--gcds-checkbox-font);\n      color: var(--gcds-checkbox-default-text);\n      margin: var(--gcds-checkbox-margin) !important;\n      padding: var(--gcds-checkbox-padding) 0 0;\n      transition: color ease-in-out 0.15s;\n\n      :is(gcds-label, gcds-hint, gcds-error-message) {\n        padding: var(--gcds-checkbox-label-padding) !important;\n      }\n\n      gcds-hint::part(hint) {\n        margin: 0;\n      }\n\n      input,\n      gcds-label:before,\n      gcds-label:after {\n        position: absolute;\n      }\n\n      input,\n      gcds-label > label:before {\n        top: 0;\n        left: 0;\n        width: var(--gcds-checkbox-input-height-and-width);\n        height: var(--gcds-checkbox-input-height-and-width);\n      }\n\n      input {\n        opacity: 0;\n      }\n\n      gcds-label > label {\n        width: fit-content;\n        --gcds-label-font-desktop: var(--gcds-checkbox-label-font-desktop);\n        --gcds-label-font-mobile: var(--gcds-checkbox-label-font-mobile);\n\n        &:before {\n          background-color: var(--gcds-checkbox-default-background);\n          border: var(--gcds-checkbox-input-border-width) solid currentcolor;\n          border-radius: var(--gcds-checkbox-input-border-radius);\n          transition:\n            border-color ease-in-out 0.15s,\n            box-shadow ease-in-out 0.15s,\n            outline ease-in-out 0.15s;\n        }\n\n        &:after {\n          border: var(--gcds-checkbox-check-border-width) solid currentcolor;\n          border-inline-start: 0 !important;\n          border-block-start: 0 !important;\n          height: var(--gcds-checkbox-check-height);\n          width: var(--gcds-checkbox-check-width);\n          left: var(--gcds-checkbox-check-left);\n          opacity: 0;\n          top: var(--gcds-checkbox-check-top);\n          transform: rotate(40deg);\n        }\n      }\n\n      input:checked + gcds-label > label:after {\n        opacity: 1;\n      }\n    }\n  }\n}\n\n@layer disabled {\n  :host .gcds-checkbox.gcds-checkbox--disabled {\n    color: var(--gcds-checkbox-disabled-text);\n\n    gcds-label > label {\n      --gcds-label-text: currentColor;\n      cursor: not-allowed;\n\n      &:before,\n      &:after {\n        cursor: not-allowed;\n      }\n\n      &:before {\n        border-color: currentcolor;\n        background-color: var(--gcds-checkbox-disabled-background);\n      }\n    }\n\n    gcds-hint {\n      --gcds-hint-text: currentColor;\n    }\n  }\n}\n\n@layer error {\n  :host\n    .gcds-checkbox.gcds-checkbox--error:not(:focus-within)\n    gcds-label\n    > label {\n    &:before {\n      border-color: var(--gcds-checkbox-danger-border);\n    }\n\n    &:after {\n      color: var(--gcds-checkbox-danger-border);\n    }\n  }\n}\n\n@layer focus {\n  :host .gcds-checkbox:focus-within {\n    input:focus + gcds-label > label:before {\n      color: var(--gcds-checkbox-focus-color);\n      outline: var(--gcds-checkbox-focus-outline-width) solid currentcolor;\n      outline-offset: var(--gcds-checkbox-input-border-width);\n      box-shadow: var(--gcds-checkbox-focus-box-shadow);\n      background: var(--gcds-checkbox-focus-background);\n    }\n\n    input:focus + gcds-label > label:after {\n      color: var(--gcds-checkbox-focus-color);\n    }\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  Listen,\n  Method,\n  State,\n  Prop,\n  Watch,\n  Host,\n  h,\n  AttachInternals,\n} from '@stencil/core';\nimport {\n  assignLanguage,\n  emitEvent,\n  inheritAttributes,\n  logError,\n  handleErrors,\n  isValid,\n} from '../../utils/utils';\nimport {\n  Validator,\n  defaultValidator,\n  ValidatorEntry,\n  getValidator,\n  requiredValidator,\n} from '../../validators';\nimport {\n  CheckboxObject,\n  cleanUpValues,\n  renderCheckbox,\n  validateOptionsArray,\n} from './checkbox';\n\n@Component({\n  tag: 'gcds-checkboxes',\n  styleUrl: 'gcds-checkboxes.css',\n  shadow: { delegatesFocus: true },\n  formAssociated: true,\n})\nexport class GcdsCheckboxes {\n  @Element() el: HTMLInputElement;\n\n  @AttachInternals()\n  internals: ElementInternals;\n\n  private initialState?: string | string[];\n\n  private shadowElement?: HTMLElement;\n\n  private optionsArr;\n  private isGroup = false;\n\n  _validator: Validator<string | string[]> = defaultValidator;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Name attribute for a checkboxes element.\n   */\n  @Prop({ reflect: true, mutable: false }) name!: string;\n\n  @Watch('name')\n  validateName() {\n    this.errors = handleErrors(this.errors, 'name', this.name);\n  }\n\n  /**\n   * Set the legend for fieldset form group.\n   */\n  @Prop({ reflect: true, mutable: false }) legend: string;\n\n  @Watch('legend')\n  validateLegend() {\n    if (this.isGroup) {\n      this.errors = handleErrors(this.errors, 'legend', this.legend);\n    }\n  }\n\n  /**\n   * Options to render checkboxes buttons\n   */\n  @Prop({ mutable: true }) options!: string | Array<CheckboxObject>;\n\n  @Watch('options')\n  validateOptions() {\n    let invalidOptions = false;\n\n    // Assign optionsArr based on valid options property\n    invalidOptions = this.assignOptionsArray();\n\n    // Check if each checkbox object is formatted correctly\n    if (this.optionsArr && !invalidOptions) {\n      invalidOptions = validateOptionsArray(this.optionsArr);\n\n      // Assign if isGroup logic more than one checkbox object\n      if (this.optionsArr && this.optionsArr.length > 1) {\n        this.isGroup = true;\n      }\n    }\n\n    // Log error if invalidOptions\n    this.errors = handleErrors(\n      this.errors,\n      'options',\n      this.optionsArr,\n      invalidOptions,\n    );\n  }\n\n  /**\n   * Specifies if the checkboxes are required or not.\n   */\n  @Prop({ reflect: true, mutable: false }) required: boolean;\n\n  /**\n   * Specifies if the checkboxes are disabled or not.\n   */\n  @Prop({ reflect: true, mutable: true }) disabled: boolean;\n\n  @Watch('disabled')\n  validateDisabledCheckbox() {\n    if (this.required) {\n      this.disabled = false;\n    }\n  }\n\n  /**\n   * Value for checkboxes component.\n   */\n  @Prop({ reflect: true, mutable: true }) value: string | Array<string> = [];\n  @Watch('value')\n  validateValue(newValue) {\n    // Convert string to array\n    if (!Array.isArray(newValue)) {\n      try {\n        this.value = JSON.parse(newValue);\n      } catch (e) {\n        logError('gcds-checkboxes', ['Invalid array for value']);\n        this.value = [];\n      }\n    } else if (this.optionsArr) {\n      // Remove any manually set values that do not match available inputs\n      cleanUpValues(this.optionsArr, this.el);\n\n      // Set form value only when a value is assigned\n      if ((this.value as string[]).length > 0) {\n        this.internals.setFormValue(this.value.toString());\n      }\n    }\n  }\n\n  /**\n   * Set this to display an error message for invalid <gcds-checkboxes>\n   */\n  @Prop({ reflect: true, mutable: true }) errorMessage: string;\n  @Watch('errorMessage')\n  validateErrorMessage() {\n    if (this.disabled) {\n      this.errorMessage = '';\n    } else {\n      this.hasError = this.errorMessage ? !this.hasError : false;\n    }\n  }\n\n  /**\n   * Hint displayed below the label.\n   */\n  @Prop({ reflect: true, mutable: true }) hint: string;\n\n  /**\n   * Array of validators\n   */\n  @Prop({ mutable: true }) validator: Array<\n    string | ValidatorEntry | Validator<string>\n  >;\n\n  @Watch('validator')\n  validateValidator() {\n    if (this.validator && !this.validateOn) {\n      this.validateOn = 'blur';\n    }\n  }\n\n  /**\n   * Set event to call validator\n   */\n  @Prop({ mutable: true }) validateOn: 'blur' | 'submit' | 'other';\n\n  /**\n   * Set additional HTML attributes not available in component properties\n   */\n  @State() inheritedAttributes: Object = {};\n\n  /**\n   * Specifies if the checkbox is invalid.\n   */\n  @State() hasError: boolean;\n  @Watch('hasError')\n  validateHasError() {\n    if (this.disabled) {\n      this.hasError = false;\n    }\n  }\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * State to track validation on properties\n   * Contains a list of properties that have an error associated with them\n   */\n  @State() errors: Array<string> = [];\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when the checkbox has been clicked.\n   */\n  @Event() gcdsClick!: EventEmitter<void>;\n\n  /**\n   * Emitted when the checkbox has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the checkbox loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  private onBlurValidate = () => {\n    if (this.validateOn == 'blur') {\n      this.validate();\n    }\n\n    this.gcdsBlur.emit();\n  };\n\n  /**\n   * Emmitted when a checkbox has been inputted.\n   */\n  @Event() gcdsInput: EventEmitter;\n\n  /**\n   * Emmitted when a checkbox has been changed.\n   */\n  @Event() gcdsChange: EventEmitter;\n\n  /**\n   * Emitted when the input has a validation error.\n   */\n  @Event() gcdsError!: EventEmitter<object>;\n\n  /**\n   * Emitted when the input has a validation error.\n   */\n  @Event() gcdsValid!: EventEmitter<object>;\n\n  /**\n   * Call any active validators\n   */\n  @Method()\n  async validate() {\n    if (!this._validator.validate(this.value) && this._validator.errorMessage) {\n      this.errorMessage = this._validator.errorMessage[this.lang];\n      this.gcdsError.emit({\n        message: `${this.isGroup ? this.legend : this.optionsArr[0].label} - ${this.errorMessage}`,\n      });\n    } else {\n      this.errorMessage = '';\n      this.gcdsValid.emit();\n    }\n  }\n\n  /*\n   * FormData listener to append values like native checkboxes\n   */\n  @Listen('formdata', { target: 'document' })\n  formdataListener(e) {\n    const data = e.formData;\n\n    (this.value as string[]).forEach(value => {\n      // Set formdata for first entry to remove array\n      if ((this.value as string[]).indexOf(value) === 0) {\n        data.set(this.name, value);\n      } else {\n        data.append(this.name, value);\n      }\n    });\n  }\n\n  // Submit validation handler\n  @Listen('submit', { target: 'document' })\n  submitListener(e) {\n    if (e.target == this.el.closest('form')) {\n      if (this.validateOn && this.validateOn != 'other') {\n        this.validate();\n      }\n\n      if (this.hasError && this.validateOn != 'other') {\n        e.preventDefault();\n      }\n    }\n  }\n\n  /*\n   * Form internal functions\n   */\n  formResetCallback() {\n    if (this.value != this.initialState) {\n      this.value = this.initialState;\n    }\n  }\n\n  formStateRestoreCallback(state) {\n    this.internals.setFormValue(state);\n    this.value = [...state.split(',')];\n  }\n\n  /*\n   * Observe lang attribute change\n   */\n  @Watch('lang')\n  watchLang(newValue, oldValue) {\n    if (newValue !== oldValue) {\n      this.lang = newValue;\n    }\n  }\n\n  /*\n   * Validate required properties\n   */\n  private validateRequiredProps() {\n    this.validateOptions();\n    this.validateValue(this.value);\n    this.validateLegend();\n    this.validateName();\n\n    return isValid(this.errors, ['name', 'legend', 'options']);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    const valid = this.validateRequiredProps();\n\n    this.validateDisabledCheckbox();\n    this.validateHasError();\n    this.validateErrorMessage();\n    this.validateValidator();\n\n    // Assign required validator if needed\n    requiredValidator(\n      this.el,\n      this.isGroup ? 'checkboxGroup' : 'checkboxSingle',\n    );\n\n    // Assign checkbox hint to component hint if not group\n    if (\n      !this.isGroup &&\n      this.optionsArr &&\n      this.optionsArr[0]?.hint &&\n      !this.hint\n    ) {\n      this.hint = this.optionsArr[0].hint;\n    }\n\n    if (this.validator) {\n      this._validator = getValidator(this.validator);\n    }\n\n    if (!valid) {\n      logError('gcds-checkboxes', this.errors);\n    }\n\n    this.initialState = this.value;\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n  }\n\n  componentWillUpdate() {\n    if (this.validator) {\n      this._validator = getValidator(this.validator);\n    }\n  }\n\n  async componentDidUpdate() {\n    // Validate props again if changed after render\n    const valid = this.validateRequiredProps();\n\n    if (!valid) {\n      logError('gcds-checkboxes', this.errors);\n    }\n  }\n\n  private handleInput = (e, customEvent) => {\n    if (e.target.checked) {\n      this.value = [...(this.value as Array<string>), e.target.value];\n    } else {\n      // Remove value from value array\n      this.value = (this.value as Array<string>).filter(\n        item => item !== e.target.value,\n      );\n    }\n\n    if ((this.value as string[]).length > 0) {\n      this.internals.setFormValue(this.value.toString());\n    } else {\n      this.internals.setFormValue(null);\n    }\n\n    if (e.type === 'change') {\n      const changeEvt = new e.constructor(e.type, e);\n      this.el.dispatchEvent(changeEvt);\n    }\n\n    customEvent.emit(this.value);\n  };\n\n  /*\n   * Validate passed options and assign optionsArr if proper formatting\n   */\n  private assignOptionsArray() {\n    let invalidOptions = false;\n\n    if (Array.isArray(this.options)) {\n      this.optionsArr = this.options;\n    } else if (typeof this.options === 'string' && this.options.trim() !== '') {\n      try {\n        // Assign to random variable to not restart options validation\n        const optionsCheck = JSON.parse(this.options as string);\n\n        if (Array.isArray(optionsCheck)) {\n          this.optionsArr = optionsCheck;\n        } else {\n          this.optionsArr = null;\n          invalidOptions = true;\n        }\n      } catch (e) {\n        logError('gcds-checkboxes', ['Invalid JSON string for options']);\n        this.options = null;\n        invalidOptions = true;\n      }\n    }\n\n    return invalidOptions;\n  }\n\n  render() {\n    const { legend, required, hint, errorMessage } = this;\n\n    const fieldsetAttrs = {\n      'tabindex': '-1',\n      'aria-labelledby': 'checkboxes-legend',\n    };\n\n    if (hint) {\n      const hintID = this.hint ? `checkboxes-hint ` : '';\n      fieldsetAttrs['aria-labelledby'] =\n        `${fieldsetAttrs['aria-labelledby']} ${hintID}`.trim();\n    }\n\n    if (this.validateRequiredProps()) {\n      return (\n        <Host onBlur={() => this.isGroup && this.onBlurValidate()}>\n          {this.isGroup ? (\n            <fieldset class=\"gcds-checkboxes__fieldset\" {...fieldsetAttrs}>\n              <legend id=\"checkboxes-legend\" class=\"gcds-checkboxes__legend\">\n                {legend}\n                {required ? (\n                  <span class=\"legend__required\"> (required)</span>\n                ) : null}\n              </legend>\n              {hint ? (\n                <gcds-hint id=\"checkboxes-hint\" hint-id=\"checkboxes\">\n                  {hint}\n                </gcds-hint>\n              ) : null}\n\n              {errorMessage ? (\n                <div>\n                  <gcds-error-message\n                    id=\"checkboxes-error\"\n                    messageId=\"checkboxes\"\n                  >\n                    {errorMessage}\n                  </gcds-error-message>\n                </div>\n              ) : null}\n\n              {this.optionsArr &&\n                this.optionsArr.map(checkbox => {\n                  return renderCheckbox(\n                    checkbox,\n                    this,\n                    emitEvent,\n                    this.handleInput,\n                  );\n                })}\n            </fieldset>\n          ) : (\n            this.optionsArr &&\n            this.optionsArr.length > 0 &&\n            renderCheckbox(\n              this.optionsArr[0],\n              this,\n              emitEvent,\n              this.handleInput,\n            )\n          )}\n        </Host>\n      );\n    }\n  }\n}\n"],"version":3}