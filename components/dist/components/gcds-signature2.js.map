{"file":"gcds-signature2.js","mappings":"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","names":["i18n"],"sources":["src/components/gcds-signature/i18n/i18n.js","src/components/gcds-signature/gcds-signature.css?tag=gcds-signature&encapsulation=shadow","src/components/gcds-signature/gcds-signature.tsx"],"sourcesContent":["const I18N = {\n  en: {\n    link: 'https://canada.ca/en.html',\n    gc: 'Government of Canada',\n  },\n  fr: {\n    link: 'https://canada.ca/fr.html',\n    gc: 'Gouvernement du Canada',\n  },\n};\n\nexport default I18N;\n","@layer reset, default, type.signature, type.wordmark, variant.colour, variant.white, desktop;\n\n@layer reset {\n  :host {\n    display: block;\n    width: fit-content;\n  }\n}\n\n@layer default {\n  :host {\n    .gcds-signature {\n      display: flex;\n    }\n\n    svg {\n      display: block;\n      max-width: 100%;\n\n      .fip_flag {\n        fill: var(--gcds-signature-color-flag);\n      }\n    }\n  }\n}\n\n@layer type.signature {\n  :host(:not([type='wordmark'])) svg {\n    height: var(--gcds-signature-signature-height);\n  }\n}\n\n@layer type.wordmark {\n  :host([type='wordmark']) svg {\n    height: var(--gcds-signature-wordmark-height);\n    width: auto;\n  }\n}\n\n@layer variant.colour {\n  :host(:not([variant='white'])) svg {\n    .fip_text {\n      fill: var(--gcds-signature-color-text);\n    }\n  }\n}\n\n@layer variant.white {\n  :host([variant='white']) svg {\n    :is(.fip_text) {\n      fill: var(--gcds-signature-white-default);\n    }\n  }\n}\n\n/* Note: viewport specific style decision */\n@layer desktop {\n  :host(:not([type='wordmark'])) svg {\n    @media screen and (width >= 64em) {\n      height: var(--gcds-signature-signature-height-desktop);\n    }\n  }\n}\n","import {\n  Component,\n  Host,\n  Element,\n  Watch,\n  State,\n  Prop,\n  h,\n  Fragment,\n} from '@stencil/core';\nimport { assignLanguage, observerConfig } from '../../utils/utils';\nimport i18n from './i18n/i18n';\n\nimport SignatureEn from './assets/sig-blk-en.svg';\nimport SignatureFr from './assets/sig-blk-fr.svg';\nimport WordmarkEn from './assets/wmms-spl-en.svg';\nimport WordmarkFr from './assets/wmms-spl-fr.svg';\n\n@Component({\n  tag: 'gcds-signature',\n  styleUrl: 'gcds-signature.css',\n  shadow: true,\n})\nexport class GcdsSignature {\n  @Element() el: HTMLElement;\n\n  /**\n   * Props\n   */\n\n  /**\n   * The type of graphic to render\n   */\n  @Prop({ reflect: true, mutable: true }) type: 'signature' | 'wordmark' =\n    'signature';\n\n  @Watch('type')\n  validateType(newValue: string) {\n    if (newValue != 'signature' && newValue != 'wordmark') {\n      this.type = 'signature';\n    }\n  }\n\n  /**\n   * The colour variant to render\n   */\n  @Prop({ reflect: true, mutable: true }) variant: 'colour' | 'white' =\n    'colour';\n\n  @Watch('variant')\n  validateVariant(newValue: string) {\n    if (newValue != 'colour' && newValue != 'white') {\n      this.variant = 'colour';\n    }\n  }\n\n  /**\n   * Has link to canada.ca. Only applies to signature\n   */\n  @Prop({ mutable: true }) hasLink: boolean = false;\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.validateType;\n    this.validateVariant;\n\n    this.updateLang();\n  }\n\n  private get selectSVG() {\n    switch (this.type) {\n      case 'wordmark':\n        if (this.lang == 'en') {\n          return WordmarkEn;\n        } else {\n          return WordmarkFr;\n        }\n      case 'signature':\n      default:\n        if (this.lang == 'en') {\n          return SignatureEn;\n        } else {\n          return SignatureFr;\n        }\n    }\n  }\n\n  private get svgLabel() {\n    let altText = '';\n    if (this.lang === 'en') {\n      altText = (\n        <>\n          {i18n['en'].gc} / <span lang=\"fr\">{i18n['fr'].gc}</span>\n        </>\n      );\n    } else {\n      altText = (\n        <>\n          {i18n['fr'].gc} / <span lang=\"en\">{i18n['en'].gc}</span>\n        </>\n      );\n    }\n    return (\n      <gcds-sr-only tag=\"span\" id=\"signature-title\">\n        {altText}\n      </gcds-sr-only>\n    );\n  }\n\n  render() {\n    const { type, hasLink, lang, selectSVG, svgLabel } = this;\n\n    const sigAttrs = {\n      class: 'gcds-signature',\n    };\n    const Tag = hasLink ? 'a' : 'div';\n\n    if (Tag === 'a') {\n      sigAttrs['href'] = i18n[lang].link;\n    }\n\n    return (\n      <Host>\n        {type === 'signature' ? (\n          <Tag {...sigAttrs}>\n            <div innerHTML={selectSVG}></div>\n            {svgLabel}\n          </Tag>\n        ) : (\n          <div class=\"gcds-signature\" innerHTML={selectSVG}></div>\n        )}\n      </Host>\n    );\n  }\n}\n"],"version":3}