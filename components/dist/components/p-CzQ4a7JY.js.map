{"version":3,"names":["gcdsSelectCss","GcdsSelect","__stencil_proxyCustomElement","HTMLElement","constructor","this","_validator","defaultValidator","required","disabled","validateOn","inheritedAttributes","handleInput","e","customEvent","val","target","value","internals","setFormValue","type","changeEvt","el","dispatchEvent","emit","onBlur","validate","gcdsBlur","validateDisabledSelect","validateErrorMessage","errorMessage","hasError","validateValidator","getValidator","validator","validateHasError","ariaInvalidWatcher","inheritAttributes","shadowElement","ariaDescriptiondWatcher","handleValidationResult","label","gcdsError","gcdsValid","lang","submitListener","closest","preventDefault","checkValueOrSelected","option","getAttribute","setAttribute","initialValue","hasAttribute","formResetCallback","formStateRestoreCallback","state","observeOptions","config","attributes","childList","characterData","subtree","observer","MutationObserver","options","Array","from","children","observe","updateLang","mutations","oldValue","observerConfig","componentWillLoad","assignLanguage","requiredValidator","forEach","nodeName","subOptions","map","sub","componentDidLoad","render","selectId","defaultValue","hint","name","attrsSelect","Object","assign","attrsLabel","hintID","errorID","h","Host","key","class","messageId","id","onFocus","gcdsFocus","onInput","gcdsInput","onChange","gcdsChange","part","ref","element","selected","opt","innerHTML","optGroupChildren"],"sources":["src/components/gcds-select/gcds-select.css?tag=gcds-select&encapsulation=shadow","src/components/gcds-select/gcds-select.tsx"],"sourcesContent":["@layer reset, default, disabled, error, focus;\n\n@layer reset {\n  :host {\n    display: block;\n\n    .gcds-select-wrapper {\n      margin: 0;\n      padding: 0;\n      border: 0;\n\n      select {\n        box-sizing: border-box;\n      }\n\n      slot {\n        display: initial;\n      }\n    }\n  }\n}\n\n@layer default {\n  :host .gcds-select-wrapper {\n    max-width: 75ch;\n    font: var(--gcds-select-font-desktop);\n    color: var(--gcds-select-default-text);\n    transition: color ease-in-out 0.15s;\n\n    @media only screen and (width < 48em) {\n      font: var(--gcds-select-font-mobile);\n    }\n\n    select {\n      display: block;\n      min-width: var(--gcds-select-min-width-and-height);\n      max-width: 100%;\n      height: auto;\n      min-height: var(--gcds-select-min-width-and-height);\n      font: inherit;\n      margin: var(--gcds-select-margin) !important;\n      padding: var(--gcds-select-padding) !important;\n      background-color: var(--gcds-select-default-background);\n      color: var(--gcds-select-default-text);\n      border: var(--gcds-select-border-width) solid currentColor;\n      border-radius: var(--gcds-select-border-radius);\n      box-sizing: border-box;\n      transition: all ease-in-out 0.15s;\n\n      /* Select arrow */\n      -webkit-appearance: none;\n      -moz-appearance: none;\n      background-image: url(\"data:image/svg+xml;utf8,<svg width='16' height='10' viewBox='0 0 16 10' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M0.799988 0.900024L7.79999 7.90003L14.8 0.900024' stroke='currentColor' stroke-width='2'/></svg>\");\n      background-repeat: no-repeat;\n      background-position-x: var(--gcds-select-arrow-position-x);\n      background-position-y: 50%;\n    }\n  }\n}\n\n@layer disabled {\n  :host .gcds-select-wrapper.gcds-disabled {\n    color: var(--gcds-select-disabled-text);\n\n    gcds-label {\n      --gcds-label-text: currentColor;\n    }\n\n    gcds-hint {\n      --gcds-hint-text: currentColor;\n    }\n\n    select:disabled {\n      cursor: not-allowed;\n      background-color: var(--gcds-select-disabled-background);\n      border-color: var(--gcds-select-disabled-text);\n    }\n  }\n}\n\n@layer error {\n  :host .gcds-select-wrapper.gcds-error:not(:focus-within) select {\n    border-color: var(--gcds-select-danger-border);\n  }\n}\n\n@layer focus {\n  :host .gcds-select-wrapper:focus-within select:focus {\n    border-color: var(--gcds-select-focus-border);\n    outline: var(--gcds-select-outline-width) solid\n      var(--gcds-select-focus-border);\n    outline-offset: var(--gcds-select-border-width);\n    box-shadow: var(--gcds-select-focus-box-shadow);\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  Prop,\n  Watch,\n  State,\n  Method,\n  Host,\n  h,\n  Listen,\n  AttachInternals,\n} from '@stencil/core';\nimport {\n  assignLanguage,\n  handleValidationResult,\n  inheritAttributes,\n  observerConfig,\n} from '../../utils/utils';\nimport {\n  Validator,\n  defaultValidator,\n  ValidatorEntry,\n  getValidator,\n  requiredValidator,\n} from '../../validators';\n\n@Component({\n  tag: 'gcds-select',\n  styleUrl: 'gcds-select.css',\n  shadow: { delegatesFocus: true },\n  formAssociated: true,\n})\nexport class GcdsSelect {\n  @Element() el: HTMLElement;\n\n  @AttachInternals()\n  internals: ElementInternals;\n\n  private initialValue?: string;\n\n  private shadowElement?: HTMLSelectElement;\n\n  _validator: Validator<string> = defaultValidator;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Id attribute for a select element.\n   */\n  @Prop({ reflect: true, mutable: true }) selectId!: string;\n\n  /**\n   * Form field label.\n   */\n  @Prop({ reflect: true, mutable: false }) label!: string;\n\n  /**\n   * Name attribute for select form element.\n   */\n  @Prop({ reflect: true, mutable: false }) name!: string;\n\n  /**\n   * Specifies if a form field is required or not.\n   */\n  @Prop({ reflect: true, mutable: false }) required?: boolean = false;\n\n  /**\n   * Specifies if a select element is disabled or not.\n   */\n  @Prop({ reflect: true, mutable: true }) disabled?: boolean = false;\n\n  @Watch('disabled')\n  validateDisabledSelect() {\n    if (this.required) {\n      this.disabled = false;\n    }\n  }\n\n  /**\n   * The default value is an optional value that gets displayed before the user selects an option.\n   */\n  @Prop({ reflect: true, mutable: false }) defaultValue?: string;\n\n  /**\n   * Value for a select element.\n   */\n  @Prop({ mutable: true }) value?: string;\n\n  /**\n   * Error message for an invalid select element.\n   */\n  @Prop({ reflect: true, mutable: true }) errorMessage?: string;\n  @Watch('errorMessage')\n  validateErrorMessage() {\n    if (this.disabled) {\n      this.errorMessage = '';\n    } else if (!this.hasError && this.errorMessage) {\n      this.hasError = true;\n    } else if (this.errorMessage == '') {\n      this.hasError = false;\n    }\n  }\n\n  /**\n   * Hint displayed below the label.\n   */\n  @Prop({ reflect: true, mutable: false }) hint?: string;\n\n  /**\n   * Array of validators\n   */\n  @Prop({ mutable: true }) validator: Array<\n    string | ValidatorEntry | Validator<string>\n  >;\n\n  @Watch('validator')\n  validateValidator() {\n    this._validator = getValidator(this.validator);\n  }\n\n  /**\n   * Set event to call validator\n   */\n  @Prop({ mutable: true }) validateOn: 'blur' | 'submit' | 'other' = 'blur';\n\n  /**\n   * Specifies if the select is invalid.\n   */\n  @State() hasError: boolean;\n  @Watch('hasError')\n  validateHasError() {\n    if (this.disabled) {\n      this.hasError = false;\n    }\n  }\n\n  /**\n   * Set additional HTML attributes not available in component properties\n   */\n  @State() inheritedAttributes: Object = {};\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * List of passed options\n   */\n  @State() options: Element[];\n\n  /**\n   * Watch HTML attribute aria-invalid to inherit changes\n   */\n  @Watch('aria-invalid')\n  ariaInvalidWatcher() {\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n  }\n  @Watch('aria-description')\n  ariaDescriptiondWatcher() {\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n  }\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when the select value has changed.\n   */\n  @Event() gcdsChange: EventEmitter;\n\n  /**\n   * Emitted when the select has received input.\n   */\n  @Event() gcdsInput: EventEmitter;\n\n  private handleInput = (e, customEvent) => {\n    const val = e.target && e.target.value;\n    this.value = val;\n    this.internals.setFormValue(val);\n\n    if (e.type === 'change') {\n      const changeEvt = new e.constructor(e.type, e);\n      this.el.dispatchEvent(changeEvt);\n    }\n\n    customEvent.emit(this.value);\n  };\n\n  /**\n   * Emitted when the select has focus.\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the select loses focus.\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  private onBlur = () => {\n    if (this.validateOn === 'blur') {\n      this.validate();\n    }\n\n    this.gcdsBlur.emit();\n  };\n\n  /**\n   * Call any active validators\n   */\n  @Method()\n  async validate() {\n    handleValidationResult(\n      this.el as HTMLGcdsSelectElement,\n      this._validator.validate(this.value),\n      this.label,\n      this.gcdsError,\n      this.gcdsValid,\n      this.lang,\n    );\n  }\n\n  /**\n   * Emitted when the select has a validation error.\n   */\n  @Event() gcdsError!: EventEmitter<object>;\n\n  /**\n   * Emitted when the select has a validation error.\n   */\n  @Event() gcdsValid!: EventEmitter<object>;\n\n  @Listen('submit', { target: 'document' })\n  submitListener(e) {\n    if (e.target == this.el.closest('form')) {\n      if (this.validateOn && this.validateOn != 'other') {\n        this.validate();\n      }\n\n      if (this.hasError && this.validateOn != 'other') {\n        e.preventDefault();\n      }\n    }\n  }\n\n  /**\n   * Check if an option is selected or value matches an option's value\n   */\n  private checkValueOrSelected(option) {\n    const value = option.getAttribute('value');\n\n    if (this.value === value) {\n      option.setAttribute('selected', 'true');\n      this.internals.setFormValue(value);\n      this.initialValue = this.value;\n    }\n\n    if (option.hasAttribute('selected')) {\n      this.value = value;\n      this.initialValue = this.value ? this.value : null;\n    }\n  }\n\n  /*\n   * Form internal functions\n   */\n  formResetCallback() {\n    if (this.value != this.initialValue) {\n      this.internals.setFormValue(this.initialValue);\n      this.value = this.initialValue;\n    }\n  }\n\n  formStateRestoreCallback(state) {\n    this.internals.setFormValue(state);\n    this.value = state;\n  }\n\n  /*\n   * Observe passed options and update if change\n   */\n  observeOptions() {\n    const config = {\n      attributes: false,\n      childList: true,\n      characterData: true,\n      subtree: true,\n    };\n    const observer = new MutationObserver(() => {\n      this.options = Array.from(this.el.children);\n      // Reset value to null to prevent unwanted selection\n      this.value = null;\n    });\n    observer.observe(this.el, config);\n  }\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n\n    this.validateDisabledSelect();\n    this.validateHasError();\n    this.validateErrorMessage();\n\n    // Assign required validator if needed\n    requiredValidator(this.el, 'select');\n\n    this.validateValidator();\n\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n\n    if (this.el.children) {\n      this.options = Array.from(this.el.children);\n\n      this.options.forEach(option => {\n        if (option.nodeName === 'OPTION') {\n          this.checkValueOrSelected(option);\n        } else if (option.nodeName === 'OPTGROUP') {\n          const subOptions = Array.from(option.children);\n\n          subOptions.map(sub => {\n            this.checkValueOrSelected(sub);\n          });\n        }\n      });\n    }\n  }\n\n  async componentDidLoad() {\n    this.observeOptions();\n  }\n\n  render() {\n    const {\n      lang,\n      selectId,\n      label,\n      required,\n      disabled,\n      defaultValue,\n      value,\n      hint,\n      errorMessage,\n      inheritedAttributes,\n      hasError,\n      name,\n      options,\n    } = this;\n\n    const attrsSelect = {\n      name,\n      disabled,\n      required,\n      value,\n      ...inheritedAttributes,\n    };\n\n    const attrsLabel = {\n      label,\n      required,\n    };\n\n    if (hint || errorMessage) {\n      const hintID = hint ? `hint-${selectId} ` : '';\n      const errorID = errorMessage ? `error-message-${selectId} ` : '';\n\n      attrsSelect['aria-describedby'] = `${hintID}${errorID}${\n        attrsSelect['aria-describedby']\n          ? `${attrsSelect['aria-describedby']}`\n          : ''\n      }`;\n    }\n\n    return (\n      <Host>\n        <div\n          class={`gcds-select-wrapper ${disabled ? 'gcds-disabled' : ''} ${\n            hasError ? 'gcds-error' : ''\n          }`}\n        >\n          <gcds-label {...attrsLabel} label-for={selectId} lang={lang} />\n\n          {hint ? <gcds-hint hint-id={selectId}>{hint}</gcds-hint> : null}\n\n          {errorMessage ? (\n            <gcds-error-message messageId={selectId}>\n              {errorMessage}\n            </gcds-error-message>\n          ) : null}\n\n          <select\n            {...attrsSelect}\n            id={selectId}\n            onBlur={() => this.onBlur()}\n            onFocus={() => this.gcdsFocus.emit()}\n            onInput={e => this.handleInput(e, this.gcdsInput)}\n            onChange={e => this.handleInput(e, this.gcdsChange)}\n            aria-invalid={\n              inheritedAttributes['aria-invalid'] === 'true'\n                ? inheritedAttributes['aria-invalid']\n                : errorMessage\n                  ? 'true'\n                  : 'false'\n            }\n            part=\"select\"\n            ref={element => (this.shadowElement = element as HTMLSelectElement)}\n          >\n            {defaultValue ? (\n              <option value=\"\" disabled selected>\n                {defaultValue}\n              </option>\n            ) : null}\n            {options.map(opt => {\n              if (opt.nodeName === 'OPTION') {\n                const selected = opt.hasAttribute('selected')\n                  ? { selected: true }\n                  : null;\n\n                return (\n                  <option value={opt.getAttribute('value')} {...selected}>\n                    {opt.innerHTML}\n                  </option>\n                );\n              } else if (opt.nodeName === 'OPTGROUP') {\n                const optGroupChildren = Array.from(opt.children).map(sub => {\n                  const selected = sub.hasAttribute('selected')\n                    ? { selected: true }\n                    : null;\n\n                  return (\n                    <option value={sub.getAttribute('value')} {...selected}>\n                      {sub.innerHTML}\n                    </option>\n                  );\n                });\n\n                return (\n                  <optgroup label={opt.getAttribute('label')}>\n                    {optGroupChildren}\n                  </optgroup>\n                );\n              }\n            })}\n          </select>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}