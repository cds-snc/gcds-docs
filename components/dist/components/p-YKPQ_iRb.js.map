{"version":3,"names":["I18N","en","required","fr","gcdsLabelCss","GcdsLabel","__stencil_proxyCustomElement","HTMLElement","updateLang","observer","MutationObserver","mutations","oldValue","this","el","lang","observe","observerConfig","componentWillLoad","assignLanguage","render","hideLabel","labelFor","label","h","Host","key","id","htmlFor","class","i18n"],"sources":["src/components/gcds-label/i18n/i18n.js","src/components/gcds-label/gcds-label.css?tag=gcds-label","src/components/gcds-label/gcds-label.tsx"],"sourcesContent":["const I18N = {\n  en: {\n    required: 'required',\n  },\n  fr: {\n    required: 'obligatoire',\n  },\n};\n\nexport default I18N;\n","@layer reset, default;\n\n@layer reset {\n  :host {\n    display: block;\n  }\n}\n\n@layer default {\n  :host .gcds-label {\n    display: block;\n    max-width: 100%;\n    font: var(--gcds-label-font-desktop);\n    margin: var(--gcds-label-margin) !important;\n    color: var(--gcds-label-text);\n    cursor: pointer;\n\n    @media only screen and (width < 48em) {\n      font: var(--gcds-label-font-mobile);\n    }\n\n    &.label--hidden {\n      overflow: hidden;\n      opacity: 0;\n      width: 0;\n      height: 0;\n      margin: 0;\n    }\n\n    .label--required {\n      font-weight: var(--gcds-label-required-font-weight);\n      margin: var(--gcds-label-required-margin) !important;\n    }\n  }\n}\n","import { Component, Element, Host, Prop, State, h } from '@stencil/core';\nimport { assignLanguage, observerConfig } from '../../utils/utils';\nimport i18n from './i18n/i18n';\n\n@Component({\n  tag: 'gcds-label',\n  styleUrl: 'gcds-label.css',\n  shadow: false,\n  scoped: false,\n})\nexport class GcdsLabel {\n  @Element() el: HTMLElement;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Specifies if the label is hidden or not.\n   */\n  @Prop() hideLabel?: boolean;\n\n  /**\n   * Form field label\n   */\n  @Prop() label: string;\n\n  /**\n   * Defines the label's for attribute.\n   */\n  @Prop() labelFor: string;\n\n  /**\n   * Specifies if a form field is required or not.\n   */\n  @Prop() required?: boolean;\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /*\n   * Observe lang attribute change\n   */\n  updateLang() {\n    const observer = new MutationObserver(mutations => {\n      if (mutations[0].oldValue != this.el.lang) {\n        this.lang = this.el.lang;\n      }\n    });\n    observer.observe(this.el, observerConfig);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.updateLang();\n  }\n\n  render() {\n    const { hideLabel, labelFor, label, required, lang } = this;\n\n    return (\n      <Host id={`label-for-${labelFor}`}>\n        <label\n          htmlFor={labelFor}\n          class={`gcds-label ${hideLabel ? 'label--hidden' : ''}`}\n        >\n          <span>{label}</span>\n          {required ? (\n            <span aria-hidden=\"true\" class=\"label--required\">\n              ({i18n[lang].required})\n            </span>\n          ) : null}\n        </label>\n      </Host>\n    );\n  }\n}\n"],"mappings":"oGAAA,MAAMA,EAAO,CACXC,GAAI,CACFC,SAAU,YAEZC,GAAI,CACFD,SAAU,gBCLd,MAAME,EAAe,6iB,MCURC,EAASC,EAAA,MAAAD,UAAAE,E,4CAmCpB,UAAAC,GACE,MAAMC,EAAW,IAAIC,kBAAiBC,IACpC,GAAIA,EAAU,GAAGC,UAAYC,KAAKC,GAAGC,KAAM,CACzCF,KAAKE,KAAOF,KAAKC,GAAGC,I,KAGxBN,EAASO,QAAQH,KAAKC,GAAIG,E,CAG5B,uBAAMC,GAEJL,KAAKE,KAAOI,EAAeN,KAAKC,IAEhCD,KAAKL,Y,CAGP,MAAAY,GACE,MAAMC,UAAEA,EAASC,SAAEA,EAAQC,MAAEA,EAAKrB,SAAEA,EAAQa,KAAEA,GAASF,KAEvD,OACEW,EAACC,EAAI,CAAAC,IAAA,2CAACC,GAAI,aAAaL,KACrBE,EAAA,SAAAE,IAAA,2CACEE,QAASN,EACTO,MAAO,cAAcR,EAAY,gBAAkB,MAEnDG,EAAA,QAAAE,IAAA,4CAAOH,GACNrB,EACCsB,EAAA,sBAAkB,OAAOK,MAAM,mBAAiB,IAC5CC,EAAKf,GAAMb,SACR,KACL,M","ignoreList":[]}