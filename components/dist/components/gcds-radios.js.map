{"version":3,"names":["isRadioObject","obj","validKeys","objKeys","Object","keys","hasValidTypes","id","label","value","hint","undefined","checked","hasOnlyValidKeys","every","key","includes","I18N","en","required","fr","gcdsRadiosCss","GcdsRadios","__stencil_proxyCustomElement","HTMLElement","constructor","this","_validator","defaultValidator","validateOn","inheritedAttributes","errors","onBlur","gcdsBlur","emit","onBlurValidate","validate","handleInput","e","customEvent","val","target","internals","setFormValue","type","changeEvt","el","dispatchEvent","validateOptions","invalidObject","options","trim","JSON","parse","logError","Array","isArray","optionsArr","length","some","radio","forEach","handleErrors","validateName","name","validateLegend","legend","validateErrorMessage","disabled","errorMessage","hasError","validateValue","isValidValue","map","validateValidator","getValidator","validator","handleValidationResult","gcdsError","gcdsValid","lang","submitListener","closest","preventDefault","formResetCallback","initialValue","formStateRestoreCallback","state","watchLang","newValue","oldValue","validateRequiredProps","isValid","componentWillLoad","assignLanguage","requiredValidator","inheritAttributes","shadowElement","valid","componentDidUpdate","render","fieldsetAttrs","tabindex","hintID","h","Host","assign","class","i18n","messageId","attrsInput","onInput","gcdsInput","onChange","gcdsChange","onFocus","gcdsFocus","onClick","stopPropagation"],"sources":["src/components/gcds-radios/radio.tsx","src/components/gcds-radios/i18n/i18n.js","src/components/gcds-radios/gcds-radios.css?tag=gcds-radios&encapsulation=shadow","src/components/gcds-radios/gcds-radios.tsx"],"sourcesContent":["export type RadioObject = {\n  id: string;\n  label: string;\n  value: string;\n  hint?: string;\n  checked?: boolean;\n};\n\nexport function isRadioObject(obj: any): obj is RadioObject {\n  if (typeof obj !== 'object' || obj === null) return false;\n\n  const validKeys = ['id', 'label', 'value', 'hint', 'checked'];\n  const objKeys = Object.keys(obj);\n\n  // Check if all properties match the expected type\n  const hasValidTypes =\n    typeof obj.id === 'string' &&\n    typeof obj.label === 'string' &&\n    typeof obj.value === 'string' &&\n    (obj.hint === undefined || typeof obj.hint === 'string') &&\n    (obj.checked === undefined || typeof obj.checked === 'boolean');\n\n  // Ensure no extra properties exist\n  const hasOnlyValidKeys = objKeys.every(key => validKeys.includes(key));\n\n  return hasValidTypes && hasOnlyValidKeys;\n}\n","const I18N = {\n  en: {\n    required: ' (required)',\n  },\n  fr: {\n    required: ' (obligatoire)',\n  },\n};\n\nexport default I18N;\n","@layer reset, default, disabled, error, focus, a11y.highcontrast;\n\n@layer reset {\n  :host {\n    display: block;\n\n    .gcds-radios__fieldset {\n      border: 0;\n      padding: 0;\n      min-inline-size: auto;\n\n      legend {\n        padding: 0;\n      }\n    }\n\n    .gcds-radio {\n      padding: 0;\n      border: 0;\n\n      gcds-label {\n        display: block;\n        & > label {\n          &:before,\n          &:after {\n            cursor: pointer;\n            content: '';\n            box-sizing: border-box;\n            position: absolute;\n          }\n        }\n      }\n    }\n  }\n}\n\n@layer default {\n  :host {\n    .gcds-radios__legend {\n      font: var(--gcds-radio-legend-font-desktop);\n      margin: var(--gcds-radio-legend-margin);\n\n      .legend__required {\n        font: var(--gcds-radio-legend-required-font-desktop);\n      }\n\n      @media only screen and (width < 48em) {\n        font: var(--gcds-radio-legend-font-mobile);\n\n        .legend__required {\n          font: var(--gcds-radio-legend-required-font-mobile);\n        }\n      }\n\n      &:not(:has(+ gcds-hint)) {\n        margin: var(--gcds-radio-legend-hint-margin);\n      }\n    }\n\n    gcds-hint:part(hint) {\n      margin: var(--gcds-radio-hint-margin);\n    }\n\n    .gcds-radio {\n      position: relative;\n      max-width: var(--gcds-radio-max-width);\n      min-height: calc(\n        var(--gcds-radio-input-height-and-width) - var(--gcds-radio-padding)\n      );\n      font: var(--gcds-radio-font);\n      color: var(--gcds-radio-default-text);\n      margin: var(--gcds-radio-margin) !important;\n      padding: var(--gcds-radio-padding) 0 0;\n      transition: color ease-in-out 0.15s;\n\n      :is(gcds-label, gcds-hint) {\n        padding: var(--gcds-radio-label-padding) !important;\n      }\n\n      gcds-hint::part(hint) {\n        margin: 0;\n      }\n\n      input,\n      gcds-label:before,\n      gcds-label:after {\n        position: absolute;\n      }\n\n      input,\n      gcds-label > label:before {\n        top: 0;\n        left: 0;\n        height: var(--gcds-radio-input-height-and-width);\n        width: var(--gcds-radio-input-height-and-width);\n      }\n\n      input {\n        opacity: 0;\n      }\n\n      gcds-label > label {\n        width: fit-content;\n        --gcds-label-font-desktop: var(--gcds-radio-label-font-desktop);\n        --gcds-label-font-mobile: var(--gcds-radio-label-font-mobile);\n\n        &:before,\n        &:after {\n          border-radius: var(--gcds-radio-border-radius);\n        }\n\n        &:before {\n          background-color: var(--gcds-radio-default-background);\n          border: var(--gcds-radio-input-border-width) solid currentcolor;\n          transition:\n            border-color ease-in-out 0.15s,\n            box-shadow ease-in-out 0.15s,\n            outline ease-in-out 0.15s;\n        }\n\n        &:after {\n          height: var(--gcds-radio-check-height-and-width);\n          width: var(--gcds-radio-check-height-and-width);\n          left: var(--gcds-radio-check-left);\n          opacity: 0;\n          top: var(--gcds-radio-check-top);\n          background-color: currentcolor;\n        }\n      }\n\n      input:checked + gcds-label > label:after {\n        opacity: 1;\n      }\n    }\n  }\n}\n\n@layer disabled {\n  :host .gcds-radio.gcds-radio--disabled {\n    color: var(--gcds-radio-disabled-text);\n\n    gcds-label > label {\n      --gcds-label-text: currentColor;\n      cursor: not-allowed;\n\n      &:before,\n      &:after {\n        cursor: not-allowed;\n      }\n\n      &:before {\n        border-color: var(--gcds-radio-disabled-border);\n        background-color: var(--gcds-radio-disabled-background);\n      }\n    }\n\n    gcds-hint {\n      --gcds-hint-text: currentColor;\n    }\n  }\n}\n\n@layer error {\n  :host {\n    gcds-error-message {\n      margin: var(--gcds-radio-error-message-margin);\n    }\n\n    .gcds-radio.gcds-radio--error:not(:focus-within) gcds-label > label {\n      &:before {\n        border-color: var(--gcds-radio-danger-border);\n      }\n\n      &:after {\n        background-color: var(--gcds-radio-danger-border);\n      }\n    }\n  }\n}\n\n@layer focus {\n  :host .gcds-radio:focus-within {\n    input:focus + gcds-label > label:before {\n      color: var(--gcds-radio-focus-color);\n      outline: var(--gcds-radio-focus-outline-width) solid currentcolor;\n      outline-offset: var(--gcds-radio-input-border-width);\n      box-shadow: var(--gcds-radio-focus-box-shadow);\n      background: var(--gcds-radio-focus-background);\n    }\n\n    input:focus + gcds-label > label:after {\n      box-shadow: inset 0 0 2rem var(--gcds-radio-focus-color);\n    }\n  }\n}\n\n@layer a11y.highcontrast {\n  :host .gcds-radio gcds-label > label::after {\n    @media (prefers-color-scheme: light) {\n      background-color: buttonText;\n    }\n    @media (prefers-color-scheme: dark) {\n      background-color: buttonText;\n    }\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  State,\n  Prop,\n  Watch,\n  Listen,\n  Method,\n  Host,\n  h,\n  AttachInternals,\n} from '@stencil/core';\n\nimport { RadioObject, isRadioObject } from './radio';\nimport {\n  assignLanguage,\n  inheritAttributes,\n  logError,\n  handleErrors,\n  isValid,\n  handleValidationResult,\n} from '../../utils/utils';\nimport {\n  Validator,\n  defaultValidator,\n  ValidatorEntry,\n  getValidator,\n  requiredValidator,\n} from '../../validators';\nimport i18n from './i18n/i18n';\n\n@Component({\n  tag: 'gcds-radios',\n  styleUrl: 'gcds-radios.css',\n  shadow: { delegatesFocus: true },\n  formAssociated: true,\n})\nexport class GcdsRadios {\n  @Element() el: HTMLElement;\n\n  @AttachInternals()\n  internals: ElementInternals;\n\n  private shadowElement?: HTMLInputElement;\n\n  private initialValue?: string;\n\n  private optionsArr;\n\n  _validator: Validator<string> = defaultValidator;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Options to render radio buttons\n   */\n  @Prop({ mutable: true }) options!: string | Array<RadioObject>;\n\n  @Watch('options')\n  validateOptions() {\n    let invalidObject = false;\n    // Assign optionsArr from passed options string or array\n    if (typeof this.options === 'string' && this.options.trim() !== '') {\n      try {\n        this.options = JSON.parse(this.options as string);\n      } catch (e) {\n        logError('gcds-radios', ['Invalid JSON string for options']);\n        this.options = null;\n      }\n    }\n\n    if (Array.isArray(this.options)) {\n      this.optionsArr = this.options;\n    } else {\n      this.optionsArr = null;\n    }\n\n    // Validate options has type RadioObject\n    if (this.optionsArr && this.optionsArr.length > 1) {\n      invalidObject = this.optionsArr.some(radio => !isRadioObject(radio));\n    } else {\n      invalidObject = true;\n    }\n\n    // Assign value if passed options has a checked radio\n    if (this.optionsArr && !this.value) {\n      this.optionsArr.forEach(radio => {\n        if (radio.checked === 'true' || radio.checked === true) {\n          this.value = radio.value;\n          this.internals.setFormValue(radio.value, 'checked');\n        }\n      });\n    }\n\n    // Log error if no or invalid optionsObject\n    this.errors = handleErrors(\n      this.errors,\n      'options',\n      this.optionsArr,\n      invalidObject,\n    );\n  }\n\n  /**\n   * The `name` attribute for the <gcds-radios>, used to group radio elements together\n   */\n  @Prop({ reflect: true, mutable: false }) name!: string;\n\n  @Watch('name')\n  validateName() {\n    this.errors = handleErrors(this.errors, 'name', this.name);\n  }\n\n  /**\n   * Label or legend for the group of radio elements\n   */\n  @Prop({ reflect: true, mutable: false }) legend!: string;\n  @Watch('legend')\n  validateLegend() {\n    this.errors = handleErrors(this.errors, 'legend', this.legend);\n  }\n\n  /**\n   * Specifies if a form field is required or not.\n   */\n  @Prop({ reflect: true, mutable: false }) required: boolean;\n\n  /**\n   * Hint displayed below the label and above the radio elements\n   */\n  @Prop({ reflect: true, mutable: false }) hint: string;\n\n  /**\n   * Set this to display an error message for invalid <gcds-radios>\n   */\n  @Prop({ reflect: false, mutable: true }) errorMessage: string;\n  @Watch('errorMessage')\n  validateErrorMessage() {\n    if (this.disabled) {\n      this.errorMessage = '';\n    } else {\n      this.hasError = this.errorMessage ? true : false;\n    }\n  }\n\n  /**\n   * Specifies if an input element is disabled or not.\n   */\n  @Prop({ reflect: true, mutable: true }) disabled: boolean;\n\n  /**\n   * Default value for the element\n   */\n  @Prop({ reflect: true, mutable: true }) value: string;\n  @Watch('value')\n  validateValue() {\n    if (this.optionsArr && this.value !== null) {\n      let isValidValue = false;\n      this.optionsArr.map(radio => {\n        if (radio.value == this.value) {\n          isValidValue = true;\n        }\n      });\n\n      // unset value if no radio button with value available\n      if (!isValidValue) {\n        this.value = null;\n        this.internals.setFormValue(this.value);\n      }\n    }\n  }\n\n  /**\n   * Array of validators\n   */\n  @Prop({ mutable: true }) validator: Array<\n    string | ValidatorEntry | Validator<string>\n  >;\n\n  @Watch('validator')\n  validateValidator() {\n    this._validator = getValidator(this.validator);\n  }\n\n  /**\n   * Set event to call validator\n   */\n  @Prop({ mutable: true }) validateOn: 'blur' | 'submit' | 'other' = 'blur';\n\n  /**\n   * Specifies if the radio is invalid.\n   */\n  @State() hasError: boolean;\n\n  /**\n   * Set additional HTML attributes not available in component properties\n   */\n  @State() inheritedAttributes: Object = {};\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * State to track validation on properties\n   * Contains a list of properties that have an error associated with them\n   */\n  @State() errors: Array<string> = [];\n\n  /**\n   * Call any active validators\n   */\n  @Method()\n  async validate() {\n    handleValidationResult(\n      this.el as HTMLGcdsRadiosElement,\n      this._validator.validate(this.value),\n      this.legend,\n      this.gcdsError,\n      this.gcdsValid,\n      this.lang,\n    );\n  }\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when <gcds-radios> has been changed as a direct result of a user action (a radio option has been selected)\n   */\n  @Event() gcdsInput!: EventEmitter<void>;\n\n  /**\n   * Emitted when a <gcds-radios> option is checked (but not when unchecked)\n   */\n  @Event() gcdsChange!: EventEmitter<void>;\n\n  /**\n   * Emitted when <gcds-radios> has received focus\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the <gcds-radios> has lost focus\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  private onBlur = () => {\n    this.gcdsBlur.emit();\n  };\n\n  private onBlurValidate = () => {\n    if (this.validateOn == 'blur') {\n      this.validate();\n    }\n\n    this.gcdsBlur.emit();\n  };\n\n  /**\n   * Emitted when <gcds-radios> has passed validation\n   */\n  @Event() gcdsValid!: EventEmitter<void>;\n\n  /**\n   * Emitted when <gcds-radios> has a validation error\n   */\n  @Event() gcdsError!: EventEmitter<object>;\n\n  @Listen('submit', { target: 'document' })\n  submitListener(e) {\n    if (e.target == this.el.closest('form')) {\n      if (this.validateOn && this.validateOn != 'other') {\n        this.validate();\n      }\n\n      if (this.hasError && this.validateOn != 'other') {\n        e.preventDefault();\n      }\n    }\n  }\n\n  /*\n   * Form internal functions\n   */\n  formResetCallback() {\n    if (this.value != this.initialValue) {\n      this.internals.setFormValue(this.initialValue, 'checked');\n      this.value = this.initialValue;\n    }\n  }\n\n  formStateRestoreCallback(state) {\n    this.internals.setFormValue(state);\n    this.value = state;\n  }\n\n  /*\n   * Observe lang attribute change\n   */\n  @Watch('lang')\n  watchLang(newValue, oldValue) {\n    if (newValue !== oldValue) {\n      this.lang = newValue;\n    }\n  }\n\n  private handleInput = (e, customEvent) => {\n    const val = e.target && e.target.value;\n    this.value = val;\n    this.internals.setFormValue(val ? val : null, 'checked');\n\n    if (e.type === 'change') {\n      const changeEvt = new e.constructor(e.type, e);\n      this.el.dispatchEvent(changeEvt);\n    }\n\n    customEvent.emit(this.value);\n  };\n\n  /*\n   * Validate required properties\n   */\n  private validateRequiredProps() {\n    this.validateLegend();\n    this.validateName();\n\n    return isValid(this.errors, ['name', 'legend', 'options']);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.validateOptions();\n    this.validateRequiredProps();\n    this.validateErrorMessage();\n\n    // Assign required validator if needed\n    requiredValidator(this.el, 'radio');\n\n    this.validateValidator();\n\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n    this.initialValue = this.value ? this.value : null;\n\n    const valid = this.validateRequiredProps();\n\n    if (!valid) {\n      logError('gcds-radios', this.errors);\n    }\n  }\n\n  async componentDidUpdate() {\n    // Validate props again if changed after render\n    const valid = this.validateRequiredProps();\n\n    if (!valid) {\n      logError('gcds-radios', this.errors);\n    }\n  }\n\n  render() {\n    const {\n      lang,\n      name,\n      legend,\n      value,\n      required,\n      hint,\n      errorMessage,\n      disabled,\n      hasError,\n      inheritedAttributes,\n    } = this;\n\n    const fieldsetAttrs = {\n      'tabindex': '-1',\n      'aria-labelledby': 'radios-legend',\n    };\n\n    if (hint) {\n      const hintID = this.hint ? `radios-hint ` : '';\n      fieldsetAttrs['aria-labelledby'] =\n        `${fieldsetAttrs['aria-labelledby']} ${hintID}`.trim();\n    }\n\n    if (this.validateRequiredProps()) {\n      return (\n        <Host onBlur={() => this.onBlurValidate()}>\n          <fieldset class=\"gcds-radios__fieldset\" {...fieldsetAttrs}>\n            <legend id=\"radios-legend\" class=\"gcds-radios__legend\">\n              {legend}\n              {required ? (\n                <span class=\"legend__required\">{i18n[lang].required}</span>\n              ) : null}\n            </legend>\n\n            {hint ? (\n              <gcds-hint id=\"radios-hint\" hint-id=\"radios\">\n                {hint}\n              </gcds-hint>\n            ) : null}\n\n            {errorMessage ? (\n              <div>\n                <gcds-error-message id=\"radios-error\" messageId=\"radios\">\n                  {errorMessage}\n                </gcds-error-message>\n              </div>\n            ) : null}\n\n            {this.optionsArr &&\n              this.optionsArr.map(radio => {\n                const attrsInput = {\n                  name,\n                  disabled: disabled,\n                  required: required,\n                  value: radio.value,\n                  checked: radio.value === value,\n                  ...inheritedAttributes,\n                };\n\n                if (radio.hint) {\n                  const hintID = radio.hint ? `hint-${radio.id} ` : '';\n                  attrsInput['aria-describedby'] = `${hintID}${\n                    attrsInput['aria-describedby']\n                      ? `${attrsInput['aria-describedby']}`\n                      : ''\n                  }`;\n                }\n\n                if (hasError) {\n                  attrsInput['aria-invalid'] = 'true';\n                  attrsInput['aria-description'] = errorMessage;\n                }\n\n                return (\n                  <div\n                    class={`gcds-radio ${\n                      disabled ? 'gcds-radio--disabled' : ''\n                    } ${hasError ? 'gcds-radio--error' : ''}`}\n                  >\n                    <input\n                      id={radio.id}\n                      type=\"radio\"\n                      {...attrsInput}\n                      onInput={e => this.handleInput(e, this.gcdsInput)}\n                      onChange={e => this.handleInput(e, this.gcdsChange)}\n                      onBlur={() => this.onBlur()}\n                      onFocus={() => this.gcdsFocus.emit()}\n                    />\n\n                    <gcds-label\n                      label={radio.label}\n                      label-for={radio.id}\n                      lang={lang}\n                      onClick={e => e.stopPropagation()}\n                    ></gcds-label>\n\n                    {radio.hint ? (\n                      <gcds-hint hint-id={radio.id}>{radio.hint}</gcds-hint>\n                    ) : null}\n                  </div>\n                );\n              })}\n          </fieldset>\n        </Host>\n      );\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}