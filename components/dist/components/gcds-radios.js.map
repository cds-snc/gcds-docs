{"file":"gcds-radios.js","mappings":"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","names":["GcdsRadios","i18n"],"sources":["src/components/gcds-radios/radio.tsx","src/components/gcds-radios/i18n/i18n.js","src/components/gcds-radios/gcds-radios.css?tag=gcds-radios&encapsulation=shadow","src/components/gcds-radios/gcds-radios.tsx"],"sourcesContent":["export type RadioObject = {\n  id: string;\n  label: string;\n  value: string;\n  hint?: string;\n  checked?: boolean;\n};\n\nexport function isRadioObject(obj: any): obj is RadioObject {\n  if (typeof obj !== 'object' || obj === null) return false;\n\n  const validKeys = ['id', 'label', 'value', 'hint', 'checked'];\n  const objKeys = Object.keys(obj);\n\n  // Check if all properties match the expected type\n  const hasValidTypes =\n    typeof obj.id === 'string' &&\n    typeof obj.label === 'string' &&\n    typeof obj.value === 'string' &&\n    (obj.hint === undefined || typeof obj.hint === 'string') &&\n    (obj.checked === undefined || typeof obj.checked === 'boolean');\n\n  // Ensure no extra properties exist\n  const hasOnlyValidKeys = objKeys.every(key => validKeys.includes(key));\n\n  return hasValidTypes && hasOnlyValidKeys;\n}\n","const I18N = {\n  en: {\n    required: ' (required)',\n  },\n  fr: {\n    required: ' (obligatoire)',\n  },\n};\n\nexport default I18N;\n","@layer reset, default, disabled, error, focus, a11y.highcontrast;\n\n@layer reset {\n  :host {\n    display: block;\n\n    .gcds-radios__fieldset {\n      border: 0;\n      padding: 0;\n      min-inline-size: auto;\n\n      legend {\n        padding: 0;\n      }\n    }\n\n    .gcds-radio {\n      padding: 0;\n      border: 0;\n\n      gcds-label > label {\n        &:before,\n        &:after {\n          cursor: pointer;\n          content: '';\n          box-sizing: border-box;\n          position: absolute;\n        }\n      }\n    }\n  }\n}\n\n@layer default {\n  :host {\n    .gcds-radios__legend {\n      font: var(--gcds-radio-legend-font-desktop);\n      margin: var(--gcds-radio-legend-margin);\n\n      .legend__required {\n        font: var(--gcds-radio-legend-required-font-desktop);\n      }\n\n      @media only screen and (width < 48em) {\n        font: var(--gcds-radio-legend-font-mobile);\n\n        .legend__required {\n          font: var(--gcds-radio-legend-required-font-mobile);\n        }\n      }\n\n      &:not(:has(+ gcds-hint)) {\n        margin: var(--gcds-radio-legend-hint-margin);\n      }\n    }\n\n    gcds-hint:part(hint) {\n      margin: var(--gcds-radio-hint-margin);\n    }\n\n    .gcds-radio {\n      position: relative;\n      max-width: var(--gcds-radio-max-width);\n      min-height: calc(\n        var(--gcds-radio-input-height-and-width) - var(--gcds-radio-padding)\n      );\n      font: var(--gcds-radio-font);\n      color: var(--gcds-radio-default-text);\n      margin: var(--gcds-radio-margin) !important;\n      padding: var(--gcds-radio-padding) 0 0;\n      transition: color ease-in-out 0.15s;\n\n      :is(gcds-label, gcds-hint) {\n        padding: var(--gcds-radio-label-padding) !important;\n      }\n\n      gcds-hint::part(hint) {\n        margin: 0;\n      }\n\n      input,\n      gcds-label:before,\n      gcds-label:after {\n        position: absolute;\n      }\n\n      input,\n      gcds-label > label:before {\n        top: 0;\n        left: 0;\n        height: var(--gcds-radio-input-height-and-width);\n        width: var(--gcds-radio-input-height-and-width);\n      }\n\n      input {\n        opacity: 0;\n      }\n\n      gcds-label > label {\n        width: fit-content;\n        --gcds-label-font-desktop: var(--gcds-radio-label-font-desktop);\n        --gcds-label-font-mobile: var(--gcds-radio-label-font-mobile);\n\n        &:before,\n        &:after {\n          border-radius: var(--gcds-radio-border-radius);\n        }\n\n        &:before {\n          background-color: var(--gcds-radio-default-background);\n          border: var(--gcds-radio-input-border-width) solid currentcolor;\n          transition:\n            border-color ease-in-out 0.15s,\n            box-shadow ease-in-out 0.15s,\n            outline ease-in-out 0.15s;\n        }\n\n        &:after {\n          height: var(--gcds-radio-check-height-and-width);\n          width: var(--gcds-radio-check-height-and-width);\n          left: var(--gcds-radio-check-left);\n          opacity: 0;\n          top: var(--gcds-radio-check-top);\n          background-color: currentcolor;\n        }\n      }\n\n      input:checked + gcds-label > label:after {\n        opacity: 1;\n      }\n    }\n  }\n}\n\n@layer disabled {\n  :host .gcds-radio.gcds-radio--disabled {\n    color: var(--gcds-radio-disabled-text);\n\n    gcds-label > label {\n      --gcds-label-text: currentColor;\n      cursor: not-allowed;\n\n      &:before,\n      &:after {\n        cursor: not-allowed;\n      }\n\n      &:before {\n        border-color: var(--gcds-radio-disabled-border);\n        background-color: var(--gcds-radio-disabled-background);\n      }\n    }\n\n    gcds-hint {\n      --gcds-hint-text: currentColor;\n    }\n  }\n}\n\n@layer error {\n  :host {\n    gcds-error-message {\n      margin: var(--gcds-radio-error-message-margin);\n    }\n\n    .gcds-radio.gcds-radio--error:not(:focus-within) gcds-label > label {\n      &:before {\n        border-color: var(--gcds-radio-danger-border);\n      }\n\n      &:after {\n        background-color: var(--gcds-radio-danger-border);\n      }\n    }\n  }\n}\n\n@layer focus {\n  :host .gcds-radio:focus-within {\n    input:focus + gcds-label > label:before {\n      color: var(--gcds-radio-focus-color);\n      outline: var(--gcds-radio-focus-outline-width) solid currentcolor;\n      outline-offset: var(--gcds-radio-input-border-width);\n      box-shadow: var(--gcds-radio-focus-box-shadow);\n      background: var(--gcds-radio-focus-background);\n    }\n\n    input:focus + gcds-label > label:after {\n      box-shadow: inset 0 0 2rem var(--gcds-radio-focus-color);\n    }\n  }\n}\n\n@layer a11y.highcontrast {\n  :host .gcds-radio gcds-label > label::after {\n    @media (prefers-color-scheme: light) {\n      background-color: buttonText;\n    }\n    @media (prefers-color-scheme: dark) {\n      background-color: buttonText;\n    }\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  State,\n  Prop,\n  Watch,\n  Listen,\n  Method,\n  Host,\n  h,\n  AttachInternals,\n} from '@stencil/core';\n\nimport { RadioObject, isRadioObject } from './radio';\nimport {\n  assignLanguage,\n  inheritAttributes,\n  logError,\n  handleErrors,\n  isValid,\n} from '../../utils/utils';\nimport {\n  Validator,\n  defaultValidator,\n  ValidatorEntry,\n  getValidator,\n  requiredValidator,\n} from '../../validators';\nimport i18n from './i18n/i18n';\n\n@Component({\n  tag: 'gcds-radios',\n  styleUrl: 'gcds-radios.css',\n  shadow: { delegatesFocus: true },\n  formAssociated: true,\n})\nexport class GcdsRadios {\n  @Element() el: HTMLElement;\n\n  @AttachInternals()\n  internals: ElementInternals;\n\n  private shadowElement?: HTMLInputElement;\n\n  private initialValue?: string;\n\n  private optionsArr;\n\n  _validator: Validator<string> = defaultValidator;\n\n  /**\n   * Props\n   */\n\n  /**\n   * Options to render radio buttons\n   */\n  @Prop({ mutable: true }) options!: string | Array<RadioObject>;\n\n  @Watch('options')\n  validateOptions() {\n    let invalidObject = false;\n    // Assign optionsArr from passed options string or array\n    if (typeof this.options === 'string' && this.options.trim() !== '') {\n      try {\n        this.options = JSON.parse(this.options as string);\n      } catch (e) {\n        logError('gcds-radios', ['Invalid JSON string for options']);\n        this.options = null;\n      }\n    }\n\n    if (Array.isArray(this.options)) {\n      this.optionsArr = this.options;\n    } else {\n      this.optionsArr = null;\n    }\n\n    // Validate options has type RadioObject\n    if (this.optionsArr && this.optionsArr.length > 1) {\n      invalidObject = this.optionsArr.some(radio => !isRadioObject(radio));\n    } else {\n      invalidObject = true;\n    }\n\n    // Assign value if passed options has a checked radio\n    if (this.optionsArr && !this.value) {\n      this.optionsArr.forEach(radio => {\n        if (radio.checked === 'true' || radio.checked === true) {\n          this.value = radio.value;\n          this.internals.setFormValue(radio.value, 'checked');\n        }\n      });\n    }\n\n    // Log error if no or invalid optionsObject\n    this.errors = handleErrors(\n      this.errors,\n      'options',\n      this.optionsArr,\n      invalidObject,\n    );\n  }\n\n  /**\n   * The `name` attribute for the <gcds-radios>, used to group radio elements together\n   */\n  @Prop({ reflect: true, mutable: false }) name!: string;\n\n  @Watch('name')\n  validateName() {\n    this.errors = handleErrors(this.errors, 'name', this.name);\n  }\n\n  /**\n   * Label or legend for the group of radio elements\n   */\n  @Prop({ reflect: true, mutable: false }) legend!: string;\n  @Watch('legend')\n  validateLegend() {\n    this.errors = handleErrors(this.errors, 'legend', this.legend);\n  }\n\n  /**\n   * Specifies if a form field is required or not.\n   */\n  @Prop({ reflect: true, mutable: false }) required: boolean;\n\n  /**\n   * Hint displayed below the label and above the radio elements\n   */\n  @Prop({ reflect: true, mutable: false }) hint: string;\n\n  /**\n   * Set this to display an error message for invalid <gcds-radios>\n   */\n  @Prop({ reflect: false, mutable: true }) errorMessage: string;\n  @Watch('errorMessage')\n  validateErrorMessage() {\n    if (this.disabled) {\n      this.errorMessage = '';\n    } else {\n      this.hasError = this.errorMessage ? true : false;\n    }\n  }\n\n  /**\n   * Specifies if an input element is disabled or not.\n   */\n  @Prop({ reflect: true, mutable: true }) disabled: boolean;\n\n  /**\n   * Default value for the element\n   */\n  @Prop({ reflect: true, mutable: true }) value: string;\n  @Watch('value')\n  validateValue() {\n    if (this.optionsArr && this.value !== null) {\n      let isValidValue = false;\n      this.optionsArr.map(radio => {\n        if (radio.value == this.value) {\n          isValidValue = true;\n        }\n      });\n\n      // unset value if no radio button with value available\n      if (!isValidValue) {\n        this.value = null;\n        this.internals.setFormValue(this.value);\n      }\n    }\n  }\n\n  /**\n   * Array of validators\n   */\n  @Prop({ mutable: true }) validator: Array<\n    string | ValidatorEntry | Validator<string>\n  >;\n\n  @Watch('validator')\n  validateValidator() {\n    if (this.validator && !this.validateOn) {\n      this.validateOn = 'blur';\n    }\n  }\n\n  /**\n   * Set event to call validator\n   */\n  @Prop({ mutable: true }) validateOn: 'blur' | 'submit' | 'other';\n\n  /**\n   * Specifies if the radio is invalid.\n   */\n  @State() hasError: boolean;\n\n  /**\n   * Set additional HTML attributes not available in component properties\n   */\n  @State() inheritedAttributes: Object = {};\n\n  /**\n   * Language of rendered component\n   */\n  @State() lang: string;\n\n  /**\n   * State to track validation on properties\n   * Contains a list of properties that have an error associated with them\n   */\n  @State() errors: Array<string> = [];\n\n  /**\n   * Call any active validators\n   */\n  @Method()\n  async validate() {\n    if (!this._validator.validate(this.value) && this._validator.errorMessage) {\n      this.errorMessage = this._validator.errorMessage[this.lang];\n      this.gcdsError.emit({\n        message: `${this.legend} - ${this.errorMessage}`,\n      });\n    } else {\n      this.errorMessage = '';\n      this.gcdsValid.emit();\n    }\n  }\n\n  /**\n   * Events\n   */\n\n  /**\n   * Emitted when <gcds-radios> has been changed as a direct result of a user action (a radio option has been selected)\n   */\n  @Event() gcdsInput!: EventEmitter<void>;\n\n  /**\n   * Emitted when a <gcds-radios> option is checked (but not when unchecked)\n   */\n  @Event() gcdsChange!: EventEmitter<void>;\n\n  /**\n   * Emitted when <gcds-radios> has received focus\n   */\n  @Event() gcdsFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the <gcds-radios> has lost focus\n   */\n  @Event() gcdsBlur!: EventEmitter<void>;\n\n  private onBlur = () => {\n    this.gcdsBlur.emit();\n  };\n\n  private onBlurValidate = () => {\n    if (this.validateOn == 'blur') {\n      this.validate();\n    }\n\n    this.gcdsBlur.emit();\n  };\n\n  /**\n   * Emitted when <gcds-radios> has passed validation\n   */\n  @Event() gcdsValid!: EventEmitter<void>;\n\n  /**\n   * Emitted when <gcds-radios> has a validation error\n   */\n  @Event() gcdsError!: EventEmitter<object>;\n\n  @Listen('submit', { target: 'document' })\n  submitListener(e) {\n    if (e.target == this.el.closest('form')) {\n      if (this.validateOn && this.validateOn != 'other') {\n        this.validate();\n      }\n\n      if (this.hasError && this.validateOn != 'other') {\n        e.preventDefault();\n      }\n    }\n  }\n\n  /*\n   * Form internal functions\n   */\n  formResetCallback() {\n    if (this.value != this.initialValue) {\n      this.internals.setFormValue(this.initialValue, 'checked');\n      this.value = this.initialValue;\n    }\n  }\n\n  formStateRestoreCallback(state) {\n    this.internals.setFormValue(state);\n    this.value = state;\n  }\n\n  /*\n   * Observe lang attribute change\n   */\n  @Watch('lang')\n  watchLang(newValue, oldValue) {\n    if (newValue !== oldValue) {\n      this.lang = newValue;\n    }\n  }\n\n  private handleInput = (e, customEvent) => {\n    const val = e.target && e.target.value;\n    this.value = val;\n    this.internals.setFormValue(val ? val : null, 'checked');\n\n    if (e.type === 'change') {\n      const changeEvt = new e.constructor(e.type, e);\n      this.el.dispatchEvent(changeEvt);\n    }\n\n    customEvent.emit(this.value);\n  };\n\n  /*\n   * Validate required properties\n   */\n  private validateRequiredProps() {\n    this.validateLegend();\n    this.validateName();\n\n    return isValid(this.errors, ['name', 'legend', 'options']);\n  }\n\n  async componentWillLoad() {\n    // Define lang attribute\n    this.lang = assignLanguage(this.el);\n\n    this.validateOptions();\n    this.validateRequiredProps();\n    this.validateErrorMessage();\n    this.validateValidator();\n\n    // Assign required validator if needed\n    requiredValidator(this.el, 'radio');\n\n    if (this.validator) {\n      this._validator = getValidator(this.validator);\n    }\n\n    this.inheritedAttributes = inheritAttributes(this.el, this.shadowElement);\n    this.initialValue = this.value ? this.value : null;\n\n    const valid = this.validateRequiredProps();\n\n    if (!valid) {\n      logError('gcds-radios', this.errors);\n    }\n  }\n\n  async componentDidUpdate() {\n    // Validate props again if changed after render\n    const valid = this.validateRequiredProps();\n\n    if (!valid) {\n      logError('gcds-radios', this.errors);\n    }\n  }\n\n  render() {\n    const {\n      lang,\n      name,\n      legend,\n      value,\n      required,\n      hint,\n      errorMessage,\n      disabled,\n      hasError,\n      inheritedAttributes,\n    } = this;\n\n    const fieldsetAttrs = {\n      'tabindex': '-1',\n      'aria-labelledby': 'radios-legend',\n    };\n\n    if (hint) {\n      const hintID = this.hint ? `radios-hint ` : '';\n      fieldsetAttrs['aria-labelledby'] =\n        `${fieldsetAttrs['aria-labelledby']} ${hintID}`.trim();\n    }\n\n    if (this.validateRequiredProps()) {\n      return (\n        <Host onBlur={() => this.onBlurValidate()}>\n          <fieldset class=\"gcds-radios__fieldset\" {...fieldsetAttrs}>\n            <legend id=\"radios-legend\" class=\"gcds-radios__legend\">\n              {legend}\n              {required ? (\n                <span class=\"legend__required\">{i18n[lang].required}</span>\n              ) : null}\n            </legend>\n\n            {hint ? (\n              <gcds-hint id=\"radios-hint\" hint-id=\"radios\">\n                {hint}\n              </gcds-hint>\n            ) : null}\n\n            {errorMessage ? (\n              <div>\n                <gcds-error-message id=\"radios-error\" messageId=\"radios\">\n                  {errorMessage}\n                </gcds-error-message>\n              </div>\n            ) : null}\n\n            {this.optionsArr &&\n              this.optionsArr.map(radio => {\n                const attrsInput = {\n                  name,\n                  disabled: disabled,\n                  required: required,\n                  value: radio.value,\n                  checked: radio.value === value,\n                  ...inheritedAttributes,\n                };\n\n                if (radio.hint) {\n                  const hintID = radio.hint ? `hint-${radio.id} ` : '';\n                  attrsInput['aria-describedby'] = `${hintID}${\n                    attrsInput['aria-describedby']\n                      ? `${attrsInput['aria-describedby']}`\n                      : ''\n                  }`;\n                }\n\n                if (hasError) {\n                  attrsInput['aria-invalid'] = 'true';\n                  attrsInput['aria-description'] = errorMessage;\n                }\n\n                return (\n                  <div\n                    class={`gcds-radio ${\n                      disabled ? 'gcds-radio--disabled' : ''\n                    } ${hasError ? 'gcds-radio--error' : ''}`}\n                  >\n                    <input\n                      id={radio.id}\n                      type=\"radio\"\n                      {...attrsInput}\n                      onInput={e => this.handleInput(e, this.gcdsInput)}\n                      onChange={e => this.handleInput(e, this.gcdsChange)}\n                      onBlur={() => this.onBlur()}\n                      onFocus={() => this.gcdsFocus.emit()}\n                    />\n\n                    <gcds-label\n                      label={radio.label}\n                      label-for={radio.id}\n                      lang={lang}\n                      onClick={e => e.stopPropagation()}\n                    ></gcds-label>\n\n                    {radio.hint ? (\n                      <gcds-hint hint-id={radio.id}>{radio.hint}</gcds-hint>\n                    ) : null}\n                  </div>\n                );\n              })}\n          </fieldset>\n        </Host>\n      );\n    }\n  }\n}\n"],"version":3}