<div id="step-2-cdn" class="pb-300 step-2-content">
  <h2>{{ installation[locale].step2.heading }}</h2>
  <p>{{ installation[locale].step2.cdn.paragraph }}</p>

  <h3>{{ installation[locale].step2.cdn.heading }}</h3>
  <p>{{ installation[locale].step2.cdn.version | safe }}</p>
  <p>{{ installation[locale].step2.cdn.place | safe }}</p>

{% highlight "html" %}
<!-- Icons Font Awesome ({{ installation[locale].step2.cdn.icons }}) -->
<link rel="stylesheet" href="{{ links.fontAwesome }}" crossorigin="anonymous">

<!-- GC Design System -->
<link rel="stylesheet" href="https://cdn.design-system.alpha.canada.ca/@cdssnc/gcds-components@||version||/dist/gcds/gcds.css">
<script type="module" src="https://cdn.design-system.alpha.canada.ca/@cdssnc/gcds-components@||version||/dist/gcds/gcds.esm.js"></script>
<script nomodule src="https://cdn.design-system.alpha.canada.ca/@cdssnc/gcds-components@||version||/dist/gcds/gcds.js"></script>
{% endhighlight %}

  <small>{{ installation[locale].step2.cdn.note | safe }}</small>

  <h3>{{ installation[locale].step2.cdn.subheading | safe }}</h3>
  <p>{{ installation[locale].step2.cdn.latest | safe }}</p>
</div>

<script>
  async function getLatestCdnVersion() {
    const cdnLatestVersion = document.getElementById('cdn-latest-version');
    const cdnLatestVersionDate = document.getElementById('cdn-latest-version-date');
    const codeElements = document.querySelectorAll('.attr-value');

    try {
      // Fetch package metadata
      const response = await fetch(
        'https://registry.npmjs.org/@cdssnc/gcds-components',
      );
      const data = await response.json();

      // Get latest version and release date
      const latestVersion = data['dist-tags'].latest;
      const releaseDate = new Date(data.time[latestVersion]);

      // Format the release date to 'YYYY-MM-DD'
      const formattedReleaseDate = `${releaseDate.getFullYear()}-${String(releaseDate.getMonth() + 1).padStart(2, '0')}-${String(releaseDate.getDate()).padStart(2, '0')}`;

      // Update the latest version and release date in the description
      cdnLatestVersion.textContent = latestVersion;
      cdnLatestVersionDate.textContent = formattedReleaseDate;

      // Update CDN links with the latest version
      codeElements.forEach(element => {
        element.textContent = element.textContent.replace('||version||', latestVersion);
      });
    } catch (error) {
      console.error('Error fetching latest version:', error);

      // Update the latest version and release date in the description
      cdnLatestVersion.textContent = '{{ latestCdnVersion.version }}';
      cdnLatestVersionDate.textContent = '{{ latestCdnVersion.releaseDate }}';

      // Update CDN links with fallback version if fetch fails
      codeElements.forEach(element => {
        element.textContent = element.textContent.replace('||version||', '{{ latestCdnVersion.version }}');
      });
    }
  }

  getLatestCdnVersion();
</script>
